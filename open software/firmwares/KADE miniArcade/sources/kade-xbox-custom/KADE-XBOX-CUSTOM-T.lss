
KADE-XBOX-CUSTOM-T.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000205a  000020ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000205a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000043  00800102  00800102  000020f0  2**0
                  ALLOC
  3 .noinit       00000004  00800145  00800145  000020f0  2**0
                  ALLOC
  4 .debug_aranges 000003b8  00000000  00000000  000020f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000ac9  00000000  00000000  000024a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005ac0  00000000  00000000  00002f71  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001737  00000000  00000000  00008a31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000ac93  00000000  00000000  0000a168  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000590  00000000  00000000  00014dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000026d6  00000000  00000000  0001538c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d67  00000000  00000000  00017a62  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macinfo 000c13de  00000000  00000000  0001a7c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000668  00000000  00000000  000dbba7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "..\shared\generic_header.c"    
#include "..\shared\jump.c"

#define CPU_PRESCALE(n)	(CLKPR = 0x80, CLKPR = (n))

void ledOn(void) {
       0:	83 c0       	rjmp	.+262    	; 0x108 <__ctors_end>
	USB_Init();

	sei();
}

int xbox_pad_detected(void) {
       2:	00 00       	nop
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
       4:	b8 c0       	rjmp	.+368    	; 0x176 <__bad_interrupt>
#if defined(TEMPLATE_FUNC_NAME)

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       6:	00 00       	nop
       8:	b6 c0       	rjmp	.+364    	; 0x176 <__bad_interrupt>
       a:	00 00       	nop
       c:	b4 c0       	rjmp	.+360    	; 0x176 <__bad_interrupt>
       e:	00 00       	nop
      10:	b2 c0       	rjmp	.+356    	; 0x176 <__bad_interrupt>
      12:	00 00       	nop
      14:	b0 c0       	rjmp	.+352    	; 0x176 <__bad_interrupt>
      16:	00 00       	nop
      18:	ae c0       	rjmp	.+348    	; 0x176 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ac c0       	rjmp	.+344    	; 0x176 <__bad_interrupt>
      1e:	00 00       	nop
      20:	aa c0       	rjmp	.+340    	; 0x176 <__bad_interrupt>
      22:	00 00       	nop
      24:	a8 c0       	rjmp	.+336    	; 0x176 <__bad_interrupt>
      26:	00 00       	nop
      28:	a6 c0       	rjmp	.+332    	; 0x176 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 c3 0c 	jmp	0x1986	; 0x1986 <__vector_11>
      30:	a2 c0       	rjmp	.+324    	; 0x176 <__bad_interrupt>
      32:	00 00       	nop
      34:	a0 c0       	rjmp	.+320    	; 0x176 <__bad_interrupt>
      36:	00 00       	nop
      38:	9e c0       	rjmp	.+316    	; 0x176 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9c c0       	rjmp	.+312    	; 0x176 <__bad_interrupt>
      3e:	00 00       	nop
      40:	9a c0       	rjmp	.+308    	; 0x176 <__bad_interrupt>
      42:	00 00       	nop
      44:	98 c0       	rjmp	.+304    	; 0x176 <__bad_interrupt>
      46:	00 00       	nop
      48:	96 c0       	rjmp	.+300    	; 0x176 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	94 c0       	rjmp	.+296    	; 0x176 <__bad_interrupt>
      4e:	00 00       	nop
      50:	92 c0       	rjmp	.+292    	; 0x176 <__bad_interrupt>
      52:	00 00       	nop
      54:	90 c0       	rjmp	.+288    	; 0x176 <__bad_interrupt>
      56:	00 00       	nop
      58:	8e c0       	rjmp	.+284    	; 0x176 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8c c0       	rjmp	.+280    	; 0x176 <__bad_interrupt>
      5e:	00 00       	nop
      60:	8a c0       	rjmp	.+276    	; 0x176 <__bad_interrupt>
      62:	00 00       	nop
      64:	88 c0       	rjmp	.+272    	; 0x176 <__bad_interrupt>
      66:	00 00       	nop
      68:	86 c0       	rjmp	.+268    	; 0x176 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	84 c0       	rjmp	.+264    	; 0x176 <__bad_interrupt>
      6e:	00 00       	nop
      70:	82 c0       	rjmp	.+260    	; 0x176 <__bad_interrupt>
      72:	00 00       	nop

00000074 <DeviceDescriptor>:
      74:	12 01 10 01 00 00 00 08 5e 04 02 02 00 01 00 00     ........^.......
      84:	00 01                                               ..

00000086 <ConfigurationDescriptor>:
      86:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 58 42     .. .....2.....XB
      96:	00 00 07 05 82 03 20 00 04 07 05 02 03 08 00 04     ...... .........

000000a6 <LanguageString>:
      a6:	04 03 09 04                                         ....

000000aa <ManufacturerString>:
      aa:	1a 03 6b 00 61 00 64 00 65 00 76 00 69 00 63 00     ..k.a.d.e.v.i.c.
      ba:	65 00 2e 00 63 00 6f 00 6d 00 00 00                 e...c.o.m...

000000c6 <ProductString>:
      c6:	40 03 4b 00 41 00 44 00 45 00 20 00 2d 00 20 00     @.K.A.D.E. .-. .
      d6:	4b 00 69 00 63 00 6b 00 20 00 41 00 73 00 73 00     K.i.c.k. .A.s.s.
      e6:	20 00 44 00 79 00 6e 00 61 00 6d 00 69 00 63 00      .D.y.n.a.m.i.c.
      f6:	20 00 45 00 6e 00 63 00 6f 00 64 00 65 00 72 00      .E.n.c.o.d.e.r.
     106:	00 00                                               ..

00000108 <__ctors_end>:
     108:	11 24       	eor	r1, r1
     10a:	1f be       	out	0x3f, r1	; 63
     10c:	cf ef       	ldi	r28, 0xFF	; 255
     10e:	d2 e0       	ldi	r29, 0x02	; 2
     110:	de bf       	out	0x3e, r29	; 62
     112:	cd bf       	out	0x3d, r28	; 61

00000114 <Bootloader_Jump_Check>:

void Bootloader_Jump_Check(void) ATTR_INIT_SECTION(3);
void Bootloader_Jump_Check(void)
{
  // If the reset source was the bootloader and the key is correct, clear it and jump to the bootloader
  if ((MCUSR & (1<<WDRF)) && (Boot_Key == MAGIC_BOOT_KEY))
     114:	04 b6       	in	r0, 0x34	; 52
     116:	03 fe       	sbrs	r0, 3
     118:	18 c0       	rjmp	.+48     	; 0x14a <__do_copy_data>
     11a:	80 91 45 01 	lds	r24, 0x0145
     11e:	90 91 46 01 	lds	r25, 0x0146
     122:	a0 91 47 01 	lds	r26, 0x0147
     126:	b0 91 48 01 	lds	r27, 0x0148
     12a:	8a 5c       	subi	r24, 0xCA	; 202
     12c:	9c 4a       	sbci	r25, 0xAC	; 172
     12e:	a2 44       	sbci	r26, 0x42	; 66
     130:	bc 4d       	sbci	r27, 0xDC	; 220
     132:	59 f4       	brne	.+22     	; 0x14a <__do_copy_data>
  {
	  Boot_Key = 0;
     134:	10 92 45 01 	sts	0x0145, r1
     138:	10 92 46 01 	sts	0x0146, r1
     13c:	10 92 47 01 	sts	0x0147, r1
     140:	10 92 48 01 	sts	0x0148, r1
	  ((void (*)(void))BOOTLOADER_START_ADDRESS)(); 
     144:	e0 e0       	ldi	r30, 0x00	; 0
     146:	f0 ef       	ldi	r31, 0xF0	; 240
     148:	09 95       	icall

0000014a <__do_copy_data>:
     14a:	11 e0       	ldi	r17, 0x01	; 1
     14c:	a0 e0       	ldi	r26, 0x00	; 0
     14e:	b1 e0       	ldi	r27, 0x01	; 1
     150:	ea e5       	ldi	r30, 0x5A	; 90
     152:	f0 e2       	ldi	r31, 0x20	; 32
     154:	02 c0       	rjmp	.+4      	; 0x15a <.do_copy_data_start>

00000156 <.do_copy_data_loop>:
     156:	05 90       	lpm	r0, Z+
     158:	0d 92       	st	X+, r0

0000015a <.do_copy_data_start>:
     15a:	a2 30       	cpi	r26, 0x02	; 2
     15c:	b1 07       	cpc	r27, r17
     15e:	d9 f7       	brne	.-10     	; 0x156 <.do_copy_data_loop>

00000160 <__do_clear_bss>:
     160:	11 e0       	ldi	r17, 0x01	; 1
     162:	a2 e0       	ldi	r26, 0x02	; 2
     164:	b1 e0       	ldi	r27, 0x01	; 1
     166:	01 c0       	rjmp	.+2      	; 0x16a <.do_clear_bss_start>

00000168 <.do_clear_bss_loop>:
     168:	1d 92       	st	X+, r1

0000016a <.do_clear_bss_start>:
     16a:	a5 34       	cpi	r26, 0x45	; 69
     16c:	b1 07       	cpc	r27, r17
     16e:	e1 f7       	brne	.-8      	; 0x168 <.do_clear_bss_loop>
     170:	cb d1       	rcall	.+918    	; 0x508 <main>
     172:	0c 94 2b 10 	jmp	0x2056	; 0x2056 <_exit>

00000176 <__bad_interrupt>:
     176:	44 cf       	rjmp	.-376    	; 0x0 <__vectors>

00000178 <data>:

#define ACK 0
#define DELAY 150

void data(uint8_t x) {
    DDDR |= (1 << DBIT);
     178:	51 9a       	sbi	0x0a, 1	; 10
    if(x==0)
     17a:	88 23       	and	r24, r24
     17c:	11 f4       	brne	.+4      	; 0x182 <data+0xa>
	   	DPORT &= ~(1 << DBIT);
     17e:	59 98       	cbi	0x0b, 1	; 11
     180:	08 95       	ret
    else if(x==1)
     182:	81 30       	cpi	r24, 0x01	; 1
     184:	09 f4       	brne	.+2      	; 0x188 <data+0x10>
	    DPORT |= (1 << DBIT);
     186:	59 9a       	sbi	0x0b, 1	; 11
     188:	08 95       	ret

0000018a <clk>:
	return;
}

void clk(uint8_t x) {
    CDDR |= (1 << CBIT);
     18a:	55 9a       	sbi	0x0a, 5	; 10
	if(x==0)
     18c:	88 23       	and	r24, r24
     18e:	11 f4       	brne	.+4      	; 0x194 <clk+0xa>
		CPORT &= ~(1 << CBIT);
     190:	5d 98       	cbi	0x0b, 5	; 11
     192:	08 95       	ret
	else if(x==1)
     194:	81 30       	cpi	r24, 0x01	; 1
     196:	09 f4       	brne	.+2      	; 0x19a <clk+0x10>
		CPORT |= (1 << CBIT);
     198:	5d 9a       	sbi	0x0b, 5	; 11
     19a:	08 95       	ret

0000019c <serout>:
	return;
}

void serout(uint8_t bit) {
     19c:	01 c0       	rjmp	.+2      	; 0x1a0 <serout+0x4>
    while(CLK){
        asm("nop");
     19e:	00 00       	nop
		CPORT |= (1 << CBIT);
	return;
}

void serout(uint8_t bit) {
    while(CLK){
     1a0:	4d 99       	sbic	0x09, 5	; 9
     1a2:	fd cf       	rjmp	.-6      	; 0x19e <serout+0x2>
        asm("nop");
    }
    data(bit);
     1a4:	e9 df       	rcall	.-46     	; 0x178 <data>
     1a6:	01 c0       	rjmp	.+2      	; 0x1aa <serout+0xe>
    while(!CLK) {
        asm("nop");
     1a8:	00 00       	nop
void serout(uint8_t bit) {
    while(CLK){
        asm("nop");
    }
    data(bit);
    while(!CLK) {
     1aa:	4d 9b       	sbis	0x09, 5	; 9
     1ac:	fd cf       	rjmp	.-6      	; 0x1a8 <serout+0xc>
        asm("nop");
    }
}
     1ae:	08 95       	ret

000001b0 <serin>:

uint8_t serin() {
     1b0:	01 c0       	rjmp	.+2      	; 0x1b4 <serin+0x4>
    uint8_t state;
    while(CLK){
        asm("nop");
     1b2:	00 00       	nop
    }
}

uint8_t serin() {
    uint8_t state;
    while(CLK){
     1b4:	4d 99       	sbic	0x09, 5	; 9
     1b6:	fd cf       	rjmp	.-6      	; 0x1b2 <serin+0x2>
        asm("nop");
    }
    state = DATA;
     1b8:	89 b1       	in	r24, 0x09	; 9
     1ba:	01 c0       	rjmp	.+2      	; 0x1be <serin+0xe>
    while(!CLK){
        asm("nop");
     1bc:	00 00       	nop
    uint8_t state;
    while(CLK){
        asm("nop");
    }
    state = DATA;
    while(!CLK){
     1be:	4d 9b       	sbis	0x09, 5	; 9
     1c0:	fd cf       	rjmp	.-6      	; 0x1bc <serin+0xc>
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	82 70       	andi	r24, 0x02	; 2
     1c6:	90 70       	andi	r25, 0x00	; 0
     1c8:	95 95       	asr	r25
     1ca:	87 95       	ror	r24
        asm("nop");
    }
    return state;
}
     1cc:	08 95       	ret

000001ce <oparity>:

uint8_t oparity(uint8_t byte) {
     1ce:	98 2f       	mov	r25, r24
    uint8_t par=1;
    par ^= ((byte & (1 << 0)) >> 0);
    par ^= ((byte & (1 << 1)) >> 1);
     1d0:	48 2f       	mov	r20, r24
     1d2:	50 e0       	ldi	r21, 0x00	; 0
     1d4:	88 1f       	adc	r24, r24
     1d6:	88 27       	eor	r24, r24
     1d8:	88 1f       	adc	r24, r24
     1da:	91 70       	andi	r25, 0x01	; 1
     1dc:	89 27       	eor	r24, r25
     1de:	91 e0       	ldi	r25, 0x01	; 1
     1e0:	89 27       	eor	r24, r25
     1e2:	9a 01       	movw	r18, r20
     1e4:	22 70       	andi	r18, 0x02	; 2
     1e6:	30 70       	andi	r19, 0x00	; 0
     1e8:	35 95       	asr	r19
     1ea:	27 95       	ror	r18
     1ec:	82 27       	eor	r24, r18
     1ee:	9a 01       	movw	r18, r20
     1f0:	24 70       	andi	r18, 0x04	; 4
     1f2:	30 70       	andi	r19, 0x00	; 0
     1f4:	35 95       	asr	r19
     1f6:	27 95       	ror	r18
     1f8:	35 95       	asr	r19
     1fa:	27 95       	ror	r18
     1fc:	82 27       	eor	r24, r18
     1fe:	9a 01       	movw	r18, r20
     200:	28 70       	andi	r18, 0x08	; 8
     202:	30 70       	andi	r19, 0x00	; 0
     204:	e3 e0       	ldi	r30, 0x03	; 3
     206:	35 95       	asr	r19
     208:	27 95       	ror	r18
     20a:	ea 95       	dec	r30
     20c:	e1 f7       	brne	.-8      	; 0x206 <oparity+0x38>
     20e:	82 27       	eor	r24, r18
     210:	9a 01       	movw	r18, r20
     212:	20 71       	andi	r18, 0x10	; 16
     214:	30 70       	andi	r19, 0x00	; 0
     216:	74 e0       	ldi	r23, 0x04	; 4
     218:	35 95       	asr	r19
     21a:	27 95       	ror	r18
     21c:	7a 95       	dec	r23
     21e:	e1 f7       	brne	.-8      	; 0x218 <oparity+0x4a>
     220:	82 27       	eor	r24, r18
     222:	9a 01       	movw	r18, r20
     224:	20 72       	andi	r18, 0x20	; 32
     226:	30 70       	andi	r19, 0x00	; 0
     228:	65 e0       	ldi	r22, 0x05	; 5
     22a:	35 95       	asr	r19
     22c:	27 95       	ror	r18
     22e:	6a 95       	dec	r22
     230:	e1 f7       	brne	.-8      	; 0x22a <oparity+0x5c>
     232:	82 27       	eor	r24, r18
     234:	40 74       	andi	r20, 0x40	; 64
     236:	50 70       	andi	r21, 0x00	; 0
     238:	36 e0       	ldi	r19, 0x06	; 6
     23a:	55 95       	asr	r21
     23c:	47 95       	ror	r20
     23e:	3a 95       	dec	r19
     240:	e1 f7       	brne	.-8      	; 0x23a <oparity+0x6c>
    par ^= ((byte & (1 << 4)) >> 4);
    par ^= ((byte & (1 << 5)) >> 5);
    par ^= ((byte & (1 << 6)) >> 6);
    par ^= ((byte & (1 << 7)) >> 7);
    return par;
}
     242:	84 27       	eor	r24, r20
     244:	08 95       	ret

00000246 <send_packet>:

void send_packet(uint8_t byte) {
     246:	9f 92       	push	r9
     248:	af 92       	push	r10
     24a:	bf 92       	push	r11
     24c:	cf 92       	push	r12
     24e:	df 92       	push	r13
     250:	ef 92       	push	r14
     252:	ff 92       	push	r15
     254:	0f 93       	push	r16
     256:	1f 93       	push	r17
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	18 2f       	mov	r17, r24
    uint8_t parity;
    parity = oparity(byte);
     25e:	b7 df       	rcall	.-146    	; 0x1ce <oparity>
     260:	98 2e       	mov	r9, r24
    clk(1);
	CDDR &= ~(1 << CBIT); // Release clock
	CPORT |= (1 << CBIT); //Set the pull up on Clock
    /////////////
    serout((byte & (1 << 0)) >> 0);
    serout((byte & (1 << 1)) >> 1);
     262:	21 2f       	mov	r18, r17
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	c9 01       	movw	r24, r18
     268:	82 70       	andi	r24, 0x02	; 2
     26a:	90 70       	andi	r25, 0x00	; 0
     26c:	95 95       	asr	r25
     26e:	87 95       	ror	r24
     270:	a8 2e       	mov	r10, r24
    serout((byte & (1 << 2)) >> 2);
     272:	c9 01       	movw	r24, r18
     274:	84 70       	andi	r24, 0x04	; 4
     276:	90 70       	andi	r25, 0x00	; 0
     278:	95 95       	asr	r25
     27a:	87 95       	ror	r24
     27c:	95 95       	asr	r25
     27e:	87 95       	ror	r24
     280:	b8 2e       	mov	r11, r24
    serout((byte & (1 << 3)) >> 3);
     282:	c9 01       	movw	r24, r18
     284:	88 70       	andi	r24, 0x08	; 8
     286:	90 70       	andi	r25, 0x00	; 0
     288:	53 e0       	ldi	r21, 0x03	; 3
     28a:	95 95       	asr	r25
     28c:	87 95       	ror	r24
     28e:	5a 95       	dec	r21
     290:	e1 f7       	brne	.-8      	; 0x28a <send_packet+0x44>
     292:	c8 2e       	mov	r12, r24
    serout((byte & (1 << 4)) >> 4);
     294:	c9 01       	movw	r24, r18
     296:	80 71       	andi	r24, 0x10	; 16
     298:	90 70       	andi	r25, 0x00	; 0
     29a:	44 e0       	ldi	r20, 0x04	; 4
     29c:	95 95       	asr	r25
     29e:	87 95       	ror	r24
     2a0:	4a 95       	dec	r20
     2a2:	e1 f7       	brne	.-8      	; 0x29c <send_packet+0x56>
     2a4:	d8 2e       	mov	r13, r24
    serout((byte & (1 << 5)) >> 5);
     2a6:	c9 01       	movw	r24, r18
     2a8:	80 72       	andi	r24, 0x20	; 32
     2aa:	90 70       	andi	r25, 0x00	; 0
     2ac:	05 e0       	ldi	r16, 0x05	; 5
     2ae:	95 95       	asr	r25
     2b0:	87 95       	ror	r24
     2b2:	0a 95       	dec	r16
     2b4:	e1 f7       	brne	.-8      	; 0x2ae <send_packet+0x68>
     2b6:	e8 2e       	mov	r14, r24
    serout((byte & (1 << 6)) >> 6);
     2b8:	20 74       	andi	r18, 0x40	; 64
     2ba:	30 70       	andi	r19, 0x00	; 0
     2bc:	b6 e0       	ldi	r27, 0x06	; 6
     2be:	35 95       	asr	r19
     2c0:	27 95       	ror	r18
     2c2:	ba 95       	dec	r27
     2c4:	e1 f7       	brne	.-8      	; 0x2be <send_packet+0x78>
     2c6:	f2 2e       	mov	r15, r18
    serout((byte & (1 << 7)) >> 7);
     2c8:	01 2f       	mov	r16, r17
     2ca:	00 1f       	adc	r16, r16
     2cc:	00 27       	eor	r16, r16
     2ce:	00 1f       	adc	r16, r16
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2d0:	c8 e5       	ldi	r28, 0x58	; 88
     2d2:	d2 e0       	ldi	r29, 0x02	; 2
    data(0); //Start
    clk(1);
	CDDR &= ~(1 << CBIT); // Release clock
	CPORT |= (1 << CBIT); //Set the pull up on Clock
    /////////////
    serout((byte & (1 << 0)) >> 0);
     2d4:	11 70       	andi	r17, 0x01	; 1
}

void send_packet(uint8_t byte) {
    uint8_t parity;
    parity = oparity(byte);
	clk(0);
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	58 df       	rcall	.-336    	; 0x18a <clk>
     2da:	ce 01       	movw	r24, r28
     2dc:	01 97       	sbiw	r24, 0x01	; 1
     2de:	f1 f7       	brne	.-4      	; 0x2dc <send_packet+0x96>
	_delay_us(DELAY);
    data(0); //Start
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	4a df       	rcall	.-364    	; 0x178 <data>
    clk(1);
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	51 df       	rcall	.-350    	; 0x18a <clk>
	CDDR &= ~(1 << CBIT); // Release clock
     2e8:	55 98       	cbi	0x0a, 5	; 10
	CPORT |= (1 << CBIT); //Set the pull up on Clock
     2ea:	5d 9a       	sbi	0x0b, 5	; 11
    /////////////
    serout((byte & (1 << 0)) >> 0);
     2ec:	81 2f       	mov	r24, r17
     2ee:	56 df       	rcall	.-340    	; 0x19c <serout>
    serout((byte & (1 << 1)) >> 1);
     2f0:	8a 2d       	mov	r24, r10
     2f2:	54 df       	rcall	.-344    	; 0x19c <serout>
    serout((byte & (1 << 2)) >> 2);
     2f4:	8b 2d       	mov	r24, r11
     2f6:	52 df       	rcall	.-348    	; 0x19c <serout>
    serout((byte & (1 << 3)) >> 3);
     2f8:	8c 2d       	mov	r24, r12
     2fa:	50 df       	rcall	.-352    	; 0x19c <serout>
    serout((byte & (1 << 4)) >> 4);
     2fc:	8d 2d       	mov	r24, r13
     2fe:	4e df       	rcall	.-356    	; 0x19c <serout>
    serout((byte & (1 << 5)) >> 5);
     300:	8e 2d       	mov	r24, r14
     302:	4c df       	rcall	.-360    	; 0x19c <serout>
    serout((byte & (1 << 6)) >> 6);
     304:	8f 2d       	mov	r24, r15
     306:	4a df       	rcall	.-364    	; 0x19c <serout>
    serout((byte & (1 << 7)) >> 7);
     308:	80 2f       	mov	r24, r16
     30a:	48 df       	rcall	.-368    	; 0x19c <serout>
    /////////////
    serout(parity);
     30c:	89 2d       	mov	r24, r9
     30e:	46 df       	rcall	.-372    	; 0x19c <serout>
    /////////////
    serout(1); //Stop
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	44 df       	rcall	.-376    	; 0x19c <serout>
    DDDR &= ~(1 << DBIT); //Release the Data line
     314:	51 98       	cbi	0x0a, 1	; 10
    DPORT |= (1 << DBIT); //Set the pull up on Data
     316:	59 9a       	sbi	0x0b, 1	; 11
    /////////////
    if(serin() != ACK)
     318:	4b df       	rcall	.-362    	; 0x1b0 <serin>
     31a:	88 23       	and	r24, r24
     31c:	e1 f6       	brne	.-72     	; 0x2d6 <send_packet+0x90>
        send_packet(byte); // Try again if ACK has not been received

	return;
}
     31e:	df 91       	pop	r29
     320:	cf 91       	pop	r28
     322:	1f 91       	pop	r17
     324:	0f 91       	pop	r16
     326:	ff 90       	pop	r15
     328:	ef 90       	pop	r14
     32a:	df 90       	pop	r13
     32c:	cf 90       	pop	r12
     32e:	bf 90       	pop	r11
     330:	af 90       	pop	r10
     332:	9f 90       	pop	r9
     334:	08 95       	ret

00000336 <read_packet>:

uint8_t read_packet(void) {
     336:	bf 92       	push	r11
     338:	cf 92       	push	r12
     33a:	df 92       	push	r13
     33c:	ef 92       	push	r14
     33e:	ff 92       	push	r15
     340:	0f 93       	push	r16
     342:	1f 93       	push	r17
    uint8_t byte=0,par;
    serin(); //Start
     344:	35 df       	rcall	.-406    	; 0x1b0 <serin>
    byte |= (serin() << 0);
     346:	34 df       	rcall	.-408    	; 0x1b0 <serin>
     348:	b8 2e       	mov	r11, r24
    byte |= (serin() << 1);
     34a:	32 df       	rcall	.-412    	; 0x1b0 <serin>
     34c:	c8 2e       	mov	r12, r24
    byte |= (serin() << 2);
     34e:	30 df       	rcall	.-416    	; 0x1b0 <serin>
     350:	18 2f       	mov	r17, r24
    byte |= (serin() << 3);
     352:	2e df       	rcall	.-420    	; 0x1b0 <serin>
     354:	08 2f       	mov	r16, r24
    byte |= (serin() << 4);
     356:	2c df       	rcall	.-424    	; 0x1b0 <serin>
     358:	f8 2e       	mov	r15, r24
    byte |= (serin() << 5);
     35a:	2a df       	rcall	.-428    	; 0x1b0 <serin>
     35c:	e8 2e       	mov	r14, r24
    byte |= (serin() << 6);
     35e:	28 df       	rcall	.-432    	; 0x1b0 <serin>
     360:	d8 2e       	mov	r13, r24
    byte |= (serin() << 7);
     362:	26 df       	rcall	.-436    	; 0x1b0 <serin>
     364:	cc 0c       	add	r12, r12
     366:	11 0f       	add	r17, r17
     368:	11 0f       	add	r17, r17
     36a:	1c 29       	or	r17, r12
     36c:	1b 29       	or	r17, r11
     36e:	00 0f       	add	r16, r16
     370:	00 0f       	add	r16, r16
     372:	00 0f       	add	r16, r16
     374:	01 2b       	or	r16, r17
     376:	f2 94       	swap	r15
     378:	a0 ef       	ldi	r26, 0xF0	; 240
     37a:	fa 22       	and	r15, r26
     37c:	f0 2a       	or	r15, r16
     37e:	e2 94       	swap	r14
     380:	ee 0c       	add	r14, r14
     382:	f0 ee       	ldi	r31, 0xE0	; 224
     384:	ef 22       	and	r14, r31
     386:	ef 28       	or	r14, r15
     388:	d2 94       	swap	r13
     38a:	dd 0c       	add	r13, r13
     38c:	dd 0c       	add	r13, r13
     38e:	e0 ec       	ldi	r30, 0xC0	; 192
     390:	de 22       	and	r13, r30
     392:	de 28       	or	r13, r14
     394:	08 2f       	mov	r16, r24
     396:	07 95       	ror	r16
     398:	00 27       	eor	r16, r16
     39a:	07 95       	ror	r16
     39c:	0d 29       	or	r16, r13
    par = serin(); //Parity
     39e:	08 df       	rcall	.-496    	; 0x1b0 <serin>
     3a0:	18 2f       	mov	r17, r24
    serin(); //Stop
     3a2:	06 df       	rcall	.-500    	; 0x1b0 <serin>

    if(par != oparity(byte))
     3a4:	80 2f       	mov	r24, r16
     3a6:	13 df       	rcall	.-474    	; 0x1ce <oparity>
     3a8:	18 17       	cp	r17, r24
     3aa:	11 f0       	breq	.+4      	; 0x3b0 <read_packet+0x7a>
        send_packet(0xfe); //Resend
     3ac:	8e ef       	ldi	r24, 0xFE	; 254
     3ae:	4b df       	rcall	.-362    	; 0x246 <send_packet>

	return byte;
}
     3b0:	80 2f       	mov	r24, r16
     3b2:	1f 91       	pop	r17
     3b4:	0f 91       	pop	r16
     3b6:	ff 90       	pop	r15
     3b8:	ef 90       	pop	r14
     3ba:	df 90       	pop	r13
     3bc:	cf 90       	pop	r12
     3be:	bf 90       	pop	r11
     3c0:	08 95       	ret

000003c2 <calcMovement>:
		ps2data[ps2_i]=read_packet();
	}	
}

void calcMovement(){
	vertSignBit  = (ps2data[0] & 0b00100000) << 2;
     3c2:	90 91 11 01 	lds	r25, 0x0111
     3c6:	89 2f       	mov	r24, r25
     3c8:	80 72       	andi	r24, 0x20	; 32
     3ca:	88 0f       	add	r24, r24
     3cc:	88 0f       	add	r24, r24
     3ce:	80 93 0c 01 	sts	0x010C, r24
	posVert  = ps2data[2];
     3d2:	80 91 13 01 	lds	r24, 0x0113
     3d6:	80 93 02 01 	sts	0x0102, r24
	ps2_y = posVert;
     3da:	80 93 0e 01 	sts	0x010E, r24

	horizSignBit = (ps2data[0] & 0b00010000) << 3;
     3de:	90 71       	andi	r25, 0x10	; 16
     3e0:	99 0f       	add	r25, r25
     3e2:	99 0f       	add	r25, r25
     3e4:	99 0f       	add	r25, r25
     3e6:	90 93 0d 01 	sts	0x010D, r25
	posHoriz = ps2data[1];
     3ea:	80 91 12 01 	lds	r24, 0x0112
     3ee:	80 93 03 01 	sts	0x0103, r24
	ps2_x = posHoriz;		
     3f2:	80 93 0f 01 	sts	0x010F, r24
}
     3f6:	08 95       	ret

000003f8 <readTrackBall>:
	//Mode
	send_packet(0xf0); //Set remote mode
	read_packet(); //Ack
}

void readTrackBall(){	
     3f8:	1f 93       	push	r17
	send_packet(0xeb);
     3fa:	8b ee       	ldi	r24, 0xEB	; 235
     3fc:	24 df       	rcall	.-440    	; 0x246 <send_packet>
	read_packet(); //Ack
     3fe:	9b df       	rcall	.-202    	; 0x336 <read_packet>
	for(ps2_i=0;ps2_i<3;ps2_i++){
     400:	10 92 10 01 	sts	0x0110, r1
     404:	0b c0       	rjmp	.+22     	; 0x41c <readTrackBall+0x24>
		ps2data[ps2_i]=read_packet();
     406:	97 df       	rcall	.-210    	; 0x336 <read_packet>
     408:	e1 2f       	mov	r30, r17
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	ef 5e       	subi	r30, 0xEF	; 239
     40e:	fe 4f       	sbci	r31, 0xFE	; 254
     410:	80 83       	st	Z, r24
}

void readTrackBall(){	
	send_packet(0xeb);
	read_packet(); //Ack
	for(ps2_i=0;ps2_i<3;ps2_i++){
     412:	80 91 10 01 	lds	r24, 0x0110
     416:	8f 5f       	subi	r24, 0xFF	; 255
     418:	80 93 10 01 	sts	0x0110, r24
     41c:	10 91 10 01 	lds	r17, 0x0110
     420:	13 30       	cpi	r17, 0x03	; 3
     422:	88 f3       	brcs	.-30     	; 0x406 <readTrackBall+0xe>
		ps2data[ps2_i]=read_packet();
	}	
}
     424:	1f 91       	pop	r17
     426:	08 95       	ret

00000428 <initTrackBall>:
uint8_t vertSignBit;
int8_t posVert = 0; 
int8_t posHoriz = 0;

//void initTrackBall(void){
void initTrackBall(int resolution, int rate){
     428:	0f 93       	push	r16
     42a:	1f 93       	push	r17
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	ec 01       	movw	r28, r24
     432:	8b 01       	movw	r16, r22
	//init
	send_packet(0xff);
     434:	8f ef       	ldi	r24, 0xFF	; 255
     436:	07 df       	rcall	.-498    	; 0x246 <send_packet>
	read_packet(); //Ack
     438:	7e df       	rcall	.-260    	; 0x336 <read_packet>
	read_packet(); //Bat
     43a:	7d df       	rcall	.-262    	; 0x336 <read_packet>
	read_packet(); //Device ID
     43c:	7c df       	rcall	.-264    	; 0x336 <read_packet>
	
	//Data reporting
	send_packet(0xf4); //Enable data reporting
     43e:	84 ef       	ldi	r24, 0xF4	; 244
     440:	02 df       	rcall	.-508    	; 0x246 <send_packet>
	read_packet();	   //Ack
     442:	79 df       	rcall	.-270    	; 0x336 <read_packet>
	
	//Resolution
	send_packet(0xe8); //Set resolution
     444:	88 ee       	ldi	r24, 0xE8	; 232
     446:	ff de       	rcall	.-514    	; 0x246 <send_packet>
	read_packet();     //Ack
     448:	76 df       	rcall	.-276    	; 0x336 <read_packet>
	if (resolution==0)     {send_packet(0x00);}  //1 count  per mm
     44a:	20 97       	sbiw	r28, 0x00	; 0
     44c:	11 f4       	brne	.+4      	; 0x452 <initTrackBall+0x2a>
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	0a c0       	rjmp	.+20     	; 0x466 <initTrackBall+0x3e>
	else if (resolution==1){send_packet(0x01);}  //2 counts per mm
     452:	c1 30       	cpi	r28, 0x01	; 1
     454:	d1 05       	cpc	r29, r1
     456:	11 f4       	brne	.+4      	; 0x45c <initTrackBall+0x34>
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	05 c0       	rjmp	.+10     	; 0x466 <initTrackBall+0x3e>
	else if (resolution==2){send_packet(0x02);}  //4 counts per mm
     45c:	22 97       	sbiw	r28, 0x02	; 2
     45e:	11 f4       	brne	.+4      	; 0x464 <initTrackBall+0x3c>
     460:	82 e0       	ldi	r24, 0x02	; 2
     462:	01 c0       	rjmp	.+2      	; 0x466 <initTrackBall+0x3e>
	else if (resolution==3){send_packet(0x03);}  //8 counts per mm
	else {send_packet(0x03);}
     464:	83 e0       	ldi	r24, 0x03	; 3
     466:	ef de       	rcall	.-546    	; 0x246 <send_packet>
	read_packet();     //Ack
     468:	66 df       	rcall	.-308    	; 0x336 <read_packet>
	
	//Sample rate
	send_packet(0xf3); //Set sample rate
     46a:	83 ef       	ldi	r24, 0xF3	; 243
     46c:	ec de       	rcall	.-552    	; 0x246 <send_packet>
	read_packet();     //Ack
     46e:	63 df       	rcall	.-314    	; 0x336 <read_packet>
	if (rate==0)     {send_packet(0x0a);} //10 samples per second
     470:	01 15       	cp	r16, r1
     472:	11 05       	cpc	r17, r1
     474:	11 f4       	brne	.+4      	; 0x47a <initTrackBall+0x52>
     476:	8a e0       	ldi	r24, 0x0A	; 10
     478:	1a c0       	rjmp	.+52     	; 0x4ae <initTrackBall+0x86>
	else if (rate==1){send_packet(0x14);} //20 samples per second
     47a:	01 30       	cpi	r16, 0x01	; 1
     47c:	11 05       	cpc	r17, r1
     47e:	11 f4       	brne	.+4      	; 0x484 <initTrackBall+0x5c>
     480:	84 e1       	ldi	r24, 0x14	; 20
     482:	15 c0       	rjmp	.+42     	; 0x4ae <initTrackBall+0x86>
	else if (rate==2){send_packet(0x28);} //40 samples per second
     484:	02 30       	cpi	r16, 0x02	; 2
     486:	11 05       	cpc	r17, r1
     488:	11 f4       	brne	.+4      	; 0x48e <initTrackBall+0x66>
     48a:	88 e2       	ldi	r24, 0x28	; 40
     48c:	10 c0       	rjmp	.+32     	; 0x4ae <initTrackBall+0x86>
	else if (rate==3){send_packet(0x3c);} //60 samples per second
     48e:	03 30       	cpi	r16, 0x03	; 3
     490:	11 05       	cpc	r17, r1
     492:	11 f4       	brne	.+4      	; 0x498 <initTrackBall+0x70>
     494:	8c e3       	ldi	r24, 0x3C	; 60
     496:	0b c0       	rjmp	.+22     	; 0x4ae <initTrackBall+0x86>
	else if (rate==4){send_packet(0x50);} //80 samples per second
     498:	04 30       	cpi	r16, 0x04	; 4
     49a:	11 05       	cpc	r17, r1
     49c:	11 f4       	brne	.+4      	; 0x4a2 <initTrackBall+0x7a>
     49e:	80 e5       	ldi	r24, 0x50	; 80
     4a0:	06 c0       	rjmp	.+12     	; 0x4ae <initTrackBall+0x86>
	else if (rate==5){send_packet(0x64);} //100 samples per second
     4a2:	05 30       	cpi	r16, 0x05	; 5
     4a4:	11 05       	cpc	r17, r1
     4a6:	11 f4       	brne	.+4      	; 0x4ac <initTrackBall+0x84>
     4a8:	84 e6       	ldi	r24, 0x64	; 100
     4aa:	01 c0       	rjmp	.+2      	; 0x4ae <initTrackBall+0x86>
	else if (rate==6){send_packet(0xc8);} //200 samples per second
	else {send_packet(0xc8);}
     4ac:	88 ec       	ldi	r24, 0xC8	; 200
     4ae:	cb de       	rcall	.-618    	; 0x246 <send_packet>
	//read_packet();     //Ack

		
	//Mode
	send_packet(0xf0); //Set remote mode
     4b0:	80 ef       	ldi	r24, 0xF0	; 240
     4b2:	c9 de       	rcall	.-622    	; 0x246 <send_packet>
	read_packet(); //Ack
     4b4:	40 df       	rcall	.-384    	; 0x336 <read_packet>
}
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	1f 91       	pop	r17
     4bc:	0f 91       	pop	r16
     4be:	08 95       	ret

000004c0 <Jump_To_Bootloader>:
}

void Jump_To_Bootloader(void)
{
  // If USB is used, detach from the bus
  USB_Disable();
     4c0:	0e 94 3f 0c 	call	0x187e	; 0x187e <USB_Disable>

  // Disable all interrupts
  cli();
     4c4:	f8 94       	cli
     4c6:	20 e0       	ldi	r18, 0x00	; 0
     4c8:	40 e0       	ldi	r20, 0x00	; 0
     4ca:	5a ef       	ldi	r21, 0xFA	; 250
     4cc:	ca 01       	movw	r24, r20
     4ce:	01 97       	sbiw	r24, 0x01	; 1
     4d0:	f1 f7       	brne	.-4      	; 0x4ce <Jump_To_Bootloader+0xe>

  // Wait two seconds for the USB detachment to register on the host
  for (uint8_t i = 0; i < 128; i++)
     4d2:	2f 5f       	subi	r18, 0xFF	; 255
     4d4:	20 38       	cpi	r18, 0x80	; 128
     4d6:	d1 f7       	brne	.-12     	; 0x4cc <Jump_To_Bootloader+0xc>
	_delay_ms(16);

  // Set the bootloader key to the magic value and force a reset
  Boot_Key = MAGIC_BOOT_KEY;
     4d8:	8a ec       	ldi	r24, 0xCA	; 202
     4da:	9c ea       	ldi	r25, 0xAC	; 172
     4dc:	a2 e4       	ldi	r26, 0x42	; 66
     4de:	bc ed       	ldi	r27, 0xDC	; 220
     4e0:	80 93 45 01 	sts	0x0145, r24
     4e4:	90 93 46 01 	sts	0x0146, r25
     4e8:	a0 93 47 01 	sts	0x0147, r26
     4ec:	b0 93 48 01 	sts	0x0148, r27
  wdt_enable(WDTO_250MS);
     4f0:	2c e0       	ldi	r18, 0x0C	; 12
     4f2:	88 e1       	ldi	r24, 0x18	; 24
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	f8 94       	cli
     4fa:	a8 95       	wdr
     4fc:	80 93 60 00 	sts	0x0060, r24
     500:	0f be       	out	0x3f, r0	; 63
     502:	20 93 60 00 	sts	0x0060, r18
     506:	ff cf       	rjmp	.-2      	; 0x506 <Jump_To_Bootloader+0x46>

00000508 <main>:

void ledOff(void) {
	PORTD &= ~(1<<6);
}

int main(void) {
     508:	2f 92       	push	r2
     50a:	3f 92       	push	r3
     50c:	4f 92       	push	r4
     50e:	5f 92       	push	r5
     510:	6f 92       	push	r6
     512:	7f 92       	push	r7
     514:	8f 92       	push	r8
     516:	9f 92       	push	r9
     518:	af 92       	push	r10
     51a:	bf 92       	push	r11
     51c:	cf 92       	push	r12
     51e:	df 92       	push	r13
     520:	ef 92       	push	r14
     522:	ff 92       	push	r15
     524:	0f 93       	push	r16
     526:	1f 93       	push	r17
     528:	df 93       	push	r29
     52a:	cf 93       	push	r28
     52c:	cd b7       	in	r28, 0x3d	; 61
     52e:	de b7       	in	r29, 0x3e	; 62
     530:	cd 55       	subi	r28, 0x5D	; 93
     532:	d0 40       	sbci	r29, 0x00	; 0
     534:	0f b6       	in	r0, 0x3f	; 63
     536:	f8 94       	cli
     538:	de bf       	out	0x3e, r29	; 62
     53a:	0f be       	out	0x3f, r0	; 63
     53c:	cd bf       	out	0x3d, r28	; 61
	// Set clock @ 16Mhz
	CPU_PRESCALE(0);		
     53e:	80 e8       	ldi	r24, 0x80	; 128
     540:	80 93 61 00 	sts	0x0061, r24
     544:	10 92 61 00 	sts	0x0061, r1

	//Set initial pin states.  These are adjusted based on eeprom settings.
    DDRB=0x00;
     548:	14 b8       	out	0x04, r1	; 4
    DDRC=0x00;
     54a:	17 b8       	out	0x07, r1	; 7
    DDRD=0x00;
     54c:	1a b8       	out	0x0a, r1	; 10
    PORTB=0xFF;
     54e:	8f ef       	ldi	r24, 0xFF	; 255
     550:	85 b9       	out	0x05, r24	; 5
    PORTC=0xFF;
     552:	88 b9       	out	0x08, r24	; 8
    PORTD=0xFF;
     554:	8b b9       	out	0x0b, r24	; 11
#define bit_clear(p,m) ((p) &= ~(m)) 
uint8_t i;
uint8_t t_DDRB, t_DDRC, t_DDRD, t_PORTB, t_PORTC, t_PORTD;

//save pin state
t_DDRB = DDRB;
     556:	14 b1       	in	r17, 0x04	; 4
t_DDRC = DDRC;
     558:	b7 b1       	in	r27, 0x07	; 7
t_DDRD = DDRD; 
     55a:	aa b1       	in	r26, 0x0a	; 10
t_PORTB = PORTB;
     55c:	75 b1       	in	r23, 0x05	; 5
t_PORTC = PORTC;
     55e:	68 b1       	in	r22, 0x08	; 8
t_PORTD = PORTD;
     560:	5b b1       	in	r21, 0x0b	; 11
	
//flash the leds
DDRD = 0x60; // D5,D6 - OUTPUT (LED)
     562:	80 e6       	ldi	r24, 0x60	; 96
     564:	8a b9       	out	0x0a, r24	; 10
     566:	40 e0       	ldi	r20, 0x00	; 0
     568:	20 e9       	ldi	r18, 0x90	; 144
     56a:	31 e0       	ldi	r19, 0x01	; 1
for (i=0; i<4; i++) { 
	bit_clear(PORTD,0x20);
     56c:	5d 98       	cbi	0x0b, 5	; 11
     56e:	80 e4       	ldi	r24, 0x40	; 64
     570:	91 e0       	ldi	r25, 0x01	; 1
     572:	f9 01       	movw	r30, r18
     574:	31 97       	sbiw	r30, 0x01	; 1
     576:	f1 f7       	brne	.-4      	; 0x574 <main+0x6c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     578:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     57a:	d9 f7       	brne	.-10     	; 0x572 <main+0x6a>
	_delay_ms(32);
	bit_clear(PORTD,0x40);
     57c:	5e 98       	cbi	0x0b, 6	; 11
     57e:	80 e4       	ldi	r24, 0x40	; 64
     580:	91 e0       	ldi	r25, 0x01	; 1
     582:	f9 01       	movw	r30, r18
     584:	31 97       	sbiw	r30, 0x01	; 1
     586:	f1 f7       	brne	.-4      	; 0x584 <main+0x7c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     588:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     58a:	d9 f7       	brne	.-10     	; 0x582 <main+0x7a>
	_delay_ms(32);
	bit_set(PORTD,0x20);
     58c:	5d 9a       	sbi	0x0b, 5	; 11
     58e:	80 e4       	ldi	r24, 0x40	; 64
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	f9 01       	movw	r30, r18
     594:	31 97       	sbiw	r30, 0x01	; 1
     596:	f1 f7       	brne	.-4      	; 0x594 <main+0x8c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     598:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     59a:	d9 f7       	brne	.-10     	; 0x592 <main+0x8a>
	_delay_ms(32);
	bit_set(PORTD,0x40);
     59c:	5e 9a       	sbi	0x0b, 6	; 11
     59e:	80 e4       	ldi	r24, 0x40	; 64
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	f9 01       	movw	r30, r18
     5a4:	31 97       	sbiw	r30, 0x01	; 1
     5a6:	f1 f7       	brne	.-4      	; 0x5a4 <main+0x9c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5a8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5aa:	d9 f7       	brne	.-10     	; 0x5a2 <main+0x9a>
t_PORTC = PORTC;
t_PORTD = PORTD;
	
//flash the leds
DDRD = 0x60; // D5,D6 - OUTPUT (LED)
for (i=0; i<4; i++) { 
     5ac:	4f 5f       	subi	r20, 0xFF	; 255
     5ae:	44 30       	cpi	r20, 0x04	; 4
     5b0:	e9 f6       	brne	.-70     	; 0x56c <main+0x64>
	bit_set(PORTD,0x40);
	_delay_ms(32);
}
		
//restore pin state
DDRB = t_DDRB;
     5b2:	14 b9       	out	0x04, r17	; 4
DDRC = t_DDRC;
     5b4:	b7 b9       	out	0x07, r27	; 7
DDRD = t_DDRD; 
     5b6:	aa b9       	out	0x0a, r26	; 10
PORTB = t_PORTB;
     5b8:	75 b9       	out	0x05, r23	; 5
PORTC = t_PORTC;
     5ba:	68 b9       	out	0x08, r22	; 8
PORTD = t_PORTD;
     5bc:	5b b9       	out	0x0b, r21	; 11
     5be:	2b 96       	adiw	r28, 0x0b	; 11
     5c0:	1f ae       	std	Y+63, r1	; 0x3f
     5c2:	2b 97       	sbiw	r28, 0x0b	; 11
     5c4:	00 e0       	ldi	r16, 0x00	; 0
     5c6:	10 e0       	ldi	r17, 0x00	; 0
//Flash LEDs
#include "..\shared\disco.c"

//read first 40 eeprom into an array (pins + shifted pins)
for(cnt=0;cnt<40;cnt++){	
	ass[cnt]=read_eeprom_byte(cnt);
     5c8:	a5 e1       	ldi	r26, 0x15	; 21
     5ca:	ea 2e       	mov	r14, r26
     5cc:	f1 2c       	mov	r15, r1
     5ce:	ec 0e       	add	r14, r28
     5d0:	fd 1e       	adc	r15, r29
     5d2:	c8 01       	movw	r24, r16
     5d4:	0e 94 23 10 	call	0x2046	; 0x2046 <__eerd_byte_usb162>
     5d8:	f7 01       	movw	r30, r14
     5da:	e0 0f       	add	r30, r16
     5dc:	f1 1f       	adc	r31, r17
     5de:	80 83       	st	Z, r24

	//set output pins
	if ((ass[cnt]==func_ext_shift_led)||(ass[cnt]==func_ext_power_led)){
     5e0:	8e 31       	cpi	r24, 0x1E	; 30
     5e2:	19 f0       	breq	.+6      	; 0x5ea <main+0xe2>
     5e4:	8f 31       	cpi	r24, 0x1F	; 31
     5e6:	09 f0       	breq	.+2      	; 0x5ea <main+0xe2>
     5e8:	6a c0       	rjmp	.+212    	; 0x6be <main+0x1b6>
     5ea:	90 2f       	mov	r25, r16
* You should have received a copy of the GNU General Public License
* along with this program. If not, see <http://www.gnu.org/licenses/>.
*/ 

//set output pin(s)
if (cnt==0)  { bit_clear(PORTC, 0x04); bit_set(DDRC, 0x04);} //PIN A1
     5ec:	00 23       	and	r16, r16
     5ee:	19 f4       	brne	.+6      	; 0x5f6 <main+0xee>
     5f0:	42 98       	cbi	0x08, 2	; 8
     5f2:	3a 9a       	sbi	0x07, 2	; 7
     5f4:	0a c0       	rjmp	.+20     	; 0x60a <main+0x102>
if (cnt==1)  { bit_clear(PORTD, 0x01); bit_set(DDRD, 0x01);} //PIN A2
     5f6:	01 30       	cpi	r16, 0x01	; 1
     5f8:	19 f4       	brne	.+6      	; 0x600 <main+0xf8>
     5fa:	58 98       	cbi	0x0b, 0	; 11
     5fc:	50 9a       	sbi	0x0a, 0	; 10
     5fe:	59 c0       	rjmp	.+178    	; 0x6b2 <main+0x1aa>
if (cnt==2)  { bit_clear(PORTD, 0x02); bit_set(DDRD, 0x02);} //PIN A3
     600:	02 30       	cpi	r16, 0x02	; 2
     602:	19 f4       	brne	.+6      	; 0x60a <main+0x102>
     604:	59 98       	cbi	0x0b, 1	; 11
     606:	51 9a       	sbi	0x0a, 1	; 10
     608:	54 c0       	rjmp	.+168    	; 0x6b2 <main+0x1aa>
if (cnt==3)  { bit_clear(PORTD, 0x04); bit_set(DDRD, 0x04);} //PIN A4
     60a:	93 30       	cpi	r25, 0x03	; 3
     60c:	19 f4       	brne	.+6      	; 0x614 <main+0x10c>
     60e:	5a 98       	cbi	0x0b, 2	; 11
     610:	52 9a       	sbi	0x0a, 2	; 10
     612:	4f c0       	rjmp	.+158    	; 0x6b2 <main+0x1aa>
if (cnt==4)  { bit_clear(PORTD, 0x08); bit_set(DDRD, 0x08);} //PIN A5
     614:	94 30       	cpi	r25, 0x04	; 4
     616:	19 f4       	brne	.+6      	; 0x61e <main+0x116>
     618:	5b 98       	cbi	0x0b, 3	; 11
     61a:	53 9a       	sbi	0x0a, 3	; 10
     61c:	4a c0       	rjmp	.+148    	; 0x6b2 <main+0x1aa>
if (cnt==5)  { bit_clear(PORTD, 0x10); bit_set(DDRD, 0x10);} //PIN A6
     61e:	95 30       	cpi	r25, 0x05	; 5
     620:	19 f4       	brne	.+6      	; 0x628 <main+0x120>
     622:	5c 98       	cbi	0x0b, 4	; 11
     624:	54 9a       	sbi	0x0a, 4	; 10
     626:	45 c0       	rjmp	.+138    	; 0x6b2 <main+0x1aa>
if (cnt==6)  { bit_clear(PORTD, 0x20); bit_set(DDRD, 0x20);} //PIN A7
     628:	96 30       	cpi	r25, 0x06	; 6
     62a:	19 f4       	brne	.+6      	; 0x632 <main+0x12a>
     62c:	5d 98       	cbi	0x0b, 5	; 11
     62e:	55 9a       	sbi	0x0a, 5	; 10
     630:	40 c0       	rjmp	.+128    	; 0x6b2 <main+0x1aa>
if (cnt==7)  { bit_clear(PORTD, 0x40); bit_set(DDRD, 0x40);} //PIN A8
     632:	97 30       	cpi	r25, 0x07	; 7
     634:	19 f4       	brne	.+6      	; 0x63c <main+0x134>
     636:	5e 98       	cbi	0x0b, 6	; 11
     638:	56 9a       	sbi	0x0a, 6	; 10
     63a:	3b c0       	rjmp	.+118    	; 0x6b2 <main+0x1aa>
if (cnt==8)  { bit_clear(PORTB, 0x01); bit_set(DDRB, 0x01);} //PIN A9
     63c:	98 30       	cpi	r25, 0x08	; 8
     63e:	19 f4       	brne	.+6      	; 0x646 <main+0x13e>
     640:	28 98       	cbi	0x05, 0	; 5
     642:	20 9a       	sbi	0x04, 0	; 4
     644:	36 c0       	rjmp	.+108    	; 0x6b2 <main+0x1aa>
if (cnt==9)  { bit_clear(PORTB, 0x02); bit_set(DDRB, 0x02);} //PIN A10
     646:	99 30       	cpi	r25, 0x09	; 9
     648:	19 f4       	brne	.+6      	; 0x650 <main+0x148>
     64a:	29 98       	cbi	0x05, 1	; 5
     64c:	21 9a       	sbi	0x04, 1	; 4
     64e:	31 c0       	rjmp	.+98     	; 0x6b2 <main+0x1aa>
if (cnt==10) { bit_clear(PORTB, 0x04); bit_set(DDRB, 0x04);} //PIN B1
     650:	9a 30       	cpi	r25, 0x0A	; 10
     652:	19 f4       	brne	.+6      	; 0x65a <main+0x152>
     654:	2a 98       	cbi	0x05, 2	; 5
     656:	22 9a       	sbi	0x04, 2	; 4
     658:	2c c0       	rjmp	.+88     	; 0x6b2 <main+0x1aa>
if (cnt==11) { bit_clear(PORTB, 0x08); bit_set(DDRB, 0x08);} //PIN B2
     65a:	9b 30       	cpi	r25, 0x0B	; 11
     65c:	19 f4       	brne	.+6      	; 0x664 <main+0x15c>
     65e:	2b 98       	cbi	0x05, 3	; 5
     660:	23 9a       	sbi	0x04, 3	; 4
     662:	27 c0       	rjmp	.+78     	; 0x6b2 <main+0x1aa>
if (cnt==12) { bit_clear(PORTB, 0x10); bit_set(DDRB, 0x10);} //PIN B3
     664:	9c 30       	cpi	r25, 0x0C	; 12
     666:	19 f4       	brne	.+6      	; 0x66e <main+0x166>
     668:	2c 98       	cbi	0x05, 4	; 5
     66a:	24 9a       	sbi	0x04, 4	; 4
     66c:	22 c0       	rjmp	.+68     	; 0x6b2 <main+0x1aa>
if (cnt==13) { bit_clear(PORTB, 0x20); bit_set(DDRB, 0x20);} //PIN B4
     66e:	9d 30       	cpi	r25, 0x0D	; 13
     670:	19 f4       	brne	.+6      	; 0x678 <main+0x170>
     672:	2d 98       	cbi	0x05, 5	; 5
     674:	25 9a       	sbi	0x04, 5	; 4
     676:	1d c0       	rjmp	.+58     	; 0x6b2 <main+0x1aa>
if (cnt==14) { bit_clear(PORTB, 0x40); bit_set(DDRB, 0x40);} //PIN B5
     678:	9e 30       	cpi	r25, 0x0E	; 14
     67a:	19 f4       	brne	.+6      	; 0x682 <main+0x17a>
     67c:	2e 98       	cbi	0x05, 6	; 5
     67e:	26 9a       	sbi	0x04, 6	; 4
     680:	18 c0       	rjmp	.+48     	; 0x6b2 <main+0x1aa>
if (cnt==15) { bit_clear(PORTD, 0x80); bit_set(DDRD, 0x80);} //PIN B6
     682:	9f 30       	cpi	r25, 0x0F	; 15
     684:	19 f4       	brne	.+6      	; 0x68c <main+0x184>
     686:	5f 98       	cbi	0x0b, 7	; 11
     688:	57 9a       	sbi	0x0a, 7	; 10
     68a:	13 c0       	rjmp	.+38     	; 0x6b2 <main+0x1aa>
if (cnt==16) { bit_clear(PORTC, 0x80); bit_set(DDRC, 0x80);} //PIN B7
     68c:	90 31       	cpi	r25, 0x10	; 16
     68e:	19 f4       	brne	.+6      	; 0x696 <main+0x18e>
     690:	47 98       	cbi	0x08, 7	; 8
     692:	3f 9a       	sbi	0x07, 7	; 7
     694:	0e c0       	rjmp	.+28     	; 0x6b2 <main+0x1aa>
if (cnt==17) { bit_clear(PORTC, 0x40); bit_set(DDRC, 0x40);} //PIN B8
     696:	91 31       	cpi	r25, 0x11	; 17
     698:	19 f4       	brne	.+6      	; 0x6a0 <main+0x198>
     69a:	46 98       	cbi	0x08, 6	; 8
     69c:	3e 9a       	sbi	0x07, 6	; 7
     69e:	09 c0       	rjmp	.+18     	; 0x6b2 <main+0x1aa>
if (cnt==18) { bit_clear(PORTC, 0x20); bit_set(DDRC, 0x20);} //PIN B9
     6a0:	92 31       	cpi	r25, 0x12	; 18
     6a2:	19 f4       	brne	.+6      	; 0x6aa <main+0x1a2>
     6a4:	45 98       	cbi	0x08, 5	; 8
     6a6:	3d 9a       	sbi	0x07, 5	; 7
     6a8:	04 c0       	rjmp	.+8      	; 0x6b2 <main+0x1aa>
if (cnt==19) { bit_clear(PORTC, 0x10); bit_set(DDRC, 0x10);} //PIN B10
     6aa:	93 31       	cpi	r25, 0x13	; 19
     6ac:	11 f4       	brne	.+4      	; 0x6b2 <main+0x1aa>
     6ae:	44 98       	cbi	0x08, 4	; 8
     6b0:	3c 9a       	sbi	0x07, 4	; 7
		#include "..\shared\outputs.c"		
	}
	if (ass[cnt]==func_ext_power_led){
     6b2:	8f 31       	cpi	r24, 0x1F	; 31
     6b4:	21 f4       	brne	.+8      	; 0x6be <main+0x1b6>
     6b6:	21 e0       	ldi	r18, 0x01	; 1
     6b8:	2b 96       	adiw	r28, 0x0b	; 11
     6ba:	2f af       	std	Y+63, r18	; 0x3f
     6bc:	2b 97       	sbiw	r28, 0x0b	; 11
     6be:	0f 5f       	subi	r16, 0xFF	; 255
     6c0:	1f 4f       	sbci	r17, 0xFF	; 255
uint8_t setting_tb2_but3s;
//Flash LEDs
#include "..\shared\disco.c"

//read first 40 eeprom into an array (pins + shifted pins)
for(cnt=0;cnt<40;cnt++){	
     6c2:	08 32       	cpi	r16, 0x28	; 40
     6c4:	11 05       	cpc	r17, r1
     6c6:	09 f0       	breq	.+2      	; 0x6ca <main+0x1c2>
     6c8:	84 cf       	rjmp	.-248    	; 0x5d2 <main+0xca>
		delay_power=1;
	}	
}

//Read other settings from eeprom 
setting_delay_power=read_eeprom_byte(byte_delay_setting);
     6ca:	89 e2       	ldi	r24, 0x29	; 41
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	0e 94 23 10 	call	0x2046	; 0x2046 <__eerd_byte_usb162>
     6d2:	18 2f       	mov	r17, r24
setting_delay_autofire=read_eeprom_byte(byte_delay_autofire);
     6d4:	8a e2       	ldi	r24, 0x2A	; 42
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	0e 94 23 10 	call	0x2046	; 0x2046 <__eerd_byte_usb162>
     6dc:	2e 96       	adiw	r28, 0x0e	; 14
     6de:	8f af       	std	Y+63, r24	; 0x3f
     6e0:	2e 97       	sbiw	r28, 0x0e	; 14

setting_enable_tb1=read_eeprom_byte(byte_enable_tb1);
     6e2:	8b e2       	ldi	r24, 0x2B	; 43
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	0e 94 23 10 	call	0x2046	; 0x2046 <__eerd_byte_usb162>
     6ea:	29 96       	adiw	r28, 0x09	; 9
     6ec:	8f af       	std	Y+63, r24	; 0x3f
     6ee:	29 97       	sbiw	r28, 0x09	; 9
setting_enable_tb2=read_eeprom_byte(byte_enable_tb2);
setting_tb1_counts=read_eeprom_byte(byte_tb1_counts);
     6f0:	8d e2       	ldi	r24, 0x2D	; 45
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	0e 94 23 10 	call	0x2046	; 0x2046 <__eerd_byte_usb162>
     6f8:	f8 2e       	mov	r15, r24
setting_tb1_samples=read_eeprom_byte(byte_tb1_samples);
     6fa:	8e e2       	ldi	r24, 0x2E	; 46
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	0e 94 23 10 	call	0x2046	; 0x2046 <__eerd_byte_usb162>
     702:	08 2f       	mov	r16, r24
setting_tb1_trackball=read_eeprom_byte(byte_tb1_trackball);
     704:	8f e2       	ldi	r24, 0x2F	; 47
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	0e 94 23 10 	call	0x2046	; 0x2046 <__eerd_byte_usb162>
     70c:	28 96       	adiw	r28, 0x08	; 8
     70e:	8f af       	std	Y+63, r24	; 0x3f
     710:	28 97       	sbiw	r28, 0x08	; 8
setting_tb1_spinner=read_eeprom_byte(byte_tb1_spinner);
setting_tb1_mouse=read_eeprom_byte(byte_tb1_mouse);
     712:	81 e3       	ldi	r24, 0x31	; 49
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	0e 94 23 10 	call	0x2046	; 0x2046 <__eerd_byte_usb162>
     71a:	27 96       	adiw	r28, 0x07	; 7
     71c:	8f af       	std	Y+63, r24	; 0x3f
     71e:	27 97       	sbiw	r28, 0x07	; 7
setting_tb2_samples=read_eeprom_byte(byte_tb2_samples);
setting_tb2_trackball=read_eeprom_byte(byte_tb2_trackball);
setting_tb2_spinner=read_eeprom_byte(byte_tb2_spinner);
setting_tb2_mouse=read_eeprom_byte(byte_tb2_mouse);

setting_tb1_stick=read_eeprom_byte(byte_tb1_stick);
     720:	87 e3       	ldi	r24, 0x37	; 55
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	0e 94 23 10 	call	0x2046	; 0x2046 <__eerd_byte_usb162>
     728:	26 96       	adiw	r28, 0x06	; 6
     72a:	8f af       	std	Y+63, r24	; 0x3f
     72c:	26 97       	sbiw	r28, 0x06	; 6
setting_tb1_but1=read_eeprom_byte(byte_tb1_but1);
     72e:	88 e3       	ldi	r24, 0x38	; 56
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	0e 94 23 10 	call	0x2046	; 0x2046 <__eerd_byte_usb162>
     736:	25 96       	adiw	r28, 0x05	; 5
     738:	8f af       	std	Y+63, r24	; 0x3f
     73a:	25 97       	sbiw	r28, 0x05	; 5
setting_tb1_but2=read_eeprom_byte(byte_tb1_but2);
     73c:	89 e3       	ldi	r24, 0x39	; 57
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	0e 94 23 10 	call	0x2046	; 0x2046 <__eerd_byte_usb162>
     744:	24 96       	adiw	r28, 0x04	; 4
     746:	8f af       	std	Y+63, r24	; 0x3f
     748:	24 97       	sbiw	r28, 0x04	; 4
setting_tb1_but3=read_eeprom_byte(byte_tb1_but3);
     74a:	8a e3       	ldi	r24, 0x3A	; 58
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	0e 94 23 10 	call	0x2046	; 0x2046 <__eerd_byte_usb162>
     752:	23 96       	adiw	r28, 0x03	; 3
     754:	8f af       	std	Y+63, r24	; 0x3f
     756:	23 97       	sbiw	r28, 0x03	; 3
setting_tb1_but1s=read_eeprom_byte(byte_tb1_but1s);
     758:	8b e3       	ldi	r24, 0x3B	; 59
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	0e 94 23 10 	call	0x2046	; 0x2046 <__eerd_byte_usb162>
     760:	22 96       	adiw	r28, 0x02	; 2
     762:	8f af       	std	Y+63, r24	; 0x3f
     764:	22 97       	sbiw	r28, 0x02	; 2
setting_tb1_but2s=read_eeprom_byte(byte_tb1_but2s);
     766:	8c e3       	ldi	r24, 0x3C	; 60
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	0e 94 23 10 	call	0x2046	; 0x2046 <__eerd_byte_usb162>
     76e:	21 96       	adiw	r28, 0x01	; 1
     770:	8f af       	std	Y+63, r24	; 0x3f
     772:	21 97       	sbiw	r28, 0x01	; 1
setting_tb1_but3s=read_eeprom_byte(byte_tb1_but3s);
     774:	8d e3       	ldi	r24, 0x3D	; 61
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	0e 94 23 10 	call	0x2046	; 0x2046 <__eerd_byte_usb162>
     77c:	8f af       	std	Y+63, r24	; 0x3f
setting_tb2_but1s=read_eeprom_byte(byte_tb1_but1s);
setting_tb2_but2s=read_eeprom_byte(byte_tb1_but2s);
setting_tb2_but3s=read_eeprom_byte(byte_tb1_but3s);

//prevent crazy autofire setting
if (setting_delay_autofire < 5){ setting_delay_autofire = 15;}
     77e:	2e 96       	adiw	r28, 0x0e	; 14
     780:	3f ad       	ldd	r19, Y+63	; 0x3f
     782:	2e 97       	sbiw	r28, 0x0e	; 14
     784:	35 30       	cpi	r19, 0x05	; 5
     786:	28 f4       	brcc	.+10     	; 0x792 <main+0x28a>
     788:	4f e0       	ldi	r20, 0x0F	; 15
     78a:	2e 96       	adiw	r28, 0x0e	; 14
     78c:	4f af       	std	Y+63, r20	; 0x3f
     78e:	2e 97       	sbiw	r28, 0x0e	; 14
     790:	09 c0       	rjmp	.+18     	; 0x7a4 <main+0x29c>
if (setting_delay_autofire > 250){ setting_delay_autofire = 250;}
     792:	2e 96       	adiw	r28, 0x0e	; 14
     794:	5f ad       	ldd	r21, Y+63	; 0x3f
     796:	2e 97       	sbiw	r28, 0x0e	; 14
     798:	5b 3f       	cpi	r21, 0xFB	; 251
     79a:	20 f0       	brcs	.+8      	; 0x7a4 <main+0x29c>
     79c:	8a ef       	ldi	r24, 0xFA	; 250
     79e:	2e 96       	adiw	r28, 0x0e	; 14
     7a0:	8f af       	std	Y+63, r24	; 0x3f
     7a2:	2e 97       	sbiw	r28, 0x0e	; 14

//wait for specified delay time (allow time for led flash)
if ((delay_power==1)&&(setting_delay_power>0)){
     7a4:	2b 96       	adiw	r28, 0x0b	; 11
     7a6:	9f ad       	ldd	r25, Y+63	; 0x3f
     7a8:	2b 97       	sbiw	r28, 0x0b	; 11
     7aa:	91 30       	cpi	r25, 0x01	; 1
     7ac:	09 f0       	breq	.+2      	; 0x7b0 <main+0x2a8>
     7ae:	8c c0       	rjmp	.+280    	; 0x8c8 <main+0x3c0>
     7b0:	11 23       	and	r17, r17
     7b2:	09 f4       	brne	.+2      	; 0x7b6 <main+0x2ae>
     7b4:	89 c0       	rjmp	.+274    	; 0x8c8 <main+0x3c0>
     7b6:	20 e0       	ldi	r18, 0x00	; 0
	for(cnt=0;cnt<=setting_delay_power-1;cnt++){
     7b8:	41 2f       	mov	r20, r17
     7ba:	50 e0       	ldi	r21, 0x00	; 0
     7bc:	60 e9       	ldi	r22, 0x90	; 144
     7be:	71 e0       	ldi	r23, 0x01	; 1
     7c0:	08 c0       	rjmp	.+16     	; 0x7d2 <main+0x2ca>
//prevent crazy autofire setting
if (setting_delay_autofire < 5){ setting_delay_autofire = 15;}
if (setting_delay_autofire > 250){ setting_delay_autofire = 250;}

//wait for specified delay time (allow time for led flash)
if ((delay_power==1)&&(setting_delay_power>0)){
     7c2:	80 e1       	ldi	r24, 0x10	; 16
     7c4:	97 e2       	ldi	r25, 0x27	; 39
     7c6:	fb 01       	movw	r30, r22
     7c8:	31 97       	sbiw	r30, 0x01	; 1
     7ca:	f1 f7       	brne	.-4      	; 0x7c8 <main+0x2c0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7ce:	d9 f7       	brne	.-10     	; 0x7c6 <main+0x2be>
	for(cnt=0;cnt<=setting_delay_power-1;cnt++){
     7d0:	2f 5f       	subi	r18, 0xFF	; 255
     7d2:	82 2f       	mov	r24, r18
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	84 17       	cp	r24, r20
     7d8:	95 07       	cpc	r25, r21
     7da:	9c f3       	brlt	.-26     	; 0x7c2 <main+0x2ba>
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	30 e0       	ldi	r19, 0x00	; 0
		_delay_ms(1000);
	}
	led_active=1;
	for(cnt=0;cnt<40;cnt++){	
		if (ass[cnt]==func_ext_power_led){
     7e0:	ae 01       	movw	r20, r28
     7e2:	4b 5e       	subi	r20, 0xEB	; 235
     7e4:	5f 4f       	sbci	r21, 0xFF	; 255
     7e6:	fa 01       	movw	r30, r20
     7e8:	e2 0f       	add	r30, r18
     7ea:	f3 1f       	adc	r31, r19
     7ec:	80 81       	ld	r24, Z
     7ee:	8f 31       	cpi	r24, 0x1F	; 31
     7f0:	09 f0       	breq	.+2      	; 0x7f4 <main+0x2ec>
     7f2:	64 c0       	rjmp	.+200    	; 0x8bc <main+0x3b4>
     7f4:	82 2f       	mov	r24, r18
* along with this program. If not, see <http://www.gnu.org/licenses/>.
*/ 

//set output pin(s)
if (led_active==1){
	if (cnt==0)  { bit_set(PORTC, 0x04); bit_set(DDRC, 0x04);} //PIN A1
     7f6:	22 23       	and	r18, r18
     7f8:	19 f4       	brne	.+6      	; 0x800 <main+0x2f8>
     7fa:	42 9a       	sbi	0x08, 2	; 8
     7fc:	3a 9a       	sbi	0x07, 2	; 7
     7fe:	0a c0       	rjmp	.+20     	; 0x814 <main+0x30c>
	if (cnt==1)  { bit_set(PORTD, 0x01); bit_set(DDRD, 0x01);} //PIN A2
     800:	21 30       	cpi	r18, 0x01	; 1
     802:	19 f4       	brne	.+6      	; 0x80a <main+0x302>
     804:	58 9a       	sbi	0x0b, 0	; 11
     806:	50 9a       	sbi	0x0a, 0	; 10
     808:	59 c0       	rjmp	.+178    	; 0x8bc <main+0x3b4>
	if (cnt==2)  { bit_set(PORTD, 0x02); bit_set(DDRD, 0x02);} //PIN A3
     80a:	22 30       	cpi	r18, 0x02	; 2
     80c:	19 f4       	brne	.+6      	; 0x814 <main+0x30c>
     80e:	59 9a       	sbi	0x0b, 1	; 11
     810:	51 9a       	sbi	0x0a, 1	; 10
     812:	54 c0       	rjmp	.+168    	; 0x8bc <main+0x3b4>
	if (cnt==3)  { bit_set(PORTD, 0x04); bit_set(DDRD, 0x04);} //PIN A4
     814:	83 30       	cpi	r24, 0x03	; 3
     816:	19 f4       	brne	.+6      	; 0x81e <main+0x316>
     818:	5a 9a       	sbi	0x0b, 2	; 11
     81a:	52 9a       	sbi	0x0a, 2	; 10
     81c:	4f c0       	rjmp	.+158    	; 0x8bc <main+0x3b4>
	if (cnt==4)  { bit_set(PORTD, 0x08); bit_set(DDRD, 0x08);} //PIN A5
     81e:	84 30       	cpi	r24, 0x04	; 4
     820:	19 f4       	brne	.+6      	; 0x828 <main+0x320>
     822:	5b 9a       	sbi	0x0b, 3	; 11
     824:	53 9a       	sbi	0x0a, 3	; 10
     826:	4a c0       	rjmp	.+148    	; 0x8bc <main+0x3b4>
	if (cnt==5)  { bit_set(PORTD, 0x10); bit_set(DDRD, 0x10);} //PIN A6
     828:	85 30       	cpi	r24, 0x05	; 5
     82a:	19 f4       	brne	.+6      	; 0x832 <main+0x32a>
     82c:	5c 9a       	sbi	0x0b, 4	; 11
     82e:	54 9a       	sbi	0x0a, 4	; 10
     830:	45 c0       	rjmp	.+138    	; 0x8bc <main+0x3b4>
	if (cnt==6)  { bit_set(PORTD, 0x20); bit_set(DDRD, 0x20);} //PIN A7
     832:	86 30       	cpi	r24, 0x06	; 6
     834:	19 f4       	brne	.+6      	; 0x83c <main+0x334>
     836:	5d 9a       	sbi	0x0b, 5	; 11
     838:	55 9a       	sbi	0x0a, 5	; 10
     83a:	40 c0       	rjmp	.+128    	; 0x8bc <main+0x3b4>
	if (cnt==7)  { bit_set(PORTD, 0x40); bit_set(DDRD, 0x40);} //PIN A8
     83c:	87 30       	cpi	r24, 0x07	; 7
     83e:	19 f4       	brne	.+6      	; 0x846 <main+0x33e>
     840:	5e 9a       	sbi	0x0b, 6	; 11
     842:	56 9a       	sbi	0x0a, 6	; 10
     844:	3b c0       	rjmp	.+118    	; 0x8bc <main+0x3b4>
	if (cnt==8)  { bit_set(PORTB, 0x01); bit_set(DDRB, 0x01);} //PIN A9
     846:	88 30       	cpi	r24, 0x08	; 8
     848:	19 f4       	brne	.+6      	; 0x850 <main+0x348>
     84a:	28 9a       	sbi	0x05, 0	; 5
     84c:	20 9a       	sbi	0x04, 0	; 4
     84e:	36 c0       	rjmp	.+108    	; 0x8bc <main+0x3b4>
	if (cnt==9)  { bit_set(PORTB, 0x02); bit_set(DDRB, 0x02);} //PIN A10
     850:	89 30       	cpi	r24, 0x09	; 9
     852:	19 f4       	brne	.+6      	; 0x85a <main+0x352>
     854:	29 9a       	sbi	0x05, 1	; 5
     856:	21 9a       	sbi	0x04, 1	; 4
     858:	31 c0       	rjmp	.+98     	; 0x8bc <main+0x3b4>
	if (cnt==10) { bit_set(PORTB, 0x04); bit_set(DDRB, 0x04);} //PIN B1
     85a:	8a 30       	cpi	r24, 0x0A	; 10
     85c:	19 f4       	brne	.+6      	; 0x864 <main+0x35c>
     85e:	2a 9a       	sbi	0x05, 2	; 5
     860:	22 9a       	sbi	0x04, 2	; 4
     862:	2c c0       	rjmp	.+88     	; 0x8bc <main+0x3b4>
	if (cnt==11) { bit_set(PORTB, 0x08); bit_set(DDRB, 0x08);} //PIN B2
     864:	8b 30       	cpi	r24, 0x0B	; 11
     866:	19 f4       	brne	.+6      	; 0x86e <main+0x366>
     868:	2b 9a       	sbi	0x05, 3	; 5
     86a:	23 9a       	sbi	0x04, 3	; 4
     86c:	27 c0       	rjmp	.+78     	; 0x8bc <main+0x3b4>
	if (cnt==12) { bit_set(PORTB, 0x10); bit_set(DDRB, 0x10);} //PIN B3
     86e:	8c 30       	cpi	r24, 0x0C	; 12
     870:	19 f4       	brne	.+6      	; 0x878 <main+0x370>
     872:	2c 9a       	sbi	0x05, 4	; 5
     874:	24 9a       	sbi	0x04, 4	; 4
     876:	22 c0       	rjmp	.+68     	; 0x8bc <main+0x3b4>
	if (cnt==13) { bit_set(PORTB, 0x20); bit_set(DDRB, 0x20);} //PIN B4
     878:	8d 30       	cpi	r24, 0x0D	; 13
     87a:	19 f4       	brne	.+6      	; 0x882 <main+0x37a>
     87c:	2d 9a       	sbi	0x05, 5	; 5
     87e:	25 9a       	sbi	0x04, 5	; 4
     880:	1d c0       	rjmp	.+58     	; 0x8bc <main+0x3b4>
	if (cnt==14) { bit_set(PORTB, 0x40); bit_set(DDRB, 0x40);} //PIN B5
     882:	8e 30       	cpi	r24, 0x0E	; 14
     884:	19 f4       	brne	.+6      	; 0x88c <main+0x384>
     886:	2e 9a       	sbi	0x05, 6	; 5
     888:	26 9a       	sbi	0x04, 6	; 4
     88a:	18 c0       	rjmp	.+48     	; 0x8bc <main+0x3b4>
	if (cnt==15) { bit_set(PORTD, 0x80); bit_set(DDRD, 0x80);} //PIN B6
     88c:	8f 30       	cpi	r24, 0x0F	; 15
     88e:	19 f4       	brne	.+6      	; 0x896 <main+0x38e>
     890:	5f 9a       	sbi	0x0b, 7	; 11
     892:	57 9a       	sbi	0x0a, 7	; 10
     894:	13 c0       	rjmp	.+38     	; 0x8bc <main+0x3b4>
	if (cnt==16) { bit_set(PORTC, 0x80); bit_set(DDRC, 0x80);} //PIN B7
     896:	80 31       	cpi	r24, 0x10	; 16
     898:	19 f4       	brne	.+6      	; 0x8a0 <main+0x398>
     89a:	47 9a       	sbi	0x08, 7	; 8
     89c:	3f 9a       	sbi	0x07, 7	; 7
     89e:	0e c0       	rjmp	.+28     	; 0x8bc <main+0x3b4>
	if (cnt==17) { bit_set(PORTC, 0x40); bit_set(DDRC, 0x40);} //PIN B8
     8a0:	81 31       	cpi	r24, 0x11	; 17
     8a2:	19 f4       	brne	.+6      	; 0x8aa <main+0x3a2>
     8a4:	46 9a       	sbi	0x08, 6	; 8
     8a6:	3e 9a       	sbi	0x07, 6	; 7
     8a8:	09 c0       	rjmp	.+18     	; 0x8bc <main+0x3b4>
	if (cnt==18) { bit_set(PORTC, 0x20); bit_set(DDRC, 0x20);} //PIN B9
     8aa:	82 31       	cpi	r24, 0x12	; 18
     8ac:	19 f4       	brne	.+6      	; 0x8b4 <main+0x3ac>
     8ae:	45 9a       	sbi	0x08, 5	; 8
     8b0:	3d 9a       	sbi	0x07, 5	; 7
     8b2:	04 c0       	rjmp	.+8      	; 0x8bc <main+0x3b4>
	if (cnt==19) { bit_set(PORTC, 0x10); bit_set(DDRC, 0x10);} //PIN B10
     8b4:	83 31       	cpi	r24, 0x13	; 19
     8b6:	11 f4       	brne	.+4      	; 0x8bc <main+0x3b4>
     8b8:	44 9a       	sbi	0x08, 4	; 8
     8ba:	3c 9a       	sbi	0x07, 4	; 7
     8bc:	2f 5f       	subi	r18, 0xFF	; 255
     8be:	3f 4f       	sbci	r19, 0xFF	; 255
if ((delay_power==1)&&(setting_delay_power>0)){
	for(cnt=0;cnt<=setting_delay_power-1;cnt++){
		_delay_ms(1000);
	}
	led_active=1;
	for(cnt=0;cnt<40;cnt++){	
     8c0:	28 32       	cpi	r18, 0x28	; 40
     8c2:	31 05       	cpc	r19, r1
     8c4:	09 f0       	breq	.+2      	; 0x8c8 <main+0x3c0>
     8c6:	8f cf       	rjmp	.-226    	; 0x7e6 <main+0x2de>

	//Generic main
	#include "..\shared\generic_main_init.c"
	
	// Init Trackball if needed
	if (setting_enable_tb1==1){	
     8c8:	29 96       	adiw	r28, 0x09	; 9
     8ca:	2f ad       	ldd	r18, Y+63	; 0x3f
     8cc:	29 97       	sbiw	r28, 0x09	; 9
     8ce:	21 30       	cpi	r18, 0x01	; 1
     8d0:	31 f4       	brne	.+12     	; 0x8de <main+0x3d6>
		PORTD |= (1<<6);
     8d2:	5e 9a       	sbi	0x0b, 6	; 11
		initTrackBall(setting_tb1_counts, setting_tb1_samples);
     8d4:	8f 2d       	mov	r24, r15
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	60 2f       	mov	r22, r16
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	a5 dd       	rcall	.-1206   	; 0x428 <initTrackBall>
	}
	
	// Init XBOX pad emulation
	xbox_init(true);
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	d0 d6       	rcall	.+3488   	; 0x1682 <xbox_init>
		gamepad_state.r_x=0;
		
		//2 way restrict
		restrict2X=0;
		restrict2Y=0;		
		if ((ass[cnt]==29)||(ass[pos]==29)){restrict2X=1;} //restrict dPad 2-way
     8e2:	39 a5       	ldd	r19, Y+41	; 0x29
     8e4:	3d af       	std	Y+61, r19	; 0x3d
     8e6:	cc 24       	eor	r12, r12
     8e8:	00 e0       	ldi	r16, 0x00	; 0
     8ea:	55 24       	eor	r5, r5
     8ec:	2f 96       	adiw	r28, 0x0f	; 15
     8ee:	1f ae       	std	Y+63, r1	; 0x3f
     8f0:	2f 97       	sbiw	r28, 0x0f	; 15
     8f2:	41 e0       	ldi	r20, 0x01	; 1
     8f4:	2c 96       	adiw	r28, 0x0c	; 12
     8f6:	4f af       	std	Y+63, r20	; 0x3f
     8f8:	2c 97       	sbiw	r28, 0x0c	; 12
	shift = 0;
} 
shift_last = shift;
//if (shift_count <= 50) {shift_count += 1;}  //no reason to continue counting
if (shift_count <= 250) {shift_count += 1;}  //no reason to continue counting
     8fa:	f5 e1       	ldi	r31, 0x15	; 21
     8fc:	2f 2e       	mov	r2, r31
     8fe:	31 2c       	mov	r3, r1
     900:	2c 0e       	add	r2, r28
     902:	3d 1e       	adc	r3, r29
}

//Combo [I] Back+Black+B
if (action==46){
	bit_set(gamepad_state.digital_buttons,0x20);
	bit_set(gamepad_state.black,0xFF);
     904:	dd 24       	eor	r13, r13
     906:	da 94       	dec	r13
	#endif			
	
		
	// Pins polling and gamepad status updates
	for (;;){
		xbox_reset_watchdog();				
     908:	93 d6       	rcall	.+3366   	; 0x1630 <xbox_reset_watchdog>
* You should have received a copy of the GNU General Public License
* along with this program. If not, see <http://www.gnu.org/licenses/>.
*/ 

//read pin state into an array
state[0]  = (PINC&0x04); //PIN A1
     90a:	86 b1       	in	r24, 0x06	; 6
     90c:	84 70       	andi	r24, 0x04	; 4
     90e:	89 83       	std	Y+1, r24	; 0x01
state[1]  = (PIND&0x01); //PIN A2
     910:	89 b1       	in	r24, 0x09	; 9
     912:	81 70       	andi	r24, 0x01	; 1
     914:	8a 83       	std	Y+2, r24	; 0x02
state[2]  = (PIND&0x02); //PIN A3
     916:	89 b1       	in	r24, 0x09	; 9
     918:	82 70       	andi	r24, 0x02	; 2
     91a:	8b 83       	std	Y+3, r24	; 0x03
state[3]  = (PIND&0x04); //PIN A4
     91c:	89 b1       	in	r24, 0x09	; 9
     91e:	84 70       	andi	r24, 0x04	; 4
     920:	8c 83       	std	Y+4, r24	; 0x04
state[4]  = (PIND&0x08); //PIN A5
     922:	89 b1       	in	r24, 0x09	; 9
     924:	88 70       	andi	r24, 0x08	; 8
     926:	8d 83       	std	Y+5, r24	; 0x05
state[5]  = (PIND&0x10); //PIN A6
     928:	89 b1       	in	r24, 0x09	; 9
     92a:	80 71       	andi	r24, 0x10	; 16
     92c:	8e 83       	std	Y+6, r24	; 0x06
state[6]  = (PIND&0x20); //PIN A7
     92e:	89 b1       	in	r24, 0x09	; 9
     930:	80 72       	andi	r24, 0x20	; 32
     932:	8f 83       	std	Y+7, r24	; 0x07
state[7]  = (PIND&0x40); //PIN A8
     934:	89 b1       	in	r24, 0x09	; 9
     936:	80 74       	andi	r24, 0x40	; 64
     938:	88 87       	std	Y+8, r24	; 0x08
state[8]  = (PINB&0x01); //PIN A9
     93a:	83 b1       	in	r24, 0x03	; 3
     93c:	81 70       	andi	r24, 0x01	; 1
     93e:	89 87       	std	Y+9, r24	; 0x09
state[9]  = (PINB&0x02); //PIN A10
     940:	83 b1       	in	r24, 0x03	; 3
     942:	82 70       	andi	r24, 0x02	; 2
     944:	8a 87       	std	Y+10, r24	; 0x0a
state[10] = (PINB&0x04); //PIN B1
     946:	83 b1       	in	r24, 0x03	; 3
     948:	84 70       	andi	r24, 0x04	; 4
     94a:	8b 87       	std	Y+11, r24	; 0x0b
state[11] = (PINB&0x08); //PIN B2
     94c:	83 b1       	in	r24, 0x03	; 3
     94e:	88 70       	andi	r24, 0x08	; 8
     950:	8c 87       	std	Y+12, r24	; 0x0c
state[12] = (PINB&0x10); //PIN B3
     952:	83 b1       	in	r24, 0x03	; 3
     954:	80 71       	andi	r24, 0x10	; 16
     956:	8d 87       	std	Y+13, r24	; 0x0d
state[13] = (PINB&0x20); //PIN B4
     958:	83 b1       	in	r24, 0x03	; 3
     95a:	80 72       	andi	r24, 0x20	; 32
     95c:	8e 87       	std	Y+14, r24	; 0x0e
state[14] = (PINB&0x40); //PIN B5
     95e:	83 b1       	in	r24, 0x03	; 3
     960:	80 74       	andi	r24, 0x40	; 64
     962:	8f 87       	std	Y+15, r24	; 0x0f
state[15] = (PINB&0x80); //PIN B6
     964:	83 b1       	in	r24, 0x03	; 3
     966:	80 78       	andi	r24, 0x80	; 128
     968:	88 8b       	std	Y+16, r24	; 0x10
state[16] = (PINC&0x80); //PIN B7
     96a:	86 b1       	in	r24, 0x06	; 6
     96c:	80 78       	andi	r24, 0x80	; 128
     96e:	89 8b       	std	Y+17, r24	; 0x11
state[17] = (PINC&0x40); //PIN B8
     970:	86 b1       	in	r24, 0x06	; 6
     972:	80 74       	andi	r24, 0x40	; 64
     974:	8a 8b       	std	Y+18, r24	; 0x12
state[18] = (PINC&0x20); //PIN B9
     976:	86 b1       	in	r24, 0x06	; 6
     978:	80 72       	andi	r24, 0x20	; 32
     97a:	8b 8b       	std	Y+19, r24	; 0x13
     97c:	86 b1       	in	r24, 0x06	; 6
     97e:	80 71       	andi	r24, 0x10	; 16
     980:	8c 8b       	std	Y+20, r24	; 0x14
* You should have received a copy of the GNU General Public License
* along with this program. If not, see <http://www.gnu.org/licenses/>.
*/ 

//set shifted status and detect shift lock (double click)
if(!(PIND&0x80)) {
     982:	4f 9b       	sbis	0x09, 7	; 9
     984:	04 c0       	rjmp	.+8      	; 0x98e <main+0x486>
     986:	60 96       	adiw	r28, 0x10	; 16
     988:	1f ae       	std	Y+63, r1	; 0x3f
     98a:	60 97       	sbiw	r28, 0x10	; 16
     98c:	17 c0       	rjmp	.+46     	; 0x9bc <main+0x4b4>
	shift = 1;
	if (shift_last == 0) {
     98e:	00 23       	and	r16, r16
     990:	89 f4       	brne	.+34     	; 0x9b4 <main+0x4ac>
//		if (shift_count > 1 && shift_count < 50) {  
		if (shift_count > 1 && shift_count < 250) {  
     992:	5e ef       	ldi	r21, 0xFE	; 254
     994:	55 0e       	add	r5, r21
     996:	87 ef       	ldi	r24, 0xF7	; 247
     998:	85 15       	cp	r24, r5
     99a:	08 f4       	brcc	.+2      	; 0x99e <main+0x496>
     99c:	00 c6       	rjmp	.+3072   	; 0x159e <main+0x1096>
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	2f 96       	adiw	r28, 0x0f	; 15
     9a2:	9f ad       	ldd	r25, Y+63	; 0x3f
     9a4:	2f 97       	sbiw	r28, 0x0f	; 15
     9a6:	99 23       	and	r25, r25
     9a8:	09 f4       	brne	.+2      	; 0x9ac <main+0x4a4>
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	2f 96       	adiw	r28, 0x0f	; 15
     9ae:	8f af       	std	Y+63, r24	; 0x3f
     9b0:	2f 97       	sbiw	r28, 0x0f	; 15
     9b2:	f5 c5       	rjmp	.+3050   	; 0x159e <main+0x1096>
     9b4:	21 e0       	ldi	r18, 0x01	; 1
     9b6:	60 96       	adiw	r28, 0x10	; 16
     9b8:	2f af       	std	Y+63, r18	; 0x3f
     9ba:	60 97       	sbiw	r28, 0x10	; 16
} else {
	shift = 0;
} 
shift_last = shift;
//if (shift_count <= 50) {shift_count += 1;}  //no reason to continue counting
if (shift_count <= 250) {shift_count += 1;}  //no reason to continue counting
     9bc:	3a ef       	ldi	r19, 0xFA	; 250
     9be:	35 15       	cp	r19, r5
     9c0:	08 f0       	brcs	.+2      	; 0x9c4 <main+0x4bc>
     9c2:	53 94       	inc	r5
     9c4:	2f 96       	adiw	r28, 0x0f	; 15
     9c6:	4f ad       	ldd	r20, Y+63	; 0x3f
     9c8:	2f 97       	sbiw	r28, 0x0f	; 15
     9ca:	41 30       	cpi	r20, 0x01	; 1
     9cc:	29 f0       	breq	.+10     	; 0x9d8 <main+0x4d0>
     9ce:	60 96       	adiw	r28, 0x10	; 16
     9d0:	5f ad       	ldd	r21, Y+63	; 0x3f
     9d2:	60 97       	sbiw	r28, 0x10	; 16
     9d4:	5e af       	std	Y+62, r21	; 0x3e
     9d6:	02 c0       	rjmp	.+4      	; 0x9dc <main+0x4d4>
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	8e af       	std	Y+62, r24	; 0x3e
     9dc:	d1 01       	movw	r26, r2
     9de:	60 e0       	ldi	r22, 0x00	; 0
     9e0:	70 e0       	ldi	r23, 0x00	; 0
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	00 e0       	ldi	r16, 0x00	; 0
     9e6:	2d 96       	adiw	r28, 0x0d	; 13
     9e8:	1f ae       	std	Y+63, r1	; 0x3f
     9ea:	2d 97       	sbiw	r28, 0x0d	; 13
     9ec:	2a 96       	adiw	r28, 0x0a	; 10
     9ee:	1f ae       	std	Y+63, r1	; 0x3f
     9f0:	2a 97       	sbiw	r28, 0x0a	; 10
     9f2:	ff 24       	eor	r15, r15
     9f4:	40 e0       	ldi	r20, 0x00	; 0
     9f6:	50 e0       	ldi	r21, 0x00	; 0
     9f8:	94 2f       	mov	r25, r20
pu=u; pd=d; pl=l; pr=r;
uint8_t dp_pp=0, dp_lp=0, set;

//pre-loop to deal with any switches/toggles		
for(cnt=0;cnt<20;cnt++) {
	if (!(state[cnt])) {
     9fa:	e1 e0       	ldi	r30, 0x01	; 1
     9fc:	f0 e0       	ldi	r31, 0x00	; 0
     9fe:	ec 0f       	add	r30, r28
     a00:	fd 1f       	adc	r31, r29
     a02:	e4 0f       	add	r30, r20
     a04:	f5 1f       	adc	r31, r21
     a06:	80 81       	ld	r24, Z
     a08:	88 23       	and	r24, r24
     a0a:	09 f0       	breq	.+2      	; 0xa0e <main+0x506>
     a0c:	45 c0       	rjmp	.+138    	; 0xa98 <main+0x590>
	
		//there is input on this pin, also account for shifted input
		pos = cnt;
		if (shift==1){pos=pos+20;}
     a0e:	2e ad       	ldd	r18, Y+62	; 0x3e
     a10:	21 30       	cpi	r18, 0x01	; 1
     a12:	11 f0       	breq	.+4      	; 0xa18 <main+0x510>
     a14:	c4 2e       	mov	r12, r20
     a16:	03 c0       	rjmp	.+6      	; 0xa1e <main+0x516>
     a18:	e4 e1       	ldi	r30, 0x14	; 20
     a1a:	ce 2e       	mov	r12, r30
     a1c:	c4 0e       	add	r12, r20
				
		if ((ass[cnt]==func_invert_y_axis)||(ass[pos]==func_invert_y_axis)){invert=1;}
     a1e:	2c 91       	ld	r18, X
     a20:	2b 31       	cpi	r18, 0x1B	; 27
     a22:	29 f4       	brne	.+10     	; 0xa2e <main+0x526>
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	2a 96       	adiw	r28, 0x0a	; 10
     a28:	8f af       	std	Y+63, r24	; 0x3f
     a2a:	2a 97       	sbiw	r28, 0x0a	; 10
     a2c:	0c c0       	rjmp	.+24     	; 0xa46 <main+0x53e>
     a2e:	f1 01       	movw	r30, r2
     a30:	ec 0d       	add	r30, r12
     a32:	f1 1d       	adc	r31, r1
     a34:	80 81       	ld	r24, Z
     a36:	8b 31       	cpi	r24, 0x1B	; 27
     a38:	21 f4       	brne	.+8      	; 0xa42 <main+0x53a>
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	2a 96       	adiw	r28, 0x0a	; 10
     a3e:	8f af       	std	Y+63, r24	; 0x3f
     a40:	2a 97       	sbiw	r28, 0x0a	; 10
		if ((ass[cnt]==func_restrict_4way)||(ass[pos]==func_restrict_4way)){restrict4=1;}
     a42:	2c 31       	cpi	r18, 0x1C	; 28
     a44:	31 f0       	breq	.+12     	; 0xa52 <main+0x54a>
     a46:	f1 01       	movw	r30, r2
     a48:	ec 0d       	add	r30, r12
     a4a:	f1 1d       	adc	r31, r1
     a4c:	80 81       	ld	r24, Z
     a4e:	8c 31       	cpi	r24, 0x1C	; 28
     a50:	11 f4       	brne	.+4      	; 0xa56 <main+0x54e>
     a52:	ff 24       	eor	r15, r15
     a54:	f3 94       	inc	r15
		
		if (ass[pos]==func_autofire_1){autofire=1;}
     a56:	f1 01       	movw	r30, r2
     a58:	ec 0d       	add	r30, r12
     a5a:	f1 1d       	adc	r31, r1
     a5c:	e0 81       	ld	r30, Z
     a5e:	e1 32       	cpi	r30, 0x21	; 33
     a60:	61 f0       	breq	.+24     	; 0xa7a <main+0x572>
		if (ass[pos]==func_autofire_2){autofire=1;}
     a62:	e2 32       	cpi	r30, 0x22	; 34
     a64:	51 f0       	breq	.+20     	; 0xa7a <main+0x572>
		if (ass[pos]==func_autofire_3){autofire=1;}
     a66:	e3 32       	cpi	r30, 0x23	; 35
     a68:	09 f4       	brne	.+2      	; 0xa6c <main+0x564>
     a6a:	9f c5       	rjmp	.+2878   	; 0x15aa <main+0x10a2>
		if (ass[pos]==func_autofire_4){autofire=1;}
     a6c:	e4 32       	cpi	r30, 0x24	; 36
     a6e:	09 f4       	brne	.+2      	; 0xa72 <main+0x56a>
     a70:	9c c5       	rjmp	.+2872   	; 0x15aa <main+0x10a2>
		
		if (ass[pos]==func_dpad_up)   {u=1;}
     a72:	e1 30       	cpi	r30, 0x01	; 1
     a74:	31 f4       	brne	.+12     	; 0xa82 <main+0x57a>
     a76:	61 e0       	ldi	r22, 0x01	; 1
     a78:	0f c0       	rjmp	.+30     	; 0xa98 <main+0x590>
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	2d 96       	adiw	r28, 0x0d	; 13
     a7e:	8f af       	std	Y+63, r24	; 0x3f
     a80:	2d 97       	sbiw	r28, 0x0d	; 13
		if (ass[pos]==func_dpad_down) {d=1;}				
     a82:	e2 30       	cpi	r30, 0x02	; 2
     a84:	11 f4       	brne	.+4      	; 0xa8a <main+0x582>
     a86:	71 e0       	ldi	r23, 0x01	; 1
     a88:	07 c0       	rjmp	.+14     	; 0xa98 <main+0x590>
		if (ass[pos]==func_dpad_left) {l=1;}
     a8a:	e3 30       	cpi	r30, 0x03	; 3
     a8c:	11 f4       	brne	.+4      	; 0xa92 <main+0x58a>
     a8e:	31 e0       	ldi	r19, 0x01	; 1
     a90:	03 c0       	rjmp	.+6      	; 0xa98 <main+0x590>
		if (ass[pos]==func_dpad_right){r=1;}
     a92:	e4 30       	cpi	r30, 0x04	; 4
     a94:	09 f4       	brne	.+2      	; 0xa98 <main+0x590>
     a96:	01 e0       	ldi	r16, 0x01	; 1
	}
			
	//Show the shift status LED(s) and power up externals with delay
	if (ass[cnt]==func_ext_shift_led){
     a98:	8c 91       	ld	r24, X
     a9a:	8e 31       	cpi	r24, 0x1E	; 30
     a9c:	09 f0       	breq	.+2      	; 0xaa0 <main+0x598>
     a9e:	b9 c0       	rjmp	.+370    	; 0xc12 <main+0x70a>
* You should have received a copy of the GNU General Public License
* along with this program. If not, see <http://www.gnu.org/licenses/>.
*/ 

//set output pin(s)
if (led_active==1){
     aa0:	2e ad       	ldd	r18, Y+62	; 0x3e
     aa2:	21 30       	cpi	r18, 0x01	; 1
     aa4:	09 f0       	breq	.+2      	; 0xaa8 <main+0x5a0>
     aa6:	52 c0       	rjmp	.+164    	; 0xb4c <main+0x644>
	if (cnt==0)  { bit_set(PORTC, 0x04); bit_set(DDRC, 0x04);} //PIN A1
     aa8:	99 23       	and	r25, r25
     aaa:	11 f4       	brne	.+4      	; 0xab0 <main+0x5a8>
     aac:	42 9a       	sbi	0x08, 2	; 8
     aae:	51 c0       	rjmp	.+162    	; 0xb52 <main+0x64a>
	if (cnt==1)  { bit_set(PORTD, 0x01); bit_set(DDRD, 0x01);} //PIN A2
     ab0:	91 30       	cpi	r25, 0x01	; 1
     ab2:	11 f4       	brne	.+4      	; 0xab8 <main+0x5b0>
     ab4:	58 9a       	sbi	0x0b, 0	; 11
     ab6:	52 c0       	rjmp	.+164    	; 0xb5c <main+0x654>
	if (cnt==2)  { bit_set(PORTD, 0x02); bit_set(DDRD, 0x02);} //PIN A3
     ab8:	92 30       	cpi	r25, 0x02	; 2
     aba:	11 f4       	brne	.+4      	; 0xac0 <main+0x5b8>
     abc:	59 9a       	sbi	0x0b, 1	; 11
     abe:	53 c0       	rjmp	.+166    	; 0xb66 <main+0x65e>
	if (cnt==3)  { bit_set(PORTD, 0x04); bit_set(DDRD, 0x04);} //PIN A4
     ac0:	93 30       	cpi	r25, 0x03	; 3
     ac2:	11 f4       	brne	.+4      	; 0xac8 <main+0x5c0>
     ac4:	5a 9a       	sbi	0x0b, 2	; 11
     ac6:	54 c0       	rjmp	.+168    	; 0xb70 <main+0x668>
	if (cnt==4)  { bit_set(PORTD, 0x08); bit_set(DDRD, 0x08);} //PIN A5
     ac8:	94 30       	cpi	r25, 0x04	; 4
     aca:	11 f4       	brne	.+4      	; 0xad0 <main+0x5c8>
     acc:	5b 9a       	sbi	0x0b, 3	; 11
     ace:	55 c0       	rjmp	.+170    	; 0xb7a <main+0x672>
	if (cnt==5)  { bit_set(PORTD, 0x10); bit_set(DDRD, 0x10);} //PIN A6
     ad0:	95 30       	cpi	r25, 0x05	; 5
     ad2:	11 f4       	brne	.+4      	; 0xad8 <main+0x5d0>
     ad4:	5c 9a       	sbi	0x0b, 4	; 11
     ad6:	56 c0       	rjmp	.+172    	; 0xb84 <main+0x67c>
	if (cnt==6)  { bit_set(PORTD, 0x20); bit_set(DDRD, 0x20);} //PIN A7
     ad8:	96 30       	cpi	r25, 0x06	; 6
     ada:	11 f4       	brne	.+4      	; 0xae0 <main+0x5d8>
     adc:	5d 9a       	sbi	0x0b, 5	; 11
     ade:	57 c0       	rjmp	.+174    	; 0xb8e <main+0x686>
	if (cnt==7)  { bit_set(PORTD, 0x40); bit_set(DDRD, 0x40);} //PIN A8
     ae0:	97 30       	cpi	r25, 0x07	; 7
     ae2:	11 f4       	brne	.+4      	; 0xae8 <main+0x5e0>
     ae4:	5e 9a       	sbi	0x0b, 6	; 11
     ae6:	58 c0       	rjmp	.+176    	; 0xb98 <main+0x690>
	if (cnt==8)  { bit_set(PORTB, 0x01); bit_set(DDRB, 0x01);} //PIN A9
     ae8:	98 30       	cpi	r25, 0x08	; 8
     aea:	11 f4       	brne	.+4      	; 0xaf0 <main+0x5e8>
     aec:	28 9a       	sbi	0x05, 0	; 5
     aee:	59 c0       	rjmp	.+178    	; 0xba2 <main+0x69a>
	if (cnt==9)  { bit_set(PORTB, 0x02); bit_set(DDRB, 0x02);} //PIN A10
     af0:	99 30       	cpi	r25, 0x09	; 9
     af2:	11 f4       	brne	.+4      	; 0xaf8 <main+0x5f0>
     af4:	29 9a       	sbi	0x05, 1	; 5
     af6:	5a c0       	rjmp	.+180    	; 0xbac <main+0x6a4>
	if (cnt==10) { bit_set(PORTB, 0x04); bit_set(DDRB, 0x04);} //PIN B1
     af8:	9a 30       	cpi	r25, 0x0A	; 10
     afa:	11 f4       	brne	.+4      	; 0xb00 <main+0x5f8>
     afc:	2a 9a       	sbi	0x05, 2	; 5
     afe:	5b c0       	rjmp	.+182    	; 0xbb6 <main+0x6ae>
	if (cnt==11) { bit_set(PORTB, 0x08); bit_set(DDRB, 0x08);} //PIN B2
     b00:	9b 30       	cpi	r25, 0x0B	; 11
     b02:	11 f4       	brne	.+4      	; 0xb08 <main+0x600>
     b04:	2b 9a       	sbi	0x05, 3	; 5
     b06:	5c c0       	rjmp	.+184    	; 0xbc0 <main+0x6b8>
	if (cnt==12) { bit_set(PORTB, 0x10); bit_set(DDRB, 0x10);} //PIN B3
     b08:	9c 30       	cpi	r25, 0x0C	; 12
     b0a:	11 f4       	brne	.+4      	; 0xb10 <main+0x608>
     b0c:	2c 9a       	sbi	0x05, 4	; 5
     b0e:	5d c0       	rjmp	.+186    	; 0xbca <main+0x6c2>
	if (cnt==13) { bit_set(PORTB, 0x20); bit_set(DDRB, 0x20);} //PIN B4
     b10:	9d 30       	cpi	r25, 0x0D	; 13
     b12:	11 f4       	brne	.+4      	; 0xb18 <main+0x610>
     b14:	2d 9a       	sbi	0x05, 5	; 5
     b16:	5e c0       	rjmp	.+188    	; 0xbd4 <main+0x6cc>
	if (cnt==14) { bit_set(PORTB, 0x40); bit_set(DDRB, 0x40);} //PIN B5
     b18:	9e 30       	cpi	r25, 0x0E	; 14
     b1a:	11 f4       	brne	.+4      	; 0xb20 <main+0x618>
     b1c:	2e 9a       	sbi	0x05, 6	; 5
     b1e:	5f c0       	rjmp	.+190    	; 0xbde <main+0x6d6>
	if (cnt==15) { bit_set(PORTD, 0x80); bit_set(DDRD, 0x80);} //PIN B6
     b20:	9f 30       	cpi	r25, 0x0F	; 15
     b22:	19 f4       	brne	.+6      	; 0xb2a <main+0x622>
     b24:	5f 9a       	sbi	0x0b, 7	; 11
     b26:	57 9a       	sbi	0x0a, 7	; 10
     b28:	74 c0       	rjmp	.+232    	; 0xc12 <main+0x70a>
	if (cnt==16) { bit_set(PORTC, 0x80); bit_set(DDRC, 0x80);} //PIN B7
     b2a:	90 31       	cpi	r25, 0x10	; 16
     b2c:	11 f4       	brne	.+4      	; 0xb32 <main+0x62a>
     b2e:	47 9a       	sbi	0x08, 7	; 8
     b30:	60 c0       	rjmp	.+192    	; 0xbf2 <main+0x6ea>
	if (cnt==17) { bit_set(PORTC, 0x40); bit_set(DDRC, 0x40);} //PIN B8
     b32:	91 31       	cpi	r25, 0x11	; 17
     b34:	11 f4       	brne	.+4      	; 0xb3a <main+0x632>
     b36:	46 9a       	sbi	0x08, 6	; 8
     b38:	61 c0       	rjmp	.+194    	; 0xbfc <main+0x6f4>
	if (cnt==18) { bit_set(PORTC, 0x20); bit_set(DDRC, 0x20);} //PIN B9
     b3a:	92 31       	cpi	r25, 0x12	; 18
     b3c:	11 f4       	brne	.+4      	; 0xb42 <main+0x63a>
     b3e:	45 9a       	sbi	0x08, 5	; 8
     b40:	62 c0       	rjmp	.+196    	; 0xc06 <main+0x6fe>
	if (cnt==19) { bit_set(PORTC, 0x10); bit_set(DDRC, 0x10);} //PIN B10
     b42:	93 31       	cpi	r25, 0x13	; 19
     b44:	09 f0       	breq	.+2      	; 0xb48 <main+0x640>
     b46:	65 c0       	rjmp	.+202    	; 0xc12 <main+0x70a>
     b48:	44 9a       	sbi	0x08, 4	; 8
     b4a:	62 c0       	rjmp	.+196    	; 0xc10 <main+0x708>
} else {
	if (cnt==0)  { bit_clear(PORTC, 0x04); bit_set(DDRC, 0x04);} //PIN A1
     b4c:	99 23       	and	r25, r25
     b4e:	19 f4       	brne	.+6      	; 0xb56 <main+0x64e>
     b50:	42 98       	cbi	0x08, 2	; 8
     b52:	3a 9a       	sbi	0x07, 2	; 7
     b54:	5e c0       	rjmp	.+188    	; 0xc12 <main+0x70a>
	if (cnt==1)  { bit_clear(PORTD, 0x01); bit_set(DDRD, 0x01);} //PIN A2
     b56:	91 30       	cpi	r25, 0x01	; 1
     b58:	19 f4       	brne	.+6      	; 0xb60 <main+0x658>
     b5a:	58 98       	cbi	0x0b, 0	; 11
     b5c:	50 9a       	sbi	0x0a, 0	; 10
     b5e:	59 c0       	rjmp	.+178    	; 0xc12 <main+0x70a>
	if (cnt==2)  { bit_clear(PORTD, 0x02); bit_set(DDRD, 0x02);} //PIN A3
     b60:	92 30       	cpi	r25, 0x02	; 2
     b62:	19 f4       	brne	.+6      	; 0xb6a <main+0x662>
     b64:	59 98       	cbi	0x0b, 1	; 11
     b66:	51 9a       	sbi	0x0a, 1	; 10
     b68:	54 c0       	rjmp	.+168    	; 0xc12 <main+0x70a>
	if (cnt==3)  { bit_clear(PORTD, 0x04); bit_set(DDRD, 0x04);} //PIN A4
     b6a:	93 30       	cpi	r25, 0x03	; 3
     b6c:	19 f4       	brne	.+6      	; 0xb74 <main+0x66c>
     b6e:	5a 98       	cbi	0x0b, 2	; 11
     b70:	52 9a       	sbi	0x0a, 2	; 10
     b72:	4f c0       	rjmp	.+158    	; 0xc12 <main+0x70a>
	if (cnt==4)  { bit_clear(PORTD, 0x08); bit_set(DDRD, 0x08);} //PIN A5
     b74:	94 30       	cpi	r25, 0x04	; 4
     b76:	19 f4       	brne	.+6      	; 0xb7e <main+0x676>
     b78:	5b 98       	cbi	0x0b, 3	; 11
     b7a:	53 9a       	sbi	0x0a, 3	; 10
     b7c:	4a c0       	rjmp	.+148    	; 0xc12 <main+0x70a>
	if (cnt==5)  { bit_clear(PORTD, 0x10); bit_set(DDRD, 0x10);} //PIN A6
     b7e:	95 30       	cpi	r25, 0x05	; 5
     b80:	19 f4       	brne	.+6      	; 0xb88 <main+0x680>
     b82:	5c 98       	cbi	0x0b, 4	; 11
     b84:	54 9a       	sbi	0x0a, 4	; 10
     b86:	45 c0       	rjmp	.+138    	; 0xc12 <main+0x70a>
	if (cnt==6)  { bit_clear(PORTD, 0x20); bit_set(DDRD, 0x20);} //PIN A7
     b88:	96 30       	cpi	r25, 0x06	; 6
     b8a:	19 f4       	brne	.+6      	; 0xb92 <main+0x68a>
     b8c:	5d 98       	cbi	0x0b, 5	; 11
     b8e:	55 9a       	sbi	0x0a, 5	; 10
     b90:	40 c0       	rjmp	.+128    	; 0xc12 <main+0x70a>
	if (cnt==7)  { bit_clear(PORTD, 0x40); bit_set(DDRD, 0x40);} //PIN A8
     b92:	97 30       	cpi	r25, 0x07	; 7
     b94:	19 f4       	brne	.+6      	; 0xb9c <main+0x694>
     b96:	5e 98       	cbi	0x0b, 6	; 11
     b98:	56 9a       	sbi	0x0a, 6	; 10
     b9a:	3b c0       	rjmp	.+118    	; 0xc12 <main+0x70a>
	if (cnt==8)  { bit_clear(PORTB, 0x01); bit_set(DDRB, 0x01);} //PIN A9
     b9c:	98 30       	cpi	r25, 0x08	; 8
     b9e:	19 f4       	brne	.+6      	; 0xba6 <main+0x69e>
     ba0:	28 98       	cbi	0x05, 0	; 5
     ba2:	20 9a       	sbi	0x04, 0	; 4
     ba4:	36 c0       	rjmp	.+108    	; 0xc12 <main+0x70a>
	if (cnt==9)  { bit_clear(PORTB, 0x02); bit_set(DDRB, 0x02);} //PIN A10
     ba6:	99 30       	cpi	r25, 0x09	; 9
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <main+0x6a8>
     baa:	29 98       	cbi	0x05, 1	; 5
     bac:	21 9a       	sbi	0x04, 1	; 4
     bae:	31 c0       	rjmp	.+98     	; 0xc12 <main+0x70a>
	if (cnt==10) { bit_clear(PORTB, 0x04); bit_set(DDRB, 0x04);} //PIN B1
     bb0:	9a 30       	cpi	r25, 0x0A	; 10
     bb2:	19 f4       	brne	.+6      	; 0xbba <main+0x6b2>
     bb4:	2a 98       	cbi	0x05, 2	; 5
     bb6:	22 9a       	sbi	0x04, 2	; 4
     bb8:	2c c0       	rjmp	.+88     	; 0xc12 <main+0x70a>
	if (cnt==11) { bit_clear(PORTB, 0x08); bit_set(DDRB, 0x08);} //PIN B2
     bba:	9b 30       	cpi	r25, 0x0B	; 11
     bbc:	19 f4       	brne	.+6      	; 0xbc4 <main+0x6bc>
     bbe:	2b 98       	cbi	0x05, 3	; 5
     bc0:	23 9a       	sbi	0x04, 3	; 4
     bc2:	27 c0       	rjmp	.+78     	; 0xc12 <main+0x70a>
	if (cnt==12) { bit_clear(PORTB, 0x10); bit_set(DDRB, 0x10);} //PIN B3
     bc4:	9c 30       	cpi	r25, 0x0C	; 12
     bc6:	19 f4       	brne	.+6      	; 0xbce <main+0x6c6>
     bc8:	2c 98       	cbi	0x05, 4	; 5
     bca:	24 9a       	sbi	0x04, 4	; 4
     bcc:	22 c0       	rjmp	.+68     	; 0xc12 <main+0x70a>
	if (cnt==13) { bit_clear(PORTB, 0x20); bit_set(DDRB, 0x20);} //PIN B4
     bce:	9d 30       	cpi	r25, 0x0D	; 13
     bd0:	19 f4       	brne	.+6      	; 0xbd8 <main+0x6d0>
     bd2:	2d 98       	cbi	0x05, 5	; 5
     bd4:	25 9a       	sbi	0x04, 5	; 4
     bd6:	1d c0       	rjmp	.+58     	; 0xc12 <main+0x70a>
	if (cnt==14) { bit_clear(PORTB, 0x40); bit_set(DDRB, 0x40);} //PIN B5
     bd8:	9e 30       	cpi	r25, 0x0E	; 14
     bda:	19 f4       	brne	.+6      	; 0xbe2 <main+0x6da>
     bdc:	2e 98       	cbi	0x05, 6	; 5
     bde:	26 9a       	sbi	0x04, 6	; 4
     be0:	18 c0       	rjmp	.+48     	; 0xc12 <main+0x70a>
	if (cnt==15) { bit_clear(PORTB, 0x80); bit_set(DDRB, 0x80);} //PIN B6
     be2:	9f 30       	cpi	r25, 0x0F	; 15
     be4:	19 f4       	brne	.+6      	; 0xbec <main+0x6e4>
     be6:	2f 98       	cbi	0x05, 7	; 5
     be8:	27 9a       	sbi	0x04, 7	; 4
     bea:	13 c0       	rjmp	.+38     	; 0xc12 <main+0x70a>
	if (cnt==16) { bit_clear(PORTC, 0x80); bit_set(DDRC, 0x80);} //PIN B7
     bec:	90 31       	cpi	r25, 0x10	; 16
     bee:	19 f4       	brne	.+6      	; 0xbf6 <main+0x6ee>
     bf0:	47 98       	cbi	0x08, 7	; 8
     bf2:	3f 9a       	sbi	0x07, 7	; 7
     bf4:	0e c0       	rjmp	.+28     	; 0xc12 <main+0x70a>
	if (cnt==17) { bit_clear(PORTC, 0x40); bit_set(DDRC, 0x40);} //PIN B8
     bf6:	91 31       	cpi	r25, 0x11	; 17
     bf8:	19 f4       	brne	.+6      	; 0xc00 <main+0x6f8>
     bfa:	46 98       	cbi	0x08, 6	; 8
     bfc:	3e 9a       	sbi	0x07, 6	; 7
     bfe:	09 c0       	rjmp	.+18     	; 0xc12 <main+0x70a>
	if (cnt==18) { bit_clear(PORTC, 0x20); bit_set(DDRC, 0x20);} //PIN B9
     c00:	92 31       	cpi	r25, 0x12	; 18
     c02:	19 f4       	brne	.+6      	; 0xc0a <main+0x702>
     c04:	45 98       	cbi	0x08, 5	; 8
     c06:	3d 9a       	sbi	0x07, 5	; 7
     c08:	04 c0       	rjmp	.+8      	; 0xc12 <main+0x70a>
	if (cnt==19) { bit_clear(PORTC, 0x10); bit_set(DDRC, 0x10);} //PIN B10
     c0a:	93 31       	cpi	r25, 0x13	; 19
     c0c:	11 f4       	brne	.+4      	; 0xc12 <main+0x70a>
     c0e:	44 98       	cbi	0x08, 4	; 8
     c10:	3c 9a       	sbi	0x07, 4	; 7
     c12:	4f 5f       	subi	r20, 0xFF	; 255
     c14:	5f 4f       	sbci	r21, 0xFF	; 255
     c16:	11 96       	adiw	r26, 0x01	; 1
u=0; d=0; l=0; r=0;
pu=u; pd=d; pl=l; pr=r;
uint8_t dp_pp=0, dp_lp=0, set;

//pre-loop to deal with any switches/toggles		
for(cnt=0;cnt<20;cnt++) {
     c18:	44 31       	cpi	r20, 0x14	; 20
     c1a:	51 05       	cpc	r21, r1
     c1c:	09 f0       	breq	.+2      	; 0xc20 <main+0x718>
     c1e:	ec ce       	rjmp	.-552    	; 0x9f8 <main+0x4f0>
		#include "..\shared\showleds.c"								
	}
}			

//autofire toggle
if(autofire==1){
     c20:	2d 96       	adiw	r28, 0x0d	; 13
     c22:	4f ad       	ldd	r20, Y+63	; 0x3f
     c24:	2d 97       	sbiw	r28, 0x0d	; 13
     c26:	41 30       	cpi	r20, 0x01	; 1
     c28:	39 f4       	brne	.+14     	; 0xc38 <main+0x730>
	auto_toggle = auto_toggle * -1;
     c2a:	2c 96       	adiw	r28, 0x0c	; 12
     c2c:	5f ad       	ldd	r21, Y+63	; 0x3f
     c2e:	2c 97       	sbiw	r28, 0x0c	; 12
     c30:	51 95       	neg	r21
     c32:	2c 96       	adiw	r28, 0x0c	; 12
     c34:	5f af       	std	Y+63, r21	; 0x3f
     c36:	2c 97       	sbiw	r28, 0x0c	; 12


//Handle dpad and restricted movement
if (default_restrict == 1){
	dpad_u=0; dpad_d=0; dpad_l=0; dpad_r=0;
	if(restrict4==0){
     c38:	ff 20       	and	r15, r15
     c3a:	31 f4       	brne	.+12     	; 0xc48 <main+0x740>
     c3c:	3b 01       	movw	r6, r22
     c3e:	61 96       	adiw	r28, 0x11	; 17
     c40:	3f af       	std	Y+63, r19	; 0x3f
     c42:	61 97       	sbiw	r28, 0x11	; 17
     c44:	40 2e       	mov	r4, r16
     c46:	29 c0       	rjmp	.+82     	; 0xc9a <main+0x792>
			if ((u==1)&&(set==0)){dpad_u=1; dp_pp=1; set=1;}
			if ((d==1)&&(set==0)){dpad_d=1; dp_pp=2; set=1;}
			if ((l==1)&&(set==0)){dpad_l=1; dp_pp=3; set=1;}
		}						
		if((dp_pp==4)||(dp_pp==0)){
			if ((l==1)&&(set==0)){dpad_l=1; dp_pp=3; set=1;}
     c48:	31 30       	cpi	r19, 0x01	; 1
     c4a:	29 f4       	brne	.+10     	; 0xc56 <main+0x74e>
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	61 96       	adiw	r28, 0x11	; 17
     c50:	8f af       	std	Y+63, r24	; 0x3f
     c52:	61 97       	sbiw	r28, 0x11	; 17
     c54:	04 c0       	rjmp	.+8      	; 0xc5e <main+0x756>
     c56:	61 96       	adiw	r28, 0x11	; 17
     c58:	1f ae       	std	Y+63, r1	; 0x3f
     c5a:	61 97       	sbiw	r28, 0x11	; 17
     c5c:	80 e0       	ldi	r24, 0x00	; 0
			if ((u==1)&&(set==0)){dpad_u=1; dp_pp=1; set=1;}
     c5e:	61 30       	cpi	r22, 0x01	; 1
     c60:	11 f0       	breq	.+4      	; 0xc66 <main+0x75e>
     c62:	66 24       	eor	r6, r6
     c64:	07 c0       	rjmp	.+14     	; 0xc74 <main+0x76c>
     c66:	88 23       	and	r24, r24
     c68:	19 f4       	brne	.+6      	; 0xc70 <main+0x768>
     c6a:	66 24       	eor	r6, r6
     c6c:	63 94       	inc	r6
     c6e:	01 c0       	rjmp	.+2      	; 0xc72 <main+0x76a>
     c70:	66 24       	eor	r6, r6
     c72:	81 e0       	ldi	r24, 0x01	; 1
			if ((d==1)&&(set==0)){dpad_d=1; dp_pp=2; set=1;}
     c74:	71 30       	cpi	r23, 0x01	; 1
     c76:	11 f0       	breq	.+4      	; 0xc7c <main+0x774>
     c78:	77 24       	eor	r7, r7
     c7a:	07 c0       	rjmp	.+14     	; 0xc8a <main+0x782>
     c7c:	88 23       	and	r24, r24
     c7e:	19 f4       	brne	.+6      	; 0xc86 <main+0x77e>
     c80:	77 24       	eor	r7, r7
     c82:	73 94       	inc	r7
     c84:	01 c0       	rjmp	.+2      	; 0xc88 <main+0x780>
     c86:	77 24       	eor	r7, r7
     c88:	81 e0       	ldi	r24, 0x01	; 1
			if ((r==1)&&(set==0)){dpad_r=1; dp_pp=4; set=1;}											
     c8a:	01 30       	cpi	r16, 0x01	; 1
     c8c:	29 f4       	brne	.+10     	; 0xc98 <main+0x790>
     c8e:	88 23       	and	r24, r24
     c90:	19 f4       	brne	.+6      	; 0xc98 <main+0x790>
     c92:	44 24       	eor	r4, r4
     c94:	43 94       	inc	r4
     c96:	01 c0       	rjmp	.+2      	; 0xc9a <main+0x792>
     c98:	44 24       	eor	r4, r4
		}				
	}
}

//Handle trackballs and mice
if (setting_enable_tb1==1){
     c9a:	29 96       	adiw	r28, 0x09	; 9
     c9c:	9f ad       	ldd	r25, Y+63	; 0x3f
     c9e:	29 97       	sbiw	r28, 0x09	; 9
     ca0:	91 30       	cpi	r25, 0x01	; 1
     ca2:	11 f4       	brne	.+4      	; 0xca8 <main+0x7a0>
	readTrackBall();		
     ca4:	a9 db       	rcall	.-2222   	; 0x3f8 <readTrackBall>
	calcMovement();				
     ca6:	8d db       	rcall	.-2278   	; 0x3c2 <calcMovement>
		
		//generic stuff at start of main loop
		#include "..\shared\generic_main_preloop.c"
				
		//set default button states
		bit_clear(gamepad_state.digital_buttons,0xFF);
     ca8:	10 92 16 01 	sts	0x0116, r1
		bit_clear(gamepad_state.a,0xFF);
     cac:	10 92 18 01 	sts	0x0118, r1
		bit_clear(gamepad_state.b,0xFF);
     cb0:	10 92 19 01 	sts	0x0119, r1
		bit_clear(gamepad_state.x,0xFF);
     cb4:	10 92 1a 01 	sts	0x011A, r1
		bit_clear(gamepad_state.y,0xFF);
     cb8:	10 92 1b 01 	sts	0x011B, r1
		bit_clear(gamepad_state.l,0xFF);
     cbc:	10 92 1e 01 	sts	0x011E, r1
		bit_clear(gamepad_state.r,0xFF);
     cc0:	10 92 1f 01 	sts	0x011F, r1
		bit_clear(gamepad_state.black,0xFF);
     cc4:	10 92 1c 01 	sts	0x011C, r1
		bit_clear(gamepad_state.white,0xFF);
     cc8:	10 92 1d 01 	sts	0x011D, r1
		gamepad_state.l_y=0;
     ccc:	10 92 23 01 	sts	0x0123, r1
     cd0:	10 92 22 01 	sts	0x0122, r1
		gamepad_state.l_x=0;
     cd4:	10 92 21 01 	sts	0x0121, r1
     cd8:	10 92 20 01 	sts	0x0120, r1
		gamepad_state.r_y=0;
     cdc:	10 92 27 01 	sts	0x0127, r1
     ce0:	10 92 26 01 	sts	0x0126, r1
		gamepad_state.r_x=0;
     ce4:	10 92 25 01 	sts	0x0125, r1
     ce8:	10 92 24 01 	sts	0x0124, r1
		
		//2 way restrict
		restrict2X=0;
		restrict2Y=0;		
		if ((ass[cnt]==29)||(ass[pos]==29)){restrict2X=1;} //restrict dPad 2-way
     cec:	2d ad       	ldd	r18, Y+61	; 0x3d
     cee:	2d 31       	cpi	r18, 0x1D	; 29
     cf0:	11 f4       	brne	.+4      	; 0xcf6 <main+0x7ee>
     cf2:	01 e0       	ldi	r16, 0x01	; 1
     cf4:	0b c0       	rjmp	.+22     	; 0xd0c <main+0x804>
     cf6:	00 e0       	ldi	r16, 0x00	; 0
     cf8:	f1 01       	movw	r30, r2
     cfa:	ec 0d       	add	r30, r12
     cfc:	f1 1d       	adc	r31, r1
     cfe:	80 81       	ld	r24, Z
     d00:	8d 31       	cpi	r24, 0x1D	; 29
     d02:	09 f4       	brne	.+2      	; 0xd06 <main+0x7fe>
     d04:	01 e0       	ldi	r16, 0x01	; 1
		if ((ass[cnt]==32)||(ass[pos]==32)){restrict2Y=1;} //restrict dPad 2-way
     d06:	3d ad       	ldd	r19, Y+61	; 0x3d
     d08:	30 32       	cpi	r19, 0x20	; 32
     d0a:	51 f0       	breq	.+20     	; 0xd20 <main+0x818>
     d0c:	f1 01       	movw	r30, r2
     d0e:	ec 0d       	add	r30, r12
     d10:	f1 1d       	adc	r31, r1
     d12:	80 81       	ld	r24, Z
     d14:	80 32       	cpi	r24, 0x20	; 32
     d16:	21 f0       	breq	.+8      	; 0xd20 <main+0x818>
     d18:	62 96       	adiw	r28, 0x12	; 18
     d1a:	1f ae       	std	Y+63, r1	; 0x3f
     d1c:	62 97       	sbiw	r28, 0x12	; 18
     d1e:	04 c0       	rjmp	.+8      	; 0xd28 <main+0x820>
     d20:	41 e0       	ldi	r20, 0x01	; 1
     d22:	62 96       	adiw	r28, 0x12	; 18
     d24:	4f af       	std	Y+63, r20	; 0x3f
     d26:	62 97       	sbiw	r28, 0x12	; 18


		//Trackballs Analog
		//NOTE: COME BACK AND TIDY THIS LOGIC IF IT WORKS WELL
		
		if (setting_enable_tb1==1){
     d28:	29 96       	adiw	r28, 0x09	; 9
     d2a:	5f ad       	ldd	r21, Y+63	; 0x3f
     d2c:	29 97       	sbiw	r28, 0x09	; 9
     d2e:	51 30       	cpi	r21, 0x01	; 1
     d30:	09 f0       	breq	.+2      	; 0xd34 <main+0x82c>
     d32:	80 c0       	rjmp	.+256    	; 0xe34 <main+0x92c>
			if(setting_tb1_trackball==1){
     d34:	28 96       	adiw	r28, 0x08	; 8
     d36:	8f ad       	ldd	r24, Y+63	; 0x3f
     d38:	28 97       	sbiw	r28, 0x08	; 8
     d3a:	81 30       	cpi	r24, 0x01	; 1
     d3c:	09 f0       	breq	.+2      	; 0xd40 <main+0x838>
     d3e:	a8 c0       	rjmp	.+336    	; 0xe90 <main+0x988>
     d40:	20 91 0e 01 	lds	r18, 0x010E
				if (setting_tb1_stick==1){ 
     d44:	26 96       	adiw	r28, 0x06	; 6
     d46:	9f ad       	ldd	r25, Y+63	; 0x3f
     d48:	26 97       	sbiw	r28, 0x06	; 6
     d4a:	91 30       	cpi	r25, 0x01	; 1
     d4c:	b9 f5       	brne	.+110    	; 0xdbc <main+0x8b4>
					//Y Axis (Trackball)
					if(abs(ps2_y) < 46){
     d4e:	82 2f       	mov	r24, r18
     d50:	83 5d       	subi	r24, 0xD3	; 211
     d52:	8b 35       	cpi	r24, 0x5B	; 91
     d54:	48 f4       	brcc	.+18     	; 0xd68 <main+0x860>
						gamepad_state.r_y = ps2_y * 720;
     d56:	82 2f       	mov	r24, r18
     d58:	99 27       	eor	r25, r25
     d5a:	87 fd       	sbrc	r24, 7
     d5c:	90 95       	com	r25
     d5e:	60 ed       	ldi	r22, 0xD0	; 208
     d60:	72 e0       	ldi	r23, 0x02	; 2
     d62:	0e 94 11 10 	call	0x2022	; 0x2022 <__mulhi3>
     d66:	0c c0       	rjmp	.+24     	; 0xd80 <main+0x878>
					} else {
						if (ps2_y > 45){gamepad_state.r_y = 32767;}
     d68:	2e 32       	cpi	r18, 0x2E	; 46
     d6a:	34 f0       	brlt	.+12     	; 0xd78 <main+0x870>
     d6c:	8f ef       	ldi	r24, 0xFF	; 255
     d6e:	9f e7       	ldi	r25, 0x7F	; 127
     d70:	90 93 27 01 	sts	0x0127, r25
     d74:	80 93 26 01 	sts	0x0126, r24
						if (ps2_y < -45){gamepad_state.r_y = -32768;}		
     d78:	23 3d       	cpi	r18, 0xD3	; 211
     d7a:	34 f4       	brge	.+12     	; 0xd88 <main+0x880>
     d7c:	80 e0       	ldi	r24, 0x00	; 0
     d7e:	90 e8       	ldi	r25, 0x80	; 128
     d80:	90 93 27 01 	sts	0x0127, r25
     d84:	80 93 26 01 	sts	0x0126, r24
					}
			
					//X Axis (Trackball)
					if(abs(ps2_x) < 46){
     d88:	20 91 0f 01 	lds	r18, 0x010F
     d8c:	82 2f       	mov	r24, r18
     d8e:	83 5d       	subi	r24, 0xD3	; 211
     d90:	8b 35       	cpi	r24, 0x5B	; 91
     d92:	48 f4       	brcc	.+18     	; 0xda6 <main+0x89e>
						gamepad_state.r_x = ps2_x * 720;
     d94:	82 2f       	mov	r24, r18
     d96:	99 27       	eor	r25, r25
     d98:	87 fd       	sbrc	r24, 7
     d9a:	90 95       	com	r25
     d9c:	60 ed       	ldi	r22, 0xD0	; 208
     d9e:	72 e0       	ldi	r23, 0x02	; 2
     da0:	0e 94 11 10 	call	0x2022	; 0x2022 <__mulhi3>
     da4:	bf c0       	rjmp	.+382    	; 0xf24 <main+0xa1c>
					} else {
						if (ps2_x > 45){gamepad_state.r_x = 32767;}
     da6:	2e 32       	cpi	r18, 0x2E	; 46
     da8:	34 f0       	brlt	.+12     	; 0xdb6 <main+0x8ae>
     daa:	8f ef       	ldi	r24, 0xFF	; 255
     dac:	9f e7       	ldi	r25, 0x7F	; 127
     dae:	90 93 25 01 	sts	0x0125, r25
     db2:	80 93 24 01 	sts	0x0124, r24
						if (ps2_x < -45){gamepad_state.r_x = -32768;}		
     db6:	23 3d       	cpi	r18, 0xD3	; 211
     db8:	ec f5       	brge	.+122    	; 0xe34 <main+0x92c>
     dba:	b2 c0       	rjmp	.+356    	; 0xf20 <main+0xa18>
					}
				} else {					
					//Y Axis (Trackball)
					if(abs(ps2_y) < 46){
     dbc:	82 2f       	mov	r24, r18
     dbe:	83 5d       	subi	r24, 0xD3	; 211
     dc0:	8b 35       	cpi	r24, 0x5B	; 91
     dc2:	48 f4       	brcc	.+18     	; 0xdd6 <main+0x8ce>
						gamepad_state.l_y = ps2_y * 720;
     dc4:	82 2f       	mov	r24, r18
     dc6:	99 27       	eor	r25, r25
     dc8:	87 fd       	sbrc	r24, 7
     dca:	90 95       	com	r25
     dcc:	60 ed       	ldi	r22, 0xD0	; 208
     dce:	72 e0       	ldi	r23, 0x02	; 2
     dd0:	0e 94 11 10 	call	0x2022	; 0x2022 <__mulhi3>
     dd4:	0c c0       	rjmp	.+24     	; 0xdee <main+0x8e6>
					} else {
						if (ps2_y > 45){gamepad_state.l_y = 32767;}
     dd6:	2e 32       	cpi	r18, 0x2E	; 46
     dd8:	34 f0       	brlt	.+12     	; 0xde6 <main+0x8de>
     dda:	8f ef       	ldi	r24, 0xFF	; 255
     ddc:	9f e7       	ldi	r25, 0x7F	; 127
     dde:	90 93 23 01 	sts	0x0123, r25
     de2:	80 93 22 01 	sts	0x0122, r24
						if (ps2_y < -45){gamepad_state.l_y = -32768;}		
     de6:	23 3d       	cpi	r18, 0xD3	; 211
     de8:	34 f4       	brge	.+12     	; 0xdf6 <main+0x8ee>
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	90 e8       	ldi	r25, 0x80	; 128
     dee:	90 93 23 01 	sts	0x0123, r25
     df2:	80 93 22 01 	sts	0x0122, r24
					}
			
					//X Axis (Trackball)
					if(abs(ps2_x) < 46){
     df6:	20 91 0f 01 	lds	r18, 0x010F
     dfa:	82 2f       	mov	r24, r18
     dfc:	83 5d       	subi	r24, 0xD3	; 211
     dfe:	8b 35       	cpi	r24, 0x5B	; 91
     e00:	48 f4       	brcc	.+18     	; 0xe14 <main+0x90c>
						gamepad_state.l_x = ps2_x * 720;
     e02:	82 2f       	mov	r24, r18
     e04:	99 27       	eor	r25, r25
     e06:	87 fd       	sbrc	r24, 7
     e08:	90 95       	com	r25
     e0a:	60 ed       	ldi	r22, 0xD0	; 208
     e0c:	72 e0       	ldi	r23, 0x02	; 2
     e0e:	0e 94 11 10 	call	0x2022	; 0x2022 <__mulhi3>
     e12:	0c c0       	rjmp	.+24     	; 0xe2c <main+0x924>
					} else {
						if (ps2_x > 45){gamepad_state.l_x = 32767;}
     e14:	2e 32       	cpi	r18, 0x2E	; 46
     e16:	34 f0       	brlt	.+12     	; 0xe24 <main+0x91c>
     e18:	8f ef       	ldi	r24, 0xFF	; 255
     e1a:	9f e7       	ldi	r25, 0x7F	; 127
     e1c:	90 93 21 01 	sts	0x0121, r25
     e20:	80 93 20 01 	sts	0x0120, r24
						if (ps2_x < -45){gamepad_state.l_x = -32768;}		
     e24:	23 3d       	cpi	r18, 0xD3	; 211
     e26:	34 f4       	brge	.+12     	; 0xe34 <main+0x92c>
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	90 e8       	ldi	r25, 0x80	; 128
     e2c:	90 93 21 01 	sts	0x0121, r25
     e30:	80 93 20 01 	sts	0x0120, r24
     e34:	21 2f       	mov	r18, r17
     e36:	ee 24       	eor	r14, r14
     e38:	ff 24       	eor	r15, r15
//Left thumb, Right thumb
if (action==15){bit_set(gamepad_state.digital_buttons,XBOX_LEFT_STICK);}
if (action==16){bit_set(gamepad_state.digital_buttons,XBOX_RIGHT_STICK);}

//Left analog stick
if (action==(17+invert)){gamepad_state.l_y=32767;}
     e3a:	2a 96       	adiw	r28, 0x0a	; 10
     e3c:	3f ad       	ldd	r19, Y+63	; 0x3f
     e3e:	2a 97       	sbiw	r28, 0x0a	; 10
     e40:	83 2f       	mov	r24, r19
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	ac 01       	movw	r20, r24
     e46:	4f 5e       	subi	r20, 0xEF	; 239
     e48:	5f 4f       	sbci	r21, 0xFF	; 255
     e4a:	68 96       	adiw	r28, 0x18	; 24
     e4c:	5f af       	std	Y+63, r21	; 0x3f
     e4e:	4e af       	std	Y+62, r20	; 0x3e
     e50:	68 97       	sbiw	r28, 0x18	; 24
if (action==(18-invert)){gamepad_state.l_y=-32768;}
     e52:	42 e1       	ldi	r20, 0x12	; 18
     e54:	50 e0       	ldi	r21, 0x00	; 0
     e56:	48 1b       	sub	r20, r24
     e58:	59 0b       	sbc	r21, r25
     e5a:	6a 96       	adiw	r28, 0x1a	; 26
     e5c:	5f af       	std	Y+63, r21	; 0x3f
     e5e:	4e af       	std	Y+62, r20	; 0x3e
     e60:	6a 97       	sbiw	r28, 0x1a	; 26
if (action==19){gamepad_state.l_x=-32768;}
if (action==20){gamepad_state.l_x=32767;}

//Right analog stick
if (action==(21+invert)){gamepad_state.r_y=32767;}
     e62:	ac 01       	movw	r20, r24
     e64:	4b 5e       	subi	r20, 0xEB	; 235
     e66:	5f 4f       	sbci	r21, 0xFF	; 255
     e68:	6c 96       	adiw	r28, 0x1c	; 28
     e6a:	5f af       	std	Y+63, r21	; 0x3f
     e6c:	4e af       	std	Y+62, r20	; 0x3e
     e6e:	6c 97       	sbiw	r28, 0x1c	; 28
if (action==(22-invert)){gamepad_state.r_y=-32768;}
     e70:	46 e1       	ldi	r20, 0x16	; 22
     e72:	50 e0       	ldi	r21, 0x00	; 0
     e74:	48 1b       	sub	r20, r24
     e76:	59 0b       	sbc	r21, r25
     e78:	6e 96       	adiw	r28, 0x1e	; 30
     e7a:	5f af       	std	Y+63, r21	; 0x3f
     e7c:	4e af       	std	Y+62, r20	; 0x3e
     e7e:	6e 97       	sbiw	r28, 0x1e	; 30
if (action==23){gamepad_state.r_x=-32768;}
if (action==24){gamepad_state.r_x=32767;}
     e80:	6f ef       	ldi	r22, 0xFF	; 255
     e82:	86 2e       	mov	r8, r22
     e84:	6f e7       	ldi	r22, 0x7F	; 127
     e86:	96 2e       	mov	r9, r22
if (action==20){gamepad_state.l_x=32767;}

//Right analog stick
if (action==(21+invert)){gamepad_state.r_y=32767;}
if (action==(22-invert)){gamepad_state.r_y=-32768;}
if (action==23){gamepad_state.r_x=-32768;}
     e88:	a1 2c       	mov	r10, r1
     e8a:	50 e8       	ldi	r21, 0x80	; 128
     e8c:	b5 2e       	mov	r11, r21
     e8e:	91 c0       	rjmp	.+290    	; 0xfb2 <main+0xaaa>
     e90:	20 91 0e 01 	lds	r18, 0x010E
					}			
				}
			} else {
				if (setting_tb1_stick==1){ 
     e94:	26 96       	adiw	r28, 0x06	; 6
     e96:	5f ad       	ldd	r21, Y+63	; 0x3f
     e98:	26 97       	sbiw	r28, 0x06	; 6
     e9a:	51 30       	cpi	r21, 0x01	; 1
     e9c:	09 f0       	breq	.+2      	; 0xea0 <main+0x998>
     e9e:	47 c0       	rjmp	.+142    	; 0xf2e <main+0xa26>
					//Y Axis (Mouse)						
					gamepad_state.r_y = ps2_y * 255;				
     ea0:	82 2f       	mov	r24, r18
     ea2:	99 27       	eor	r25, r25
     ea4:	87 fd       	sbrc	r24, 7
     ea6:	90 95       	com	r25
     ea8:	6f ef       	ldi	r22, 0xFF	; 255
     eaa:	70 e0       	ldi	r23, 0x00	; 0
     eac:	0e 94 11 10 	call	0x2022	; 0x2022 <__mulhi3>
     eb0:	90 93 27 01 	sts	0x0127, r25
     eb4:	80 93 26 01 	sts	0x0126, r24
					if (gamepad_state.r_y > 30000){gamepad_state.r_y = 32767;}
     eb8:	81 53       	subi	r24, 0x31	; 49
     eba:	95 47       	sbci	r25, 0x75	; 117
     ebc:	34 f0       	brlt	.+12     	; 0xeca <main+0x9c2>
     ebe:	8f ef       	ldi	r24, 0xFF	; 255
     ec0:	9f e7       	ldi	r25, 0x7F	; 127
     ec2:	90 93 27 01 	sts	0x0127, r25
     ec6:	80 93 26 01 	sts	0x0126, r24
					if (gamepad_state.r_y < -30000){gamepad_state.r_y = -32768;}
     eca:	80 91 26 01 	lds	r24, 0x0126
     ece:	90 91 27 01 	lds	r25, 0x0127
     ed2:	80 5d       	subi	r24, 0xD0	; 208
     ed4:	9a 48       	sbci	r25, 0x8A	; 138
     ed6:	34 f4       	brge	.+12     	; 0xee4 <main+0x9dc>
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	90 e8       	ldi	r25, 0x80	; 128
     edc:	90 93 27 01 	sts	0x0127, r25
     ee0:	80 93 26 01 	sts	0x0126, r24

					//X Axis (Mouse)
					gamepad_state.r_x = ps2_x * 255;
     ee4:	80 91 0f 01 	lds	r24, 0x010F
     ee8:	99 27       	eor	r25, r25
     eea:	87 fd       	sbrc	r24, 7
     eec:	90 95       	com	r25
     eee:	6f ef       	ldi	r22, 0xFF	; 255
     ef0:	70 e0       	ldi	r23, 0x00	; 0
     ef2:	0e 94 11 10 	call	0x2022	; 0x2022 <__mulhi3>
     ef6:	90 93 25 01 	sts	0x0125, r25
     efa:	80 93 24 01 	sts	0x0124, r24
					if (gamepad_state.r_x > 30000){gamepad_state.r_x = 32767;}
     efe:	81 53       	subi	r24, 0x31	; 49
     f00:	95 47       	sbci	r25, 0x75	; 117
     f02:	34 f0       	brlt	.+12     	; 0xf10 <main+0xa08>
     f04:	8f ef       	ldi	r24, 0xFF	; 255
     f06:	9f e7       	ldi	r25, 0x7F	; 127
     f08:	90 93 25 01 	sts	0x0125, r25
     f0c:	80 93 24 01 	sts	0x0124, r24
					if (gamepad_state.r_x < -30000){gamepad_state.r_x = -32768;}
     f10:	80 91 24 01 	lds	r24, 0x0124
     f14:	90 91 25 01 	lds	r25, 0x0125
     f18:	80 5d       	subi	r24, 0xD0	; 208
     f1a:	9a 48       	sbci	r25, 0x8A	; 138
     f1c:	0c f0       	brlt	.+2      	; 0xf20 <main+0xa18>
     f1e:	8a cf       	rjmp	.-236    	; 0xe34 <main+0x92c>
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	90 e8       	ldi	r25, 0x80	; 128
     f24:	90 93 25 01 	sts	0x0125, r25
     f28:	80 93 24 01 	sts	0x0124, r24
     f2c:	83 cf       	rjmp	.-250    	; 0xe34 <main+0x92c>
				} else {
					//Y Axis (Mouse)						
					gamepad_state.l_y = ps2_y * 255;				
     f2e:	82 2f       	mov	r24, r18
     f30:	99 27       	eor	r25, r25
     f32:	87 fd       	sbrc	r24, 7
     f34:	90 95       	com	r25
     f36:	6f ef       	ldi	r22, 0xFF	; 255
     f38:	70 e0       	ldi	r23, 0x00	; 0
     f3a:	0e 94 11 10 	call	0x2022	; 0x2022 <__mulhi3>
     f3e:	90 93 23 01 	sts	0x0123, r25
     f42:	80 93 22 01 	sts	0x0122, r24
					if (gamepad_state.l_y > 30000){gamepad_state.l_y = 32767;}
     f46:	81 53       	subi	r24, 0x31	; 49
     f48:	95 47       	sbci	r25, 0x75	; 117
     f4a:	34 f0       	brlt	.+12     	; 0xf58 <main+0xa50>
     f4c:	8f ef       	ldi	r24, 0xFF	; 255
     f4e:	9f e7       	ldi	r25, 0x7F	; 127
     f50:	90 93 23 01 	sts	0x0123, r25
     f54:	80 93 22 01 	sts	0x0122, r24
					if (gamepad_state.l_y < -30000){gamepad_state.l_y = -32768;}
     f58:	80 91 22 01 	lds	r24, 0x0122
     f5c:	90 91 23 01 	lds	r25, 0x0123
     f60:	80 5d       	subi	r24, 0xD0	; 208
     f62:	9a 48       	sbci	r25, 0x8A	; 138
     f64:	34 f4       	brge	.+12     	; 0xf72 <main+0xa6a>
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	90 e8       	ldi	r25, 0x80	; 128
     f6a:	90 93 23 01 	sts	0x0123, r25
     f6e:	80 93 22 01 	sts	0x0122, r24

					//X Axis (Mouse)
					gamepad_state.l_x = ps2_x * 255;
     f72:	80 91 0f 01 	lds	r24, 0x010F
     f76:	99 27       	eor	r25, r25
     f78:	87 fd       	sbrc	r24, 7
     f7a:	90 95       	com	r25
     f7c:	6f ef       	ldi	r22, 0xFF	; 255
     f7e:	70 e0       	ldi	r23, 0x00	; 0
     f80:	0e 94 11 10 	call	0x2022	; 0x2022 <__mulhi3>
     f84:	90 93 21 01 	sts	0x0121, r25
     f88:	80 93 20 01 	sts	0x0120, r24
					if (gamepad_state.l_x > 30000){gamepad_state.l_x = 32767;}
     f8c:	81 53       	subi	r24, 0x31	; 49
     f8e:	95 47       	sbci	r25, 0x75	; 117
     f90:	34 f0       	brlt	.+12     	; 0xf9e <main+0xa96>
     f92:	8f ef       	ldi	r24, 0xFF	; 255
     f94:	9f e7       	ldi	r25, 0x7F	; 127
     f96:	90 93 21 01 	sts	0x0121, r25
     f9a:	80 93 20 01 	sts	0x0120, r24
					if (gamepad_state.l_x < -30000){gamepad_state.l_x = -32768;}				
     f9e:	80 91 20 01 	lds	r24, 0x0120
     fa2:	90 91 21 01 	lds	r25, 0x0121
     fa6:	80 5d       	subi	r24, 0xD0	; 208
     fa8:	9a 48       	sbci	r25, 0x8A	; 138
     faa:	0c f0       	brlt	.+2      	; 0xfae <main+0xaa6>
     fac:	43 cf       	rjmp	.-378    	; 0xe34 <main+0x92c>
     fae:	3c cf       	rjmp	.-392    	; 0xe28 <main+0x920>
     fb0:	21 2f       	mov	r18, r17
		}

		//loop through pins checking for inputs from those that are assigned a function
		for(cnt=0;cnt<20;cnt++) {
			pos=cnt;					
			if (!(state[cnt])) {
     fb2:	e1 e0       	ldi	r30, 0x01	; 1
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	ec 0f       	add	r30, r28
     fb8:	fd 1f       	adc	r31, r29
     fba:	ee 0d       	add	r30, r14
     fbc:	ff 1d       	adc	r31, r15
     fbe:	80 81       	ld	r24, Z
     fc0:	88 23       	and	r24, r24
     fc2:	11 f0       	breq	.+4      	; 0xfc8 <main+0xac0>
     fc4:	ce 2c       	mov	r12, r14
     fc6:	4f c1       	rjmp	.+670    	; 0x1266 <main+0xd5e>
				//there is input on this pin
				if (shift==1){pos=pos+20;}  //+20 if this is shifted input
     fc8:	8e ad       	ldd	r24, Y+62	; 0x3e
     fca:	81 30       	cpi	r24, 0x01	; 1
     fcc:	11 f0       	breq	.+4      	; 0xfd2 <main+0xaca>
     fce:	ce 2c       	mov	r12, r14
     fd0:	03 c0       	rjmp	.+6      	; 0xfd8 <main+0xad0>
     fd2:	44 e1       	ldi	r20, 0x14	; 20
     fd4:	c4 2e       	mov	r12, r20
     fd6:	ce 0c       	add	r12, r14
				
				if (ass[pos]>0) {
     fd8:	f1 01       	movw	r30, r2
     fda:	ec 0d       	add	r30, r12
     fdc:	f1 1d       	adc	r31, r1
     fde:	10 81       	ld	r17, Z
     fe0:	11 23       	and	r17, r17
     fe2:	11 f4       	brne	.+4      	; 0xfe8 <main+0xae0>
     fe4:	12 2f       	mov	r17, r18
     fe6:	3f c1       	rjmp	.+638    	; 0x1266 <main+0xd5e>
					//there is an assignment to a function
					
					//dpad movement (as determined in main_preloop)
					if(restrict2X==0){
     fe8:	00 23       	and	r16, r16
     fea:	81 f4       	brne	.+32     	; 0x100c <main+0xb04>
						if (dpad_u==1){bit_set(gamepad_state.digital_buttons,0x01);}
     fec:	91 e0       	ldi	r25, 0x01	; 1
     fee:	69 16       	cp	r6, r25
     ff0:	29 f4       	brne	.+10     	; 0xffc <main+0xaf4>
     ff2:	80 91 16 01 	lds	r24, 0x0116
     ff6:	81 60       	ori	r24, 0x01	; 1
     ff8:	80 93 16 01 	sts	0x0116, r24
						if (dpad_d==1){bit_set(gamepad_state.digital_buttons,0x02);}
     ffc:	21 e0       	ldi	r18, 0x01	; 1
     ffe:	72 16       	cp	r7, r18
    1000:	29 f4       	brne	.+10     	; 0x100c <main+0xb04>
    1002:	80 91 16 01 	lds	r24, 0x0116
    1006:	82 60       	ori	r24, 0x02	; 2
    1008:	80 93 16 01 	sts	0x0116, r24
					}
					if(restrict2Y==0){
    100c:	62 96       	adiw	r28, 0x12	; 18
    100e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1010:	62 97       	sbiw	r28, 0x12	; 18
    1012:	33 23       	and	r19, r19
    1014:	91 f4       	brne	.+36     	; 0x103a <main+0xb32>
						if (dpad_l==1){bit_set(gamepad_state.digital_buttons,0x04);}
    1016:	61 96       	adiw	r28, 0x11	; 17
    1018:	4f ad       	ldd	r20, Y+63	; 0x3f
    101a:	61 97       	sbiw	r28, 0x11	; 17
    101c:	41 30       	cpi	r20, 0x01	; 1
    101e:	29 f4       	brne	.+10     	; 0x102a <main+0xb22>
    1020:	80 91 16 01 	lds	r24, 0x0116
    1024:	84 60       	ori	r24, 0x04	; 4
    1026:	80 93 16 01 	sts	0x0116, r24
						if (dpad_r==1){bit_set(gamepad_state.digital_buttons,0x08);}					
    102a:	51 e0       	ldi	r21, 0x01	; 1
    102c:	45 16       	cp	r4, r21
    102e:	29 f4       	brne	.+10     	; 0x103a <main+0xb32>
    1030:	80 91 16 01 	lds	r24, 0x0116
    1034:	88 60       	ori	r24, 0x08	; 8
    1036:	80 93 16 01 	sts	0x0116, r24
* You should have received a copy of the GNU General Public License
* along with this program. If not, see <http://www.gnu.org/licenses/>.
*/ 

//A, B, X, Y
if (action==5){bit_set(gamepad_state.a,0xFF);}
    103a:	15 30       	cpi	r17, 0x05	; 5
    103c:	19 f4       	brne	.+6      	; 0x1044 <main+0xb3c>
    103e:	d0 92 18 01 	sts	0x0118, r13
    1042:	0e c0       	rjmp	.+28     	; 0x1060 <main+0xb58>
if (action==6){bit_set(gamepad_state.b,0xFF);}
    1044:	16 30       	cpi	r17, 0x06	; 6
    1046:	19 f4       	brne	.+6      	; 0x104e <main+0xb46>
    1048:	d0 92 19 01 	sts	0x0119, r13
    104c:	09 c0       	rjmp	.+18     	; 0x1060 <main+0xb58>
if (action==7){bit_set(gamepad_state.x,0xFF);}
    104e:	17 30       	cpi	r17, 0x07	; 7
    1050:	19 f4       	brne	.+6      	; 0x1058 <main+0xb50>
    1052:	d0 92 1a 01 	sts	0x011A, r13
    1056:	04 c0       	rjmp	.+8      	; 0x1060 <main+0xb58>
if (action==8){bit_set(gamepad_state.y,0xFF);}
    1058:	18 30       	cpi	r17, 0x08	; 8
    105a:	11 f4       	brne	.+4      	; 0x1060 <main+0xb58>
    105c:	d0 92 1b 01 	sts	0x011B, r13

//Autofire
if (autofire==1){
    1060:	2d 96       	adiw	r28, 0x0d	; 13
    1062:	8f ad       	ldd	r24, Y+63	; 0x3f
    1064:	2d 97       	sbiw	r28, 0x0d	; 13
    1066:	81 30       	cpi	r24, 0x01	; 1
    1068:	19 f5       	brne	.+70     	; 0x10b0 <main+0xba8>
	if(auto_toggle==1){
    106a:	2c 96       	adiw	r28, 0x0c	; 12
    106c:	9f ad       	ldd	r25, Y+63	; 0x3f
    106e:	2c 97       	sbiw	r28, 0x0c	; 12
    1070:	91 30       	cpi	r25, 0x01	; 1
    1072:	99 f4       	brne	.+38     	; 0x109a <main+0xb92>
		if (action==33){bit_set(gamepad_state.a,0xFF);}
    1074:	11 32       	cpi	r17, 0x21	; 33
    1076:	19 f4       	brne	.+6      	; 0x107e <main+0xb76>
    1078:	d0 92 18 01 	sts	0x0118, r13
    107c:	0e c0       	rjmp	.+28     	; 0x109a <main+0xb92>
		if (action==34){bit_set(gamepad_state.b,0xFF);}
    107e:	12 32       	cpi	r17, 0x22	; 34
    1080:	19 f4       	brne	.+6      	; 0x1088 <main+0xb80>
    1082:	d0 92 19 01 	sts	0x0119, r13
    1086:	09 c0       	rjmp	.+18     	; 0x109a <main+0xb92>
		if (action==35){bit_set(gamepad_state.x,0xFF);}
    1088:	13 32       	cpi	r17, 0x23	; 35
    108a:	19 f4       	brne	.+6      	; 0x1092 <main+0xb8a>
    108c:	d0 92 1a 01 	sts	0x011A, r13
    1090:	04 c0       	rjmp	.+8      	; 0x109a <main+0xb92>
		if (action==36){bit_set(gamepad_state.y,0xFF);}
    1092:	14 32       	cpi	r17, 0x24	; 36
    1094:	11 f4       	brne	.+4      	; 0x109a <main+0xb92>
    1096:	d0 92 1b 01 	sts	0x011B, r13
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	80 ea       	ldi	r24, 0xA0	; 160
    109e:	9f e0       	ldi	r25, 0x0F	; 15
    10a0:	01 97       	sbiw	r24, 0x01	; 1
    10a2:	f1 f7       	brne	.-4      	; 0x10a0 <main+0xb98>
	}
	//autofire delay
	for(auto_cnt=0;auto_cnt < setting_delay_autofire;auto_cnt++){_delay_ms(1);}
    10a4:	2f 5f       	subi	r18, 0xFF	; 255
    10a6:	2e 96       	adiw	r28, 0x0e	; 14
    10a8:	3f ad       	ldd	r19, Y+63	; 0x3f
    10aa:	2e 97       	sbiw	r28, 0x0e	; 14
    10ac:	23 17       	cp	r18, r19
    10ae:	b0 f3       	brcs	.-20     	; 0x109c <main+0xb94>
}

//Left trigger, right trigger
if (action==9){bit_set(gamepad_state.l,0xFF);}
    10b0:	19 30       	cpi	r17, 0x09	; 9
    10b2:	19 f4       	brne	.+6      	; 0x10ba <main+0xbb2>
    10b4:	d0 92 1e 01 	sts	0x011E, r13
    10b8:	28 c0       	rjmp	.+80     	; 0x110a <main+0xc02>
if (action==10){bit_set(gamepad_state.r,0xFF);}
    10ba:	1a 30       	cpi	r17, 0x0A	; 10
    10bc:	19 f4       	brne	.+6      	; 0x10c4 <main+0xbbc>
    10be:	d0 92 1f 01 	sts	0x011F, r13
    10c2:	23 c0       	rjmp	.+70     	; 0x110a <main+0xc02>

//Black, white
if (action==11){bit_set(gamepad_state.black,0xFF);}
    10c4:	1b 30       	cpi	r17, 0x0B	; 11
    10c6:	19 f4       	brne	.+6      	; 0x10ce <main+0xbc6>
    10c8:	d0 92 1c 01 	sts	0x011C, r13
    10cc:	1e c0       	rjmp	.+60     	; 0x110a <main+0xc02>
if (action==12){bit_set(gamepad_state.white,0xFF);}
    10ce:	1c 30       	cpi	r17, 0x0C	; 12
    10d0:	19 f4       	brne	.+6      	; 0x10d8 <main+0xbd0>
    10d2:	d0 92 1d 01 	sts	0x011D, r13
    10d6:	19 c0       	rjmp	.+50     	; 0x110a <main+0xc02>

//Start, back
if (action==13){bit_set(gamepad_state.digital_buttons,0x10);}
    10d8:	1d 30       	cpi	r17, 0x0D	; 13
    10da:	21 f4       	brne	.+8      	; 0x10e4 <main+0xbdc>
    10dc:	80 91 16 01 	lds	r24, 0x0116
    10e0:	80 61       	ori	r24, 0x10	; 16
    10e2:	11 c0       	rjmp	.+34     	; 0x1106 <main+0xbfe>
if (action==14){bit_set(gamepad_state.digital_buttons,0x20);}
    10e4:	1e 30       	cpi	r17, 0x0E	; 14
    10e6:	21 f4       	brne	.+8      	; 0x10f0 <main+0xbe8>
    10e8:	80 91 16 01 	lds	r24, 0x0116
    10ec:	80 62       	ori	r24, 0x20	; 32
    10ee:	0b c0       	rjmp	.+22     	; 0x1106 <main+0xbfe>

//Left thumb, Right thumb
if (action==15){bit_set(gamepad_state.digital_buttons,XBOX_LEFT_STICK);}
    10f0:	1f 30       	cpi	r17, 0x0F	; 15
    10f2:	21 f4       	brne	.+8      	; 0x10fc <main+0xbf4>
    10f4:	80 91 16 01 	lds	r24, 0x0116
    10f8:	80 64       	ori	r24, 0x40	; 64
    10fa:	05 c0       	rjmp	.+10     	; 0x1106 <main+0xbfe>
if (action==16){bit_set(gamepad_state.digital_buttons,XBOX_RIGHT_STICK);}
    10fc:	10 31       	cpi	r17, 0x10	; 16
    10fe:	29 f4       	brne	.+10     	; 0x110a <main+0xc02>
    1100:	80 91 16 01 	lds	r24, 0x0116
    1104:	80 68       	ori	r24, 0x80	; 128
    1106:	80 93 16 01 	sts	0x0116, r24

//Left analog stick
if (action==(17+invert)){gamepad_state.l_y=32767;}
    110a:	81 2f       	mov	r24, r17
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	68 96       	adiw	r28, 0x18	; 24
    1110:	4e ad       	ldd	r20, Y+62	; 0x3e
    1112:	5f ad       	ldd	r21, Y+63	; 0x3f
    1114:	68 97       	sbiw	r28, 0x18	; 24
    1116:	84 17       	cp	r24, r20
    1118:	95 07       	cpc	r25, r21
    111a:	21 f4       	brne	.+8      	; 0x1124 <main+0xc1c>
    111c:	90 92 23 01 	sts	0x0123, r9
    1120:	80 92 22 01 	sts	0x0122, r8
if (action==(18-invert)){gamepad_state.l_y=-32768;}
    1124:	6a 96       	adiw	r28, 0x1a	; 26
    1126:	2e ad       	ldd	r18, Y+62	; 0x3e
    1128:	3f ad       	ldd	r19, Y+63	; 0x3f
    112a:	6a 97       	sbiw	r28, 0x1a	; 26
    112c:	82 17       	cp	r24, r18
    112e:	93 07       	cpc	r25, r19
    1130:	21 f4       	brne	.+8      	; 0x113a <main+0xc32>
    1132:	b0 92 23 01 	sts	0x0123, r11
    1136:	a0 92 22 01 	sts	0x0122, r10
if (action==19){gamepad_state.l_x=-32768;}
    113a:	13 31       	cpi	r17, 0x13	; 19
    113c:	29 f4       	brne	.+10     	; 0x1148 <main+0xc40>
    113e:	b0 92 21 01 	sts	0x0121, r11
    1142:	a0 92 20 01 	sts	0x0120, r10
    1146:	06 c0       	rjmp	.+12     	; 0x1154 <main+0xc4c>
if (action==20){gamepad_state.l_x=32767;}
    1148:	14 31       	cpi	r17, 0x14	; 20
    114a:	21 f4       	brne	.+8      	; 0x1154 <main+0xc4c>
    114c:	90 92 21 01 	sts	0x0121, r9
    1150:	80 92 20 01 	sts	0x0120, r8

//Right analog stick
if (action==(21+invert)){gamepad_state.r_y=32767;}
    1154:	6c 96       	adiw	r28, 0x1c	; 28
    1156:	4e ad       	ldd	r20, Y+62	; 0x3e
    1158:	5f ad       	ldd	r21, Y+63	; 0x3f
    115a:	6c 97       	sbiw	r28, 0x1c	; 28
    115c:	84 17       	cp	r24, r20
    115e:	95 07       	cpc	r25, r21
    1160:	21 f4       	brne	.+8      	; 0x116a <main+0xc62>
    1162:	90 92 27 01 	sts	0x0127, r9
    1166:	80 92 26 01 	sts	0x0126, r8
if (action==(22-invert)){gamepad_state.r_y=-32768;}
    116a:	6e 96       	adiw	r28, 0x1e	; 30
    116c:	2e ad       	ldd	r18, Y+62	; 0x3e
    116e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1170:	6e 97       	sbiw	r28, 0x1e	; 30
    1172:	82 17       	cp	r24, r18
    1174:	93 07       	cpc	r25, r19
    1176:	21 f4       	brne	.+8      	; 0x1180 <main+0xc78>
    1178:	b0 92 27 01 	sts	0x0127, r11
    117c:	a0 92 26 01 	sts	0x0126, r10
if (action==23){gamepad_state.r_x=-32768;}
    1180:	17 31       	cpi	r17, 0x17	; 23
    1182:	29 f4       	brne	.+10     	; 0x118e <main+0xc86>
    1184:	b0 92 25 01 	sts	0x0125, r11
    1188:	a0 92 24 01 	sts	0x0124, r10
    118c:	11 c0       	rjmp	.+34     	; 0x11b0 <main+0xca8>
if (action==24){gamepad_state.r_x=32767;}
    118e:	18 31       	cpi	r17, 0x18	; 24
    1190:	29 f4       	brne	.+10     	; 0x119c <main+0xc94>
    1192:	90 92 25 01 	sts	0x0125, r9
    1196:	80 92 24 01 	sts	0x0124, r8
    119a:	0a c0       	rjmp	.+20     	; 0x11b0 <main+0xca8>

//Exit to dash
if (action==26){
    119c:	1a 31       	cpi	r17, 0x1A	; 26
    119e:	41 f4       	brne	.+16     	; 0x11b0 <main+0xca8>
	bit_set(gamepad_state.l,0xFF);
    11a0:	d0 92 1e 01 	sts	0x011E, r13
	bit_set(gamepad_state.r,0xFF);
    11a4:	d0 92 1f 01 	sts	0x011F, r13
	bit_set(gamepad_state.black,0xFF);
    11a8:	d0 92 1c 01 	sts	0x011C, r13
	bit_set(gamepad_state.white,0xFF);
    11ac:	d0 92 1d 01 	sts	0x011D, r13
		bit_clear(gamepad_state.digital_buttons,0x20);						
	}
}

//Exit game
if (action==25){
    11b0:	19 31       	cpi	r17, 0x19	; 25
    11b2:	21 f4       	brne	.+8      	; 0x11bc <main+0xcb4>
	bit_set(gamepad_state.digital_buttons,0x10);
    11b4:	80 91 16 01 	lds	r24, 0x0116
	bit_set(gamepad_state.digital_buttons,0x20);
    11b8:	80 63       	ori	r24, 0x30	; 48
    11ba:	3d c0       	rjmp	.+122    	; 0x1236 <main+0xd2e>
}

//Enter programming mode
if (action==37){
    11bc:	15 32       	cpi	r17, 0x25	; 37
    11be:	11 f4       	brne	.+4      	; 0x11c4 <main+0xcbc>
	Jump_To_Bootloader();
    11c0:	7f d9       	rcall	.-3330   	; 0x4c0 <Jump_To_Bootloader>
    11c2:	51 c0       	rjmp	.+162    	; 0x1266 <main+0xd5e>
}


//Advanced Combos-----------------------------------------
//Combo [A] Back+White
if (action==38){
    11c4:	16 32       	cpi	r17, 0x26	; 38
    11c6:	41 f4       	brne	.+16     	; 0x11d8 <main+0xcd0>
	bit_set(gamepad_state.digital_buttons,0x20);
    11c8:	80 91 16 01 	lds	r24, 0x0116
    11cc:	80 62       	ori	r24, 0x20	; 32
    11ce:	80 93 16 01 	sts	0x0116, r24
	bit_set(gamepad_state.white,0xFF);
    11d2:	d0 92 1d 01 	sts	0x011D, r13
    11d6:	47 c0       	rjmp	.+142    	; 0x1266 <main+0xd5e>
}

//Combo [B] Back+Black
if (action==39){
    11d8:	17 32       	cpi	r17, 0x27	; 39
    11da:	41 f4       	brne	.+16     	; 0x11ec <main+0xce4>
	bit_set(gamepad_state.digital_buttons,0x20);
    11dc:	80 91 16 01 	lds	r24, 0x0116
    11e0:	80 62       	ori	r24, 0x20	; 32
    11e2:	80 93 16 01 	sts	0x0116, r24
	bit_set(gamepad_state.black,0xFF);
    11e6:	d0 92 1c 01 	sts	0x011C, r13
    11ea:	3d c0       	rjmp	.+122    	; 0x1266 <main+0xd5e>
}

//Combo [C] Back+LT+RT
if (action==40){
    11ec:	18 32       	cpi	r17, 0x28	; 40
    11ee:	51 f4       	brne	.+20     	; 0x1204 <main+0xcfc>
	bit_set(gamepad_state.digital_buttons,0x20);
    11f0:	80 91 16 01 	lds	r24, 0x0116
    11f4:	80 62       	ori	r24, 0x20	; 32
    11f6:	80 93 16 01 	sts	0x0116, r24
	bit_set(gamepad_state.l,0xFF);
    11fa:	d0 92 1e 01 	sts	0x011E, r13
	bit_set(gamepad_state.r,0xFF);
    11fe:	d0 92 1f 01 	sts	0x011F, r13
    1202:	31 c0       	rjmp	.+98     	; 0x1266 <main+0xd5e>
}

//Combo [D] Back+RTh
if (action==41){
    1204:	19 32       	cpi	r17, 0x29	; 41
    1206:	19 f4       	brne	.+6      	; 0x120e <main+0xd06>
	bit_set(gamepad_state.digital_buttons,0x20);
    1208:	80 91 16 01 	lds	r24, 0x0116
    120c:	0d c0       	rjmp	.+26     	; 0x1228 <main+0xd20>
	bit_set(gamepad_state.digital_buttons,XBOX_RIGHT_STICK);
}

//Combo [E] Back+RT+RTh
if (action==42){
    120e:	1a 32       	cpi	r17, 0x2A	; 42
    1210:	29 f4       	brne	.+10     	; 0x121c <main+0xd14>
	bit_set(gamepad_state.digital_buttons,0x20);
    1212:	80 91 16 01 	lds	r24, 0x0116
	bit_set(gamepad_state.r,0xFF);						
    1216:	d0 92 1f 01 	sts	0x011F, r13
    121a:	06 c0       	rjmp	.+12     	; 0x1228 <main+0xd20>
	bit_set(gamepad_state.digital_buttons,XBOX_RIGHT_STICK);
}

//Combo [F] Back+LT+RTh
if (action==43){
    121c:	1b 32       	cpi	r17, 0x2B	; 43
    121e:	31 f4       	brne	.+12     	; 0x122c <main+0xd24>
	bit_set(gamepad_state.digital_buttons,0x20);
    1220:	80 91 16 01 	lds	r24, 0x0116
	bit_set(gamepad_state.l,0xFF);
    1224:	d0 92 1e 01 	sts	0x011E, r13
	bit_set(gamepad_state.digital_buttons,XBOX_RIGHT_STICK);
    1228:	80 6a       	ori	r24, 0xA0	; 160
    122a:	05 c0       	rjmp	.+10     	; 0x1236 <main+0xd2e>
}

//Combo [G] Back+LTh
if (action==44){
    122c:	1c 32       	cpi	r17, 0x2C	; 44
    122e:	31 f4       	brne	.+12     	; 0x123c <main+0xd34>
	bit_set(gamepad_state.digital_buttons,0x20);
    1230:	80 91 16 01 	lds	r24, 0x0116
	bit_set(gamepad_state.digital_buttons,XBOX_LEFT_STICK);
    1234:	80 66       	ori	r24, 0x60	; 96
    1236:	80 93 16 01 	sts	0x0116, r24
    123a:	15 c0       	rjmp	.+42     	; 0x1266 <main+0xd5e>
}

//Combo [H] Back+A+B
if (action==45){
    123c:	1d 32       	cpi	r17, 0x2D	; 45
    123e:	41 f4       	brne	.+16     	; 0x1250 <main+0xd48>
	bit_set(gamepad_state.digital_buttons,0x20);
    1240:	80 91 16 01 	lds	r24, 0x0116
    1244:	80 62       	ori	r24, 0x20	; 32
    1246:	80 93 16 01 	sts	0x0116, r24
	bit_set(gamepad_state.a,0xFF);
    124a:	d0 92 18 01 	sts	0x0118, r13
    124e:	09 c0       	rjmp	.+18     	; 0x1262 <main+0xd5a>
	bit_set(gamepad_state.b,0xFF);
}

//Combo [I] Back+Black+B
if (action==46){
    1250:	1e 32       	cpi	r17, 0x2E	; 46
    1252:	49 f4       	brne	.+18     	; 0x1266 <main+0xd5e>
	bit_set(gamepad_state.digital_buttons,0x20);
    1254:	80 91 16 01 	lds	r24, 0x0116
    1258:	80 62       	ori	r24, 0x20	; 32
    125a:	80 93 16 01 	sts	0x0116, r24
	bit_set(gamepad_state.black,0xFF);
    125e:	d0 92 1c 01 	sts	0x011C, r13
	bit_set(gamepad_state.b,0xFF);
    1262:	d0 92 19 01 	sts	0x0119, r13
    1266:	08 94       	sec
    1268:	e1 1c       	adc	r14, r1
    126a:	f1 1c       	adc	r15, r1
			}
		
		}

		//loop through pins checking for inputs from those that are assigned a function
		for(cnt=0;cnt<20;cnt++) {
    126c:	34 e1       	ldi	r19, 0x14	; 20
    126e:	e3 16       	cp	r14, r19
    1270:	f1 04       	cpc	r15, r1
    1272:	09 f0       	breq	.+2      	; 0x1276 <main+0xd6e>
    1274:	9d ce       	rjmp	.-710    	; 0xfb0 <main+0xaa8>
				}
			}			
		}
		
		//Trackball Buttons
		if (setting_enable_tb1==1){
    1276:	29 96       	adiw	r28, 0x09	; 9
    1278:	4f ad       	ldd	r20, Y+63	; 0x3f
    127a:	29 97       	sbiw	r28, 0x09	; 9
    127c:	41 30       	cpi	r20, 0x01	; 1
    127e:	09 f0       	breq	.+2      	; 0x1282 <main+0xd7a>
    1280:	75 c1       	rjmp	.+746    	; 0x156c <main+0x1064>
    1282:	cc 24       	eor	r12, r12
//Left thumb, Right thumb
if (action==15){bit_set(gamepad_state.digital_buttons,XBOX_LEFT_STICK);}
if (action==16){bit_set(gamepad_state.digital_buttons,XBOX_RIGHT_STICK);}

//Left analog stick
if (action==(17+invert)){gamepad_state.l_y=32767;}
    1284:	2a 96       	adiw	r28, 0x0a	; 10
    1286:	5f ad       	ldd	r21, Y+63	; 0x3f
    1288:	2a 97       	sbiw	r28, 0x0a	; 10
    128a:	85 2f       	mov	r24, r21
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	9c 01       	movw	r18, r24
    1290:	2f 5e       	subi	r18, 0xEF	; 239
    1292:	3f 4f       	sbci	r19, 0xFF	; 255
    1294:	64 96       	adiw	r28, 0x14	; 20
    1296:	3f af       	std	Y+63, r19	; 0x3f
    1298:	2e af       	std	Y+62, r18	; 0x3e
    129a:	64 97       	sbiw	r28, 0x14	; 20
if (action==(18-invert)){gamepad_state.l_y=-32768;}
    129c:	42 e1       	ldi	r20, 0x12	; 18
    129e:	50 e0       	ldi	r21, 0x00	; 0
    12a0:	48 1b       	sub	r20, r24
    12a2:	59 0b       	sbc	r21, r25
    12a4:	66 96       	adiw	r28, 0x16	; 22
    12a6:	5f af       	std	Y+63, r21	; 0x3f
    12a8:	4e af       	std	Y+62, r20	; 0x3e
    12aa:	66 97       	sbiw	r28, 0x16	; 22
if (action==19){gamepad_state.l_x=-32768;}
if (action==20){gamepad_state.l_x=32767;}

//Right analog stick
if (action==(21+invert)){gamepad_state.r_y=32767;}
    12ac:	35 e1       	ldi	r19, 0x15	; 21
    12ae:	63 2e       	mov	r6, r19
    12b0:	71 2c       	mov	r7, r1
    12b2:	68 0e       	add	r6, r24
    12b4:	79 1e       	adc	r7, r25
if (action==(22-invert)){gamepad_state.r_y=-32768;}
    12b6:	26 e1       	ldi	r18, 0x16	; 22
    12b8:	82 2e       	mov	r8, r18
    12ba:	91 2c       	mov	r9, r1
    12bc:	88 1a       	sub	r8, r24
    12be:	99 0a       	sbc	r9, r25
if (action==23){gamepad_state.r_x=-32768;}
if (action==24){gamepad_state.r_x=32767;}
    12c0:	9f ef       	ldi	r25, 0xFF	; 255
    12c2:	a9 2e       	mov	r10, r25
    12c4:	9f e7       	ldi	r25, 0x7F	; 127
    12c6:	b9 2e       	mov	r11, r25
if (action==20){gamepad_state.l_x=32767;}

//Right analog stick
if (action==(21+invert)){gamepad_state.r_y=32767;}
if (action==(22-invert)){gamepad_state.r_y=-32768;}
if (action==23){gamepad_state.r_x=-32768;}
    12c8:	e1 2c       	mov	r14, r1
    12ca:	80 e8       	ldi	r24, 0x80	; 128
    12cc:	f8 2e       	mov	r15, r24
			for(pos=0;pos<3;pos++) {
				if (shift==1){
    12ce:	5e ad       	ldd	r21, Y+62	; 0x3e
    12d0:	51 30       	cpi	r21, 0x01	; 1
    12d2:	91 f4       	brne	.+36     	; 0x12f8 <main+0xdf0>
					if (pos==0){action = setting_tb1_but1s;}
    12d4:	cc 20       	and	r12, r12
    12d6:	21 f4       	brne	.+8      	; 0x12e0 <main+0xdd8>
    12d8:	22 96       	adiw	r28, 0x02	; 2
    12da:	1f ad       	ldd	r17, Y+63	; 0x3f
    12dc:	22 97       	sbiw	r28, 0x02	; 2
    12de:	1f c0       	rjmp	.+62     	; 0x131e <main+0xe16>
					if (pos==1){action = setting_tb1_but2s;}
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	c8 16       	cp	r12, r24
    12e4:	21 f4       	brne	.+8      	; 0x12ee <main+0xde6>
    12e6:	21 96       	adiw	r28, 0x01	; 1
    12e8:	1f ad       	ldd	r17, Y+63	; 0x3f
    12ea:	21 97       	sbiw	r28, 0x01	; 1
    12ec:	18 c0       	rjmp	.+48     	; 0x131e <main+0xe16>
					if (pos==2){action = setting_tb1_but3s;}
    12ee:	92 e0       	ldi	r25, 0x02	; 2
    12f0:	c9 16       	cp	r12, r25
    12f2:	a9 f4       	brne	.+42     	; 0x131e <main+0xe16>
    12f4:	1f ad       	ldd	r17, Y+63	; 0x3f
    12f6:	13 c0       	rjmp	.+38     	; 0x131e <main+0xe16>
				} else {
					if (pos==0){action = setting_tb1_but1;}
    12f8:	cc 20       	and	r12, r12
    12fa:	21 f4       	brne	.+8      	; 0x1304 <main+0xdfc>
    12fc:	25 96       	adiw	r28, 0x05	; 5
    12fe:	1f ad       	ldd	r17, Y+63	; 0x3f
    1300:	25 97       	sbiw	r28, 0x05	; 5
    1302:	0d c0       	rjmp	.+26     	; 0x131e <main+0xe16>
					if (pos==1){action = setting_tb1_but2;}
    1304:	21 e0       	ldi	r18, 0x01	; 1
    1306:	c2 16       	cp	r12, r18
    1308:	21 f4       	brne	.+8      	; 0x1312 <main+0xe0a>
    130a:	24 96       	adiw	r28, 0x04	; 4
    130c:	1f ad       	ldd	r17, Y+63	; 0x3f
    130e:	24 97       	sbiw	r28, 0x04	; 4
    1310:	06 c0       	rjmp	.+12     	; 0x131e <main+0xe16>
					if (pos==2){action = setting_tb1_but3;}
    1312:	32 e0       	ldi	r19, 0x02	; 2
    1314:	c3 16       	cp	r12, r19
    1316:	19 f4       	brne	.+6      	; 0x131e <main+0xe16>
    1318:	23 96       	adiw	r28, 0x03	; 3
    131a:	1f ad       	ldd	r17, Y+63	; 0x3f
    131c:	23 97       	sbiw	r28, 0x03	; 3
				}
			
				if (action > 0) {
    131e:	11 23       	and	r17, r17
    1320:	09 f4       	brne	.+2      	; 0x1324 <main+0xe1c>
    1322:	1f c1       	rjmp	.+574    	; 0x1562 <main+0x105a>
					if (((0b00000001 & ps2data[0])&&(pos==0))||((0b00000010 & ps2data[0])&&(pos==1))||((0b00000100 & ps2data[0])&&(pos==2))){
    1324:	80 91 11 01 	lds	r24, 0x0111
    1328:	80 ff       	sbrs	r24, 0
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <main+0xe28>
    132c:	cc 20       	and	r12, r12
    132e:	59 f0       	breq	.+22     	; 0x1346 <main+0xe3e>
    1330:	81 ff       	sbrs	r24, 1
    1332:	03 c0       	rjmp	.+6      	; 0x133a <main+0xe32>
    1334:	41 e0       	ldi	r20, 0x01	; 1
    1336:	c4 16       	cp	r12, r20
    1338:	31 f0       	breq	.+12     	; 0x1346 <main+0xe3e>
    133a:	82 ff       	sbrs	r24, 2
    133c:	12 c1       	rjmp	.+548    	; 0x1562 <main+0x105a>
    133e:	52 e0       	ldi	r21, 0x02	; 2
    1340:	c5 16       	cp	r12, r21
    1342:	09 f0       	breq	.+2      	; 0x1346 <main+0xe3e>
    1344:	0e c1       	rjmp	.+540    	; 0x1562 <main+0x105a>
* You should have received a copy of the GNU General Public License
* along with this program. If not, see <http://www.gnu.org/licenses/>.
*/ 

//A, B, X, Y
if (action==5){bit_set(gamepad_state.a,0xFF);}
    1346:	15 30       	cpi	r17, 0x05	; 5
    1348:	19 f4       	brne	.+6      	; 0x1350 <main+0xe48>
    134a:	d0 92 18 01 	sts	0x0118, r13
    134e:	0e c0       	rjmp	.+28     	; 0x136c <main+0xe64>
if (action==6){bit_set(gamepad_state.b,0xFF);}
    1350:	16 30       	cpi	r17, 0x06	; 6
    1352:	19 f4       	brne	.+6      	; 0x135a <main+0xe52>
    1354:	d0 92 19 01 	sts	0x0119, r13
    1358:	09 c0       	rjmp	.+18     	; 0x136c <main+0xe64>
if (action==7){bit_set(gamepad_state.x,0xFF);}
    135a:	17 30       	cpi	r17, 0x07	; 7
    135c:	19 f4       	brne	.+6      	; 0x1364 <main+0xe5c>
    135e:	d0 92 1a 01 	sts	0x011A, r13
    1362:	04 c0       	rjmp	.+8      	; 0x136c <main+0xe64>
if (action==8){bit_set(gamepad_state.y,0xFF);}
    1364:	18 30       	cpi	r17, 0x08	; 8
    1366:	11 f4       	brne	.+4      	; 0x136c <main+0xe64>
    1368:	d0 92 1b 01 	sts	0x011B, r13

//Autofire
if (autofire==1){
    136c:	2d 96       	adiw	r28, 0x0d	; 13
    136e:	8f ad       	ldd	r24, Y+63	; 0x3f
    1370:	2d 97       	sbiw	r28, 0x0d	; 13
    1372:	81 30       	cpi	r24, 0x01	; 1
    1374:	19 f5       	brne	.+70     	; 0x13bc <main+0xeb4>
	if(auto_toggle==1){
    1376:	2c 96       	adiw	r28, 0x0c	; 12
    1378:	9f ad       	ldd	r25, Y+63	; 0x3f
    137a:	2c 97       	sbiw	r28, 0x0c	; 12
    137c:	91 30       	cpi	r25, 0x01	; 1
    137e:	99 f4       	brne	.+38     	; 0x13a6 <main+0xe9e>
		if (action==33){bit_set(gamepad_state.a,0xFF);}
    1380:	11 32       	cpi	r17, 0x21	; 33
    1382:	19 f4       	brne	.+6      	; 0x138a <main+0xe82>
    1384:	d0 92 18 01 	sts	0x0118, r13
    1388:	0e c0       	rjmp	.+28     	; 0x13a6 <main+0xe9e>
		if (action==34){bit_set(gamepad_state.b,0xFF);}
    138a:	12 32       	cpi	r17, 0x22	; 34
    138c:	19 f4       	brne	.+6      	; 0x1394 <main+0xe8c>
    138e:	d0 92 19 01 	sts	0x0119, r13
    1392:	09 c0       	rjmp	.+18     	; 0x13a6 <main+0xe9e>
		if (action==35){bit_set(gamepad_state.x,0xFF);}
    1394:	13 32       	cpi	r17, 0x23	; 35
    1396:	19 f4       	brne	.+6      	; 0x139e <main+0xe96>
    1398:	d0 92 1a 01 	sts	0x011A, r13
    139c:	04 c0       	rjmp	.+8      	; 0x13a6 <main+0xe9e>
		if (action==36){bit_set(gamepad_state.y,0xFF);}
    139e:	14 32       	cpi	r17, 0x24	; 36
    13a0:	11 f4       	brne	.+4      	; 0x13a6 <main+0xe9e>
    13a2:	d0 92 1b 01 	sts	0x011B, r13
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	80 ea       	ldi	r24, 0xA0	; 160
    13aa:	9f e0       	ldi	r25, 0x0F	; 15
    13ac:	01 97       	sbiw	r24, 0x01	; 1
    13ae:	f1 f7       	brne	.-4      	; 0x13ac <main+0xea4>
	}
	//autofire delay
	for(auto_cnt=0;auto_cnt < setting_delay_autofire;auto_cnt++){_delay_ms(1);}
    13b0:	2f 5f       	subi	r18, 0xFF	; 255
    13b2:	2e 96       	adiw	r28, 0x0e	; 14
    13b4:	3f ad       	ldd	r19, Y+63	; 0x3f
    13b6:	2e 97       	sbiw	r28, 0x0e	; 14
    13b8:	23 17       	cp	r18, r19
    13ba:	b0 f3       	brcs	.-20     	; 0x13a8 <main+0xea0>
}

//Left trigger, right trigger
if (action==9){bit_set(gamepad_state.l,0xFF);}
    13bc:	19 30       	cpi	r17, 0x09	; 9
    13be:	19 f4       	brne	.+6      	; 0x13c6 <main+0xebe>
    13c0:	d0 92 1e 01 	sts	0x011E, r13
    13c4:	28 c0       	rjmp	.+80     	; 0x1416 <main+0xf0e>
if (action==10){bit_set(gamepad_state.r,0xFF);}
    13c6:	1a 30       	cpi	r17, 0x0A	; 10
    13c8:	19 f4       	brne	.+6      	; 0x13d0 <main+0xec8>
    13ca:	d0 92 1f 01 	sts	0x011F, r13
    13ce:	23 c0       	rjmp	.+70     	; 0x1416 <main+0xf0e>

//Black, white
if (action==11){bit_set(gamepad_state.black,0xFF);}
    13d0:	1b 30       	cpi	r17, 0x0B	; 11
    13d2:	19 f4       	brne	.+6      	; 0x13da <main+0xed2>
    13d4:	d0 92 1c 01 	sts	0x011C, r13
    13d8:	1e c0       	rjmp	.+60     	; 0x1416 <main+0xf0e>
if (action==12){bit_set(gamepad_state.white,0xFF);}
    13da:	1c 30       	cpi	r17, 0x0C	; 12
    13dc:	19 f4       	brne	.+6      	; 0x13e4 <main+0xedc>
    13de:	d0 92 1d 01 	sts	0x011D, r13
    13e2:	19 c0       	rjmp	.+50     	; 0x1416 <main+0xf0e>

//Start, back
if (action==13){bit_set(gamepad_state.digital_buttons,0x10);}
    13e4:	1d 30       	cpi	r17, 0x0D	; 13
    13e6:	21 f4       	brne	.+8      	; 0x13f0 <main+0xee8>
    13e8:	80 91 16 01 	lds	r24, 0x0116
    13ec:	80 61       	ori	r24, 0x10	; 16
    13ee:	11 c0       	rjmp	.+34     	; 0x1412 <main+0xf0a>
if (action==14){bit_set(gamepad_state.digital_buttons,0x20);}
    13f0:	1e 30       	cpi	r17, 0x0E	; 14
    13f2:	21 f4       	brne	.+8      	; 0x13fc <main+0xef4>
    13f4:	80 91 16 01 	lds	r24, 0x0116
    13f8:	80 62       	ori	r24, 0x20	; 32
    13fa:	0b c0       	rjmp	.+22     	; 0x1412 <main+0xf0a>

//Left thumb, Right thumb
if (action==15){bit_set(gamepad_state.digital_buttons,XBOX_LEFT_STICK);}
    13fc:	1f 30       	cpi	r17, 0x0F	; 15
    13fe:	21 f4       	brne	.+8      	; 0x1408 <main+0xf00>
    1400:	80 91 16 01 	lds	r24, 0x0116
    1404:	80 64       	ori	r24, 0x40	; 64
    1406:	05 c0       	rjmp	.+10     	; 0x1412 <main+0xf0a>
if (action==16){bit_set(gamepad_state.digital_buttons,XBOX_RIGHT_STICK);}
    1408:	10 31       	cpi	r17, 0x10	; 16
    140a:	29 f4       	brne	.+10     	; 0x1416 <main+0xf0e>
    140c:	80 91 16 01 	lds	r24, 0x0116
    1410:	80 68       	ori	r24, 0x80	; 128
    1412:	80 93 16 01 	sts	0x0116, r24

//Left analog stick
if (action==(17+invert)){gamepad_state.l_y=32767;}
    1416:	81 2f       	mov	r24, r17
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	64 96       	adiw	r28, 0x14	; 20
    141c:	4e ad       	ldd	r20, Y+62	; 0x3e
    141e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1420:	64 97       	sbiw	r28, 0x14	; 20
    1422:	84 17       	cp	r24, r20
    1424:	95 07       	cpc	r25, r21
    1426:	21 f4       	brne	.+8      	; 0x1430 <main+0xf28>
    1428:	b0 92 23 01 	sts	0x0123, r11
    142c:	a0 92 22 01 	sts	0x0122, r10
if (action==(18-invert)){gamepad_state.l_y=-32768;}
    1430:	66 96       	adiw	r28, 0x16	; 22
    1432:	2e ad       	ldd	r18, Y+62	; 0x3e
    1434:	3f ad       	ldd	r19, Y+63	; 0x3f
    1436:	66 97       	sbiw	r28, 0x16	; 22
    1438:	82 17       	cp	r24, r18
    143a:	93 07       	cpc	r25, r19
    143c:	21 f4       	brne	.+8      	; 0x1446 <main+0xf3e>
    143e:	f0 92 23 01 	sts	0x0123, r15
    1442:	e0 92 22 01 	sts	0x0122, r14
if (action==19){gamepad_state.l_x=-32768;}
    1446:	13 31       	cpi	r17, 0x13	; 19
    1448:	29 f4       	brne	.+10     	; 0x1454 <main+0xf4c>
    144a:	f0 92 21 01 	sts	0x0121, r15
    144e:	e0 92 20 01 	sts	0x0120, r14
    1452:	06 c0       	rjmp	.+12     	; 0x1460 <main+0xf58>
if (action==20){gamepad_state.l_x=32767;}
    1454:	14 31       	cpi	r17, 0x14	; 20
    1456:	21 f4       	brne	.+8      	; 0x1460 <main+0xf58>
    1458:	b0 92 21 01 	sts	0x0121, r11
    145c:	a0 92 20 01 	sts	0x0120, r10

//Right analog stick
if (action==(21+invert)){gamepad_state.r_y=32767;}
    1460:	86 15       	cp	r24, r6
    1462:	97 05       	cpc	r25, r7
    1464:	21 f4       	brne	.+8      	; 0x146e <main+0xf66>
    1466:	b0 92 27 01 	sts	0x0127, r11
    146a:	a0 92 26 01 	sts	0x0126, r10
if (action==(22-invert)){gamepad_state.r_y=-32768;}
    146e:	88 15       	cp	r24, r8
    1470:	99 05       	cpc	r25, r9
    1472:	21 f4       	brne	.+8      	; 0x147c <main+0xf74>
    1474:	f0 92 27 01 	sts	0x0127, r15
    1478:	e0 92 26 01 	sts	0x0126, r14
if (action==23){gamepad_state.r_x=-32768;}
    147c:	17 31       	cpi	r17, 0x17	; 23
    147e:	29 f4       	brne	.+10     	; 0x148a <main+0xf82>
    1480:	f0 92 25 01 	sts	0x0125, r15
    1484:	e0 92 24 01 	sts	0x0124, r14
    1488:	11 c0       	rjmp	.+34     	; 0x14ac <main+0xfa4>
if (action==24){gamepad_state.r_x=32767;}
    148a:	18 31       	cpi	r17, 0x18	; 24
    148c:	29 f4       	brne	.+10     	; 0x1498 <main+0xf90>
    148e:	b0 92 25 01 	sts	0x0125, r11
    1492:	a0 92 24 01 	sts	0x0124, r10
    1496:	0a c0       	rjmp	.+20     	; 0x14ac <main+0xfa4>

//Exit to dash
if (action==26){
    1498:	1a 31       	cpi	r17, 0x1A	; 26
    149a:	41 f4       	brne	.+16     	; 0x14ac <main+0xfa4>
	bit_set(gamepad_state.l,0xFF);
    149c:	d0 92 1e 01 	sts	0x011E, r13
	bit_set(gamepad_state.r,0xFF);
    14a0:	d0 92 1f 01 	sts	0x011F, r13
	bit_set(gamepad_state.black,0xFF);
    14a4:	d0 92 1c 01 	sts	0x011C, r13
	bit_set(gamepad_state.white,0xFF);
    14a8:	d0 92 1d 01 	sts	0x011D, r13
		bit_clear(gamepad_state.digital_buttons,0x20);						
	}
}

//Exit game
if (action==25){
    14ac:	19 31       	cpi	r17, 0x19	; 25
    14ae:	21 f4       	brne	.+8      	; 0x14b8 <main+0xfb0>
	bit_set(gamepad_state.digital_buttons,0x10);
    14b0:	80 91 16 01 	lds	r24, 0x0116
	bit_set(gamepad_state.digital_buttons,0x20);
    14b4:	80 63       	ori	r24, 0x30	; 48
    14b6:	3d c0       	rjmp	.+122    	; 0x1532 <main+0x102a>
}

//Enter programming mode
if (action==37){
    14b8:	15 32       	cpi	r17, 0x25	; 37
    14ba:	11 f4       	brne	.+4      	; 0x14c0 <main+0xfb8>
	Jump_To_Bootloader();
    14bc:	01 d8       	rcall	.-4094   	; 0x4c0 <Jump_To_Bootloader>
    14be:	51 c0       	rjmp	.+162    	; 0x1562 <main+0x105a>
}


//Advanced Combos-----------------------------------------
//Combo [A] Back+White
if (action==38){
    14c0:	16 32       	cpi	r17, 0x26	; 38
    14c2:	41 f4       	brne	.+16     	; 0x14d4 <main+0xfcc>
	bit_set(gamepad_state.digital_buttons,0x20);
    14c4:	80 91 16 01 	lds	r24, 0x0116
    14c8:	80 62       	ori	r24, 0x20	; 32
    14ca:	80 93 16 01 	sts	0x0116, r24
	bit_set(gamepad_state.white,0xFF);
    14ce:	d0 92 1d 01 	sts	0x011D, r13
    14d2:	47 c0       	rjmp	.+142    	; 0x1562 <main+0x105a>
}

//Combo [B] Back+Black
if (action==39){
    14d4:	17 32       	cpi	r17, 0x27	; 39
    14d6:	41 f4       	brne	.+16     	; 0x14e8 <main+0xfe0>
	bit_set(gamepad_state.digital_buttons,0x20);
    14d8:	80 91 16 01 	lds	r24, 0x0116
    14dc:	80 62       	ori	r24, 0x20	; 32
    14de:	80 93 16 01 	sts	0x0116, r24
	bit_set(gamepad_state.black,0xFF);
    14e2:	d0 92 1c 01 	sts	0x011C, r13
    14e6:	3d c0       	rjmp	.+122    	; 0x1562 <main+0x105a>
}

//Combo [C] Back+LT+RT
if (action==40){
    14e8:	18 32       	cpi	r17, 0x28	; 40
    14ea:	51 f4       	brne	.+20     	; 0x1500 <main+0xff8>
	bit_set(gamepad_state.digital_buttons,0x20);
    14ec:	80 91 16 01 	lds	r24, 0x0116
    14f0:	80 62       	ori	r24, 0x20	; 32
    14f2:	80 93 16 01 	sts	0x0116, r24
	bit_set(gamepad_state.l,0xFF);
    14f6:	d0 92 1e 01 	sts	0x011E, r13
	bit_set(gamepad_state.r,0xFF);
    14fa:	d0 92 1f 01 	sts	0x011F, r13
    14fe:	31 c0       	rjmp	.+98     	; 0x1562 <main+0x105a>
}

//Combo [D] Back+RTh
if (action==41){
    1500:	19 32       	cpi	r17, 0x29	; 41
    1502:	19 f4       	brne	.+6      	; 0x150a <main+0x1002>
	bit_set(gamepad_state.digital_buttons,0x20);
    1504:	80 91 16 01 	lds	r24, 0x0116
    1508:	0d c0       	rjmp	.+26     	; 0x1524 <main+0x101c>
	bit_set(gamepad_state.digital_buttons,XBOX_RIGHT_STICK);
}

//Combo [E] Back+RT+RTh
if (action==42){
    150a:	1a 32       	cpi	r17, 0x2A	; 42
    150c:	29 f4       	brne	.+10     	; 0x1518 <main+0x1010>
	bit_set(gamepad_state.digital_buttons,0x20);
    150e:	80 91 16 01 	lds	r24, 0x0116
	bit_set(gamepad_state.r,0xFF);						
    1512:	d0 92 1f 01 	sts	0x011F, r13
    1516:	06 c0       	rjmp	.+12     	; 0x1524 <main+0x101c>
	bit_set(gamepad_state.digital_buttons,XBOX_RIGHT_STICK);
}

//Combo [F] Back+LT+RTh
if (action==43){
    1518:	1b 32       	cpi	r17, 0x2B	; 43
    151a:	31 f4       	brne	.+12     	; 0x1528 <main+0x1020>
	bit_set(gamepad_state.digital_buttons,0x20);
    151c:	80 91 16 01 	lds	r24, 0x0116
	bit_set(gamepad_state.l,0xFF);
    1520:	d0 92 1e 01 	sts	0x011E, r13
	bit_set(gamepad_state.digital_buttons,XBOX_RIGHT_STICK);
    1524:	80 6a       	ori	r24, 0xA0	; 160
    1526:	05 c0       	rjmp	.+10     	; 0x1532 <main+0x102a>
}

//Combo [G] Back+LTh
if (action==44){
    1528:	1c 32       	cpi	r17, 0x2C	; 44
    152a:	31 f4       	brne	.+12     	; 0x1538 <main+0x1030>
	bit_set(gamepad_state.digital_buttons,0x20);
    152c:	80 91 16 01 	lds	r24, 0x0116
	bit_set(gamepad_state.digital_buttons,XBOX_LEFT_STICK);
    1530:	80 66       	ori	r24, 0x60	; 96
    1532:	80 93 16 01 	sts	0x0116, r24
    1536:	15 c0       	rjmp	.+42     	; 0x1562 <main+0x105a>
}

//Combo [H] Back+A+B
if (action==45){
    1538:	1d 32       	cpi	r17, 0x2D	; 45
    153a:	41 f4       	brne	.+16     	; 0x154c <main+0x1044>
	bit_set(gamepad_state.digital_buttons,0x20);
    153c:	80 91 16 01 	lds	r24, 0x0116
    1540:	80 62       	ori	r24, 0x20	; 32
    1542:	80 93 16 01 	sts	0x0116, r24
	bit_set(gamepad_state.a,0xFF);
    1546:	d0 92 18 01 	sts	0x0118, r13
    154a:	09 c0       	rjmp	.+18     	; 0x155e <main+0x1056>
	bit_set(gamepad_state.b,0xFF);
}

//Combo [I] Back+Black+B
if (action==46){
    154c:	1e 32       	cpi	r17, 0x2E	; 46
    154e:	49 f4       	brne	.+18     	; 0x1562 <main+0x105a>
	bit_set(gamepad_state.digital_buttons,0x20);
    1550:	80 91 16 01 	lds	r24, 0x0116
    1554:	80 62       	ori	r24, 0x20	; 32
    1556:	80 93 16 01 	sts	0x0116, r24
	bit_set(gamepad_state.black,0xFF);
    155a:	d0 92 1c 01 	sts	0x011C, r13
	bit_set(gamepad_state.b,0xFF);
    155e:	d0 92 19 01 	sts	0x0119, r13
			}			
		}
		
		//Trackball Buttons
		if (setting_enable_tb1==1){
			for(pos=0;pos<3;pos++) {
    1562:	c3 94       	inc	r12
    1564:	33 e0       	ldi	r19, 0x03	; 3
    1566:	c3 16       	cp	r12, r19
    1568:	09 f0       	breq	.+2      	; 0x156c <main+0x1064>
    156a:	b1 ce       	rjmp	.-670    	; 0x12ce <main+0xdc6>
					}
				}
			}
		}		
		
		xbox_send_pad_state();
    156c:	bc d0       	rcall	.+376    	; 0x16e6 <xbox_send_pad_state>
		
		//debounce time varies depending on hardware (e.g. trackball needs more ms to gather data,  mouse needs less)
		if (setting_enable_tb1==1){
    156e:	29 96       	adiw	r28, 0x09	; 9
    1570:	4f ad       	ldd	r20, Y+63	; 0x3f
    1572:	29 97       	sbiw	r28, 0x09	; 9
    1574:	41 30       	cpi	r20, 0x01	; 1
    1576:	59 f4       	brne	.+22     	; 0x158e <main+0x1086>
			if (setting_tb1_mouse==1){
    1578:	27 96       	adiw	r28, 0x07	; 7
    157a:	5f ad       	ldd	r21, Y+63	; 0x3f
    157c:	27 97       	sbiw	r28, 0x07	; 7
    157e:	51 30       	cpi	r21, 0x01	; 1
    1580:	19 f4       	brne	.+6      	; 0x1588 <main+0x1080>
    1582:	88 ee       	ldi	r24, 0xE8	; 232
    1584:	93 e0       	ldi	r25, 0x03	; 3
    1586:	05 c0       	rjmp	.+10     	; 0x1592 <main+0x108a>
    1588:	80 ec       	ldi	r24, 0xC0	; 192
    158a:	9d e5       	ldi	r25, 0x5D	; 93
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <main+0x108a>
    158e:	80 e4       	ldi	r24, 0x40	; 64
    1590:	9f e1       	ldi	r25, 0x1F	; 31
    1592:	01 97       	sbiw	r24, 0x01	; 1
    1594:	f1 f7       	brne	.-4      	; 0x1592 <main+0x108a>
    1596:	60 96       	adiw	r28, 0x10	; 16
    1598:	0f ad       	ldd	r16, Y+63	; 0x3f
    159a:	60 97       	sbiw	r28, 0x10	; 16
    159c:	b5 c9       	rjmp	.-3222   	; 0x908 <main+0x400>
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	60 96       	adiw	r28, 0x10	; 16
    15a2:	8f af       	std	Y+63, r24	; 0x3f
    15a4:	60 97       	sbiw	r28, 0x10	; 16
    15a6:	55 24       	eor	r5, r5
    15a8:	0c ca       	rjmp	.-3048   	; 0x9c2 <main+0x4ba>
    15aa:	21 e0       	ldi	r18, 0x01	; 1
    15ac:	2d 96       	adiw	r28, 0x0d	; 13
    15ae:	2f af       	std	Y+63, r18	; 0x3f
    15b0:	2d 97       	sbiw	r28, 0x0d	; 13
    15b2:	72 ca       	rjmp	.-2844   	; 0xa98 <main+0x590>

000015b4 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    15b4:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    15b6:	92 30       	cpi	r25, 0x02	; 2
    15b8:	49 f0       	breq	.+18     	; 0x15cc <CALLBACK_USB_GetDescriptor+0x18>
    15ba:	93 30       	cpi	r25, 0x03	; 3
    15bc:	61 f0       	breq	.+24     	; 0x15d6 <CALLBACK_USB_GetDescriptor+0x22>
    15be:	91 30       	cpi	r25, 0x01	; 1
    15c0:	f9 f4       	brne	.+62     	; 0x1600 <CALLBACK_USB_GetDescriptor+0x4c>
    15c2:	e4 e7       	ldi	r30, 0x74	; 116
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	22 e1       	ldi	r18, 0x12	; 18
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	1e c0       	rjmp	.+60     	; 0x1608 <CALLBACK_USB_GetDescriptor+0x54>
    15cc:	e6 e8       	ldi	r30, 0x86	; 134
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	20 e2       	ldi	r18, 0x20	; 32
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	19 c0       	rjmp	.+50     	; 0x1608 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
    15d6:	81 30       	cpi	r24, 0x01	; 1
    15d8:	49 f0       	breq	.+18     	; 0x15ec <CALLBACK_USB_GetDescriptor+0x38>
    15da:	81 30       	cpi	r24, 0x01	; 1
    15dc:	18 f0       	brcs	.+6      	; 0x15e4 <CALLBACK_USB_GetDescriptor+0x30>
    15de:	82 30       	cpi	r24, 0x02	; 2
    15e0:	79 f4       	brne	.+30     	; 0x1600 <CALLBACK_USB_GetDescriptor+0x4c>
    15e2:	08 c0       	rjmp	.+16     	; 0x15f4 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
    15e4:	e6 ea       	ldi	r30, 0xA6	; 166
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	84 91       	lpm	r24, Z+
    15ea:	07 c0       	rjmp	.+14     	; 0x15fa <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    15ec:	ea ea       	ldi	r30, 0xAA	; 170
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	84 91       	lpm	r24, Z+
    15f2:	03 c0       	rjmp	.+6      	; 0x15fa <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    15f4:	e6 ec       	ldi	r30, 0xC6	; 198
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	84 91       	lpm	r24, Z+
    15fa:	28 2f       	mov	r18, r24
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	04 c0       	rjmp	.+8      	; 0x1608 <CALLBACK_USB_GetDescriptor+0x54>
    1600:	e0 e0       	ldi	r30, 0x00	; 0
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
    1608:	ed 93       	st	X+, r30
    160a:	fc 93       	st	X, r31
	return Size;
}
    160c:	c9 01       	movw	r24, r18
    160e:	08 95       	ret

00001610 <EVENT_USB_Device_Connect>:

/** Event handler for the USB_Connect event. This indicates that the device is enumerating via the status LEDs and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Device_Connect(void) {
	if(padUSBConnectEventCallback)
    1610:	e0 91 06 01 	lds	r30, 0x0106
    1614:	f0 91 07 01 	lds	r31, 0x0107
    1618:	30 97       	sbiw	r30, 0x00	; 0
    161a:	09 f0       	breq	.+2      	; 0x161e <EVENT_USB_Device_Connect+0xe>
		padUSBConnectEventCallback();
    161c:	09 95       	icall
    161e:	08 95       	ret

00001620 <EVENT_USB_Device_Disconnect>:

/** Event handler for the USB_Disconnect event. This indicates that the device is no longer connected to a host via
 *  the status LEDs and stops the USB management and joystick reporting tasks.
 */
void EVENT_USB_Device_Disconnect(void) {
	if(padUSBDisconnectEventCallback)
    1620:	e0 91 08 01 	lds	r30, 0x0108
    1624:	f0 91 09 01 	lds	r31, 0x0109
    1628:	30 97       	sbiw	r30, 0x00	; 0
    162a:	09 f0       	breq	.+2      	; 0x162e <EVENT_USB_Device_Disconnect+0xe>
		padUSBDisconnectEventCallback();
    162c:	09 95       	icall
    162e:	08 95       	ret

00001630 <xbox_reset_watchdog>:
	HID_Task();
	USB_USBTask();
}

void xbox_reset_watchdog(void) {
	wdt_reset();
    1630:	a8 95       	wdr
}
    1632:	08 95       	ret

00001634 <xbox_reset_pad_status>:
		Endpoint_ClearIN();
	}
}

void xbox_reset_pad_status(void) {
	memset(&gamepad_state, 0x00, sizeof(USB_JoystickReport_Data_t));
    1634:	e4 e1       	ldi	r30, 0x14	; 20
    1636:	f1 e0       	ldi	r31, 0x01	; 1
    1638:	84 e2       	ldi	r24, 0x24	; 36
    163a:	df 01       	movw	r26, r30
    163c:	1d 92       	st	X+, r1
    163e:	8a 95       	dec	r24
    1640:	e9 f7       	brne	.-6      	; 0x163c <xbox_reset_pad_status+0x8>

	gamepad_state.rsize = 20;
    1642:	94 e1       	ldi	r25, 0x14	; 20
    1644:	90 93 15 01 	sts	0x0115, r25

	gamepad_state.reserved_2[0] = 16; // 16 - must be greater than 7, length of this report?
    1648:	80 e1       	ldi	r24, 0x10	; 16
    164a:	80 93 28 01 	sts	0x0128, r24
	gamepad_state.reserved_2[1] = 66; //  0 - needed, USB interface protocol?
    164e:	82 e4       	ldi	r24, 0x42	; 66
    1650:	80 93 29 01 	sts	0x0129, r24
	gamepad_state.reserved_2[2] = 0; //  0 - needed, USB interface protocol?
    1654:	10 92 2a 01 	sts	0x012A, r1
	gamepad_state.reserved_2[3] = 1; //  1 - must be greater than 0, number of interfaces?
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	80 93 2b 01 	sts	0x012B, r24
	gamepad_state.reserved_2[4] = 1; //  1 - needed, configuration index?
    165e:	80 93 2c 01 	sts	0x012C, r24
	gamepad_state.reserved_2[5] = 2; //  2 - must be greater than 0, number of endpoints?
    1662:	82 e0       	ldi	r24, 0x02	; 2
    1664:	80 93 2d 01 	sts	0x012D, r24
	gamepad_state.reserved_2[6] = 20; // 20 - must be less or equal than max packet size for in endpoint, in max packet size?
    1668:	90 93 2e 01 	sts	0x012E, r25
	gamepad_state.reserved_2[7] = 6; //  6 - must be less or equal than max packet size for out endpoint, out max packet size?
    166c:	86 e0       	ldi	r24, 0x06	; 6
    166e:	80 93 2f 01 	sts	0x012F, r24
    1672:	7c 96       	adiw	r30, 0x1c	; 28

	for (int i = 0; i < 8; i++) {
		gamepad_state.reserved_3[i] = 0xFF;
    1674:	8f ef       	ldi	r24, 0xFF	; 255
    1676:	81 93       	st	Z+, r24
	gamepad_state.reserved_2[4] = 1; //  1 - needed, configuration index?
	gamepad_state.reserved_2[5] = 2; //  2 - must be greater than 0, number of endpoints?
	gamepad_state.reserved_2[6] = 20; // 20 - must be less or equal than max packet size for in endpoint, in max packet size?
	gamepad_state.reserved_2[7] = 6; //  6 - must be less or equal than max packet size for out endpoint, out max packet size?

	for (int i = 0; i < 8; i++) {
    1678:	b1 e0       	ldi	r27, 0x01	; 1
    167a:	e8 33       	cpi	r30, 0x38	; 56
    167c:	fb 07       	cpc	r31, r27
    167e:	d9 f7       	brne	.-10     	; 0x1676 <xbox_reset_pad_status+0x42>
		gamepad_state.reserved_3[i] = 0xFF;
	}
}
    1680:	08 95       	ret

00001682 <xbox_init>:
void xbox_reset_watchdog(void) {
	wdt_reset();
}

void xbox_init(bool watchdog) {
	if (watchdog) {
    1682:	88 23       	and	r24, r24
    1684:	61 f0       	breq	.+24     	; 0x169e <xbox_init+0x1c>
		wdt_enable(WDTO_2S);
    1686:	2f e0       	ldi	r18, 0x0F	; 15
    1688:	88 e1       	ldi	r24, 0x18	; 24
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	f8 94       	cli
    1690:	a8 95       	wdr
    1692:	80 93 60 00 	sts	0x0060, r24
    1696:	0f be       	out	0x3f, r0	; 63
    1698:	20 93 60 00 	sts	0x0060, r18
    169c:	08 c0       	rjmp	.+16     	; 0x16ae <xbox_init+0x2c>
	} else {
		wdt_disable();
    169e:	88 e1       	ldi	r24, 0x18	; 24
    16a0:	0f b6       	in	r0, 0x3f	; 63
    16a2:	f8 94       	cli
    16a4:	80 93 60 00 	sts	0x0060, r24
    16a8:	10 92 60 00 	sts	0x0060, r1
    16ac:	0f be       	out	0x3f, r0	; 63
	}

	xbox_reset_pad_status();
    16ae:	c2 df       	rcall	.-124    	; 0x1634 <xbox_reset_pad_status>

	USB_Init();
    16b0:	5b d1       	rcall	.+694    	; 0x1968 <USB_Init>

	sei();
    16b2:	78 94       	sei
}
    16b4:	08 95       	ret

000016b6 <HID_Task>:
}

/** Function to manage HID report generation and transmission to the host. */
void HID_Task(void) {
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
    16b6:	80 91 3c 01 	lds	r24, 0x013C
    16ba:	84 30       	cpi	r24, 0x04	; 4
    16bc:	99 f4       	brne	.+38     	; 0x16e4 <HID_Task+0x2e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    16be:	82 e0       	ldi	r24, 0x02	; 2
    16c0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    16c4:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the Joystick Report Endpoint */
	Endpoint_SelectEndpoint(JOYSTICK_EPADDR_IN);

	/* Check to see if the host is ready for another packet */
	if (Endpoint_IsINReady()) {
    16c8:	80 ff       	sbrs	r24, 0
    16ca:	0c c0       	rjmp	.+24     	; 0x16e4 <HID_Task+0x2e>
		/* Write Joystick Report Data */
		Endpoint_Write_Stream_LE(&gamepad_state, 20, NULL);
    16cc:	84 e1       	ldi	r24, 0x14	; 20
    16ce:	91 e0       	ldi	r25, 0x01	; 1
    16d0:	64 e1       	ldi	r22, 0x14	; 20
    16d2:	70 e0       	ldi	r23, 0x00	; 0
    16d4:	40 e0       	ldi	r20, 0x00	; 0
    16d6:	50 e0       	ldi	r21, 0x00	; 0
    16d8:	d1 d2       	rcall	.+1442   	; 0x1c7c <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16da:	80 91 e8 00 	lds	r24, 0x00E8
    16de:	8e 77       	andi	r24, 0x7E	; 126
    16e0:	80 93 e8 00 	sts	0x00E8, r24
    16e4:	08 95       	ret

000016e6 <xbox_send_pad_state>:
		gamepad_state.reserved_3[i] = 0xFF;
	}
}

void xbox_send_pad_state(void) {
	HID_Task();
    16e6:	e7 df       	rcall	.-50     	; 0x16b6 <HID_Task>
	USB_USBTask();
}
    16e8:	87 c4       	rjmp	.+2318   	; 0x1ff8 <USB_USBTask>

000016ea <EVENT_USB_Device_ControlRequest>:
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void) {
	/* Handle HID Class specific requests */
	switch (USB_ControlRequest.bRequest) {
    16ea:	90 91 3e 01 	lds	r25, 0x013E
    16ee:	91 30       	cpi	r25, 0x01	; 1
    16f0:	a1 f4       	brne	.+40     	; 0x171a <EVENT_USB_Device_ControlRequest+0x30>
	case HID_REQ_GetReport:
		if (USB_ControlRequest.bmRequestType
    16f2:	80 91 3d 01 	lds	r24, 0x013D
    16f6:	81 3a       	cpi	r24, 0xA1	; 161
    16f8:	91 f5       	brne	.+100    	; 0x175e <EVENT_USB_Device_ControlRequest+0x74>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    16fa:	80 91 e8 00 	lds	r24, 0x00E8
    16fe:	87 7f       	andi	r24, 0xF7	; 247
    1700:	80 93 e8 00 	sts	0x00E8, r24
				== (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE)) {
			Endpoint_ClearSETUP();

			/* Write the report data to the control endpoint */
			Endpoint_Write_Control_Stream_LE(&gamepad_state, 20);
    1704:	84 e1       	ldi	r24, 0x14	; 20
    1706:	91 e0       	ldi	r25, 0x01	; 1
    1708:	64 e1       	ldi	r22, 0x14	; 20
    170a:	70 e0       	ldi	r23, 0x00	; 0
    170c:	ed d1       	rcall	.+986    	; 0x1ae8 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    170e:	80 91 e8 00 	lds	r24, 0x00E8
    1712:	8b 77       	andi	r24, 0x7B	; 123
    1714:	80 93 e8 00 	sts	0x00E8, r24
    1718:	08 95       	ret
		}

		break;

	default:
		if (USB_ControlRequest.bmRequestType
    171a:	80 91 3d 01 	lds	r24, 0x013D
    171e:	81 3c       	cpi	r24, 0xC1	; 193
    1720:	f1 f4       	brne	.+60     	; 0x175e <EVENT_USB_Device_ControlRequest+0x74>
				== (REQDIR_DEVICETOHOST | REQTYPE_VENDOR | REQREC_INTERFACE)) {
			if (USB_ControlRequest.bRequest == 0x06) {
    1722:	96 30       	cpi	r25, 0x06	; 6
    1724:	e1 f4       	brne	.+56     	; 0x175e <EVENT_USB_Device_ControlRequest+0x74>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1726:	80 91 e8 00 	lds	r24, 0x00E8
    172a:	87 7f       	andi	r24, 0xF7	; 247
    172c:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearSETUP();

				/* Write the report data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(gamepad_state.reserved_2, 16);
    1730:	88 e2       	ldi	r24, 0x28	; 40
    1732:	91 e0       	ldi	r25, 0x01	; 1
    1734:	60 e1       	ldi	r22, 0x10	; 16
    1736:	70 e0       	ldi	r23, 0x00	; 0
    1738:	d7 d1       	rcall	.+942    	; 0x1ae8 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    173a:	80 91 e8 00 	lds	r24, 0x00E8
    173e:	8b 77       	andi	r24, 0x7B	; 123
    1740:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearOUT();

				padDetected = 1;
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	90 93 0b 01 	sts	0x010B, r25
    174c:	80 93 0a 01 	sts	0x010A, r24

				if(padDetectedCallback)
    1750:	e0 91 04 01 	lds	r30, 0x0104
    1754:	f0 91 05 01 	lds	r31, 0x0105
    1758:	30 97       	sbiw	r30, 0x00	; 0
    175a:	09 f0       	breq	.+2      	; 0x175e <EVENT_USB_Device_ControlRequest+0x74>
					padDetectedCallback();
    175c:	09 95       	icall
    175e:	08 95       	ret

00001760 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1760:	82 e0       	ldi	r24, 0x02	; 2
    1762:	61 ec       	ldi	r22, 0xC1	; 193
    1764:	42 e2       	ldi	r20, 0x22	; 34
 *  of the USB device after enumeration - the device endpoints are configured and the joystick reporting task started.
 */
void EVENT_USB_Device_ConfigurationChanged(void) {
	/* Setup HID Report Endpoint */
	Endpoint_ConfigureEndpoint(JOYSTICK_EPADDR_IN, EP_TYPE_INTERRUPT, 20, 1);
}
    1766:	00 c0       	rjmp	.+0      	; 0x1768 <Endpoint_ConfigureEndpoint_Prv>

00001768 <Endpoint_ConfigureEndpoint_Prv>:
}

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
    1768:	38 2f       	mov	r19, r24
    176a:	28 2f       	mov	r18, r24
    176c:	2e c0       	rjmp	.+92     	; 0x17ca <Endpoint_ConfigureEndpoint_Prv+0x62>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    176e:	82 2f       	mov	r24, r18
    1770:	8f 70       	andi	r24, 0x0F	; 15
    1772:	80 93 e9 00 	sts	0x00E9, r24
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    1776:	23 17       	cp	r18, r19
    1778:	21 f4       	brne	.+8      	; 0x1782 <Endpoint_ConfigureEndpoint_Prv+0x1a>
    177a:	76 2f       	mov	r23, r22
    177c:	94 2f       	mov	r25, r20
    177e:	50 e0       	ldi	r21, 0x00	; 0
    1780:	06 c0       	rjmp	.+12     	; 0x178e <Endpoint_ConfigureEndpoint_Prv+0x26>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    1782:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1786:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
    178a:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    178e:	91 ff       	sbrs	r25, 1
    1790:	1b c0       	rjmp	.+54     	; 0x17c8 <Endpoint_ConfigureEndpoint_Prv+0x60>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1792:	80 91 eb 00 	lds	r24, 0x00EB
    1796:	8e 7f       	andi	r24, 0xFE	; 254
    1798:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    179c:	80 91 ed 00 	lds	r24, 0x00ED
    17a0:	8d 7f       	andi	r24, 0xFD	; 253
    17a2:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    17a6:	80 91 eb 00 	lds	r24, 0x00EB
    17aa:	81 60       	ori	r24, 0x01	; 1
    17ac:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    17b0:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    17b4:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
    17b8:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    17bc:	80 91 ee 00 	lds	r24, 0x00EE

		if (!(Endpoint_IsConfigured()))
    17c0:	87 fd       	sbrc	r24, 7
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <Endpoint_ConfigureEndpoint_Prv+0x60>
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    17c8:	2f 5f       	subi	r18, 0xFF	; 255
    17ca:	25 30       	cpi	r18, 0x05	; 5
    17cc:	80 f2       	brcs	.-96     	; 0x176e <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    17ce:	3f 70       	andi	r19, 0x0F	; 15
    17d0:	30 93 e9 00 	sts	0x00E9, r19
    17d4:	81 e0       	ldi	r24, 0x01	; 1
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    17d6:	08 95       	ret

000017d8 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    17d8:	80 91 3d 01 	lds	r24, 0x013D
    17dc:	88 23       	and	r24, r24
    17de:	9c f4       	brge	.+38     	; 0x1806 <Endpoint_ClearStatusStage+0x2e>
    17e0:	04 c0       	rjmp	.+8      	; 0x17ea <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    17e2:	80 91 3c 01 	lds	r24, 0x013C
    17e6:	88 23       	and	r24, r24
    17e8:	b9 f0       	breq	.+46     	; 0x1818 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    17ea:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    17ee:	82 ff       	sbrs	r24, 2
    17f0:	f8 cf       	rjmp	.-16     	; 0x17e2 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    17f2:	80 91 e8 00 	lds	r24, 0x00E8
    17f6:	8b 77       	andi	r24, 0x7B	; 123
    17f8:	80 93 e8 00 	sts	0x00E8, r24
    17fc:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    17fe:	80 91 3c 01 	lds	r24, 0x013C
    1802:	88 23       	and	r24, r24
    1804:	49 f0       	breq	.+18     	; 0x1818 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1806:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    180a:	80 ff       	sbrs	r24, 0
    180c:	f8 cf       	rjmp	.-16     	; 0x17fe <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    180e:	80 91 e8 00 	lds	r24, 0x00E8
    1812:	8e 77       	andi	r24, 0x7E	; 126
    1814:	80 93 e8 00 	sts	0x00E8, r24
    1818:	08 95       	ret

0000181a <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    181a:	40 91 e4 00 	lds	r20, 0x00E4
    181e:	50 91 e5 00 	lds	r21, 0x00E5
    1822:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1824:	80 91 ec 00 	lds	r24, 0x00EC
    1828:	80 ff       	sbrs	r24, 0
    182a:	24 c0       	rjmp	.+72     	; 0x1874 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    182c:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1830:	80 fd       	sbrc	r24, 0
    1832:	1e c0       	rjmp	.+60     	; 0x1870 <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1834:	80 91 3c 01 	lds	r24, 0x013C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1838:	88 23       	and	r24, r24
    183a:	11 f4       	brne	.+4      	; 0x1840 <Endpoint_WaitUntilReady+0x26>
    183c:	82 e0       	ldi	r24, 0x02	; 2
    183e:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1840:	85 30       	cpi	r24, 0x05	; 5
    1842:	11 f4       	brne	.+4      	; 0x1848 <Endpoint_WaitUntilReady+0x2e>
    1844:	83 e0       	ldi	r24, 0x03	; 3
    1846:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1848:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    184c:	85 ff       	sbrs	r24, 5
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <Endpoint_WaitUntilReady+0x3a>
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	08 95       	ret
    1854:	80 91 e4 00 	lds	r24, 0x00E4
    1858:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    185c:	84 17       	cp	r24, r20
    185e:	95 07       	cpc	r25, r21
    1860:	09 f3       	breq	.-62     	; 0x1824 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1862:	22 23       	and	r18, r18
    1864:	11 f4       	brne	.+4      	; 0x186a <Endpoint_WaitUntilReady+0x50>
    1866:	84 e0       	ldi	r24, 0x04	; 4
    1868:	08 95       	ret
    186a:	21 50       	subi	r18, 0x01	; 1
    186c:	ac 01       	movw	r20, r24
    186e:	da cf       	rjmp	.-76     	; 0x1824 <Endpoint_WaitUntilReady+0xa>
    1870:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1872:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1874:	80 91 e8 00 	lds	r24, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1878:	82 ff       	sbrs	r24, 2
    187a:	dc cf       	rjmp	.-72     	; 0x1834 <Endpoint_WaitUntilReady+0x1a>
    187c:	f9 cf       	rjmp	.-14     	; 0x1870 <Endpoint_WaitUntilReady+0x56>

0000187e <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    187e:	7d d0       	rcall	.+250    	; 0x197a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1880:	7f d0       	rcall	.+254    	; 0x1980 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1882:	e0 ee       	ldi	r30, 0xE0	; 224
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	81 60       	ori	r24, 0x01	; 1
    188a:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    188c:	e8 ed       	ldi	r30, 0xD8	; 216
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	8f 77       	andi	r24, 0x7F	; 127
    1894:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1896:	19 bc       	out	0x29, r1	; 41
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
			#else
				REGCR  |=  (1 << REGDIS);
    1898:	e3 e6       	ldi	r30, 0x63	; 99
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	81 60       	ori	r24, 0x01	; 1
    18a0:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    18a2:	10 92 3b 01 	sts	0x013B, r1
}
    18a6:	08 95       	ret

000018a8 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    18a8:	df 93       	push	r29
    18aa:	cf 93       	push	r28
    18ac:	00 d0       	rcall	.+0      	; 0x18ae <USB_ResetInterface+0x6>
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    18b2:	63 d0       	rcall	.+198    	; 0x197a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    18b4:	65 d0       	rcall	.+202    	; 0x1980 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    18b6:	80 91 d8 00 	lds	r24, 0x00D8
    18ba:	8f 77       	andi	r24, 0x7F	; 127
    18bc:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
    18c0:	80 91 d8 00 	lds	r24, 0x00D8
    18c4:	80 68       	ori	r24, 0x80	; 128
    18c6:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    18ca:	80 91 d8 00 	lds	r24, 0x00D8
    18ce:	8f 7d       	andi	r24, 0xDF	; 223
    18d0:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    18d4:	84 e0       	ldi	r24, 0x04	; 4
    18d6:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    18d8:	86 e0       	ldi	r24, 0x06	; 6
    18da:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    18dc:	09 b4       	in	r0, 0x29	; 41
    18de:	00 fe       	sbrs	r0, 0
    18e0:	fd cf       	rjmp	.-6      	; 0x18dc <USB_ResetInterface+0x34>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    18e2:	10 92 3c 01 	sts	0x013C, r1
	USB_Device_ConfigurationNumber  = 0;
    18e6:	10 92 38 01 	sts	0x0138, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    18ea:	10 92 3a 01 	sts	0x013A, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    18ee:	10 92 39 01 	sts	0x0139, r1
		  USB_Device_ControlEndpointSize = eeprom_read_byte(&DeviceDescriptorPtr->Endpoint0Size);
		else
		  USB_Device_ControlEndpointSize = DeviceDescriptorPtr->Endpoint0Size;
	}
	#else
	if (CALLBACK_USB_GetDescriptor((DTYPE_Device << 8), 0, (void*)&DeviceDescriptorPtr) != NO_DESCRIPTOR)
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	91 e0       	ldi	r25, 0x01	; 1
    18f6:	60 e0       	ldi	r22, 0x00	; 0
    18f8:	ae 01       	movw	r20, r28
    18fa:	4f 5f       	subi	r20, 0xFF	; 255
    18fc:	5f 4f       	sbci	r21, 0xFF	; 255
    18fe:	5a de       	rcall	.-844    	; 0x15b4 <CALLBACK_USB_GetDescriptor>
    1900:	89 2b       	or	r24, r25
    1902:	31 f0       	breq	.+12     	; 0x1910 <USB_ResetInterface+0x68>
		#if defined(USE_RAM_DESCRIPTORS)
		USB_Device_ControlEndpointSize = DeviceDescriptorPtr->Endpoint0Size;
		#elif defined(USE_EEPROM_DESCRIPTORS)
		USB_Device_ControlEndpointSize = eeprom_read_byte(&DeviceDescriptorPtr->Endpoint0Size);
		#else
		USB_Device_ControlEndpointSize = pgm_read_byte(&DeviceDescriptorPtr->Endpoint0Size);
    1904:	e9 81       	ldd	r30, Y+1	; 0x01
    1906:	fa 81       	ldd	r31, Y+2	; 0x02
    1908:	37 96       	adiw	r30, 0x07	; 7
    190a:	e4 91       	lpm	r30, Z+
    190c:	e0 93 00 01 	sts	0x0100, r30
	  USB_Device_SetFullSpeed();

	USB_INT_Enable(USB_INT_VBUSTI);
	#endif

	Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
    1910:	80 91 00 01 	lds	r24, 0x0100
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	28 e0       	ldi	r18, 0x08	; 8
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	40 e0       	ldi	r20, 0x00	; 0
    191c:	03 c0       	rjmp	.+6      	; 0x1924 <USB_ResetInterface+0x7c>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    191e:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    1920:	22 0f       	add	r18, r18
    1922:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1924:	28 17       	cp	r18, r24
    1926:	39 07       	cpc	r19, r25
    1928:	d0 f3       	brcs	.-12     	; 0x191e <USB_ResetInterface+0x76>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    192a:	42 95       	swap	r20
    192c:	40 7f       	andi	r20, 0xF0	; 240
    192e:	42 60       	ori	r20, 0x02	; 2
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	60 e0       	ldi	r22, 0x00	; 0
    1934:	19 df       	rcall	.-462    	; 0x1768 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1936:	80 91 e1 00 	lds	r24, 0x00E1
    193a:	8e 7f       	andi	r24, 0xFE	; 254
    193c:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1940:	80 91 e2 00 	lds	r24, 0x00E2
    1944:	81 60       	ori	r24, 0x01	; 1
    1946:	80 93 e2 00 	sts	0x00E2, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    194a:	80 91 e2 00 	lds	r24, 0x00E2
    194e:	88 60       	ori	r24, 0x08	; 8
    1950:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1954:	80 91 e0 00 	lds	r24, 0x00E0
    1958:	8e 7f       	andi	r24, 0xFE	; 254
    195a:	80 93 e0 00 	sts	0x00E0, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	cf 91       	pop	r28
    1964:	df 91       	pop	r29
    1966:	08 95       	ret

00001968 <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
    1968:	e3 e6       	ldi	r30, 0x63	; 99
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	8e 7f       	andi	r24, 0xFE	; 254
    1970:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	80 93 3b 01 	sts	0x013B, r24

	USB_ResetInterface();
}
    1978:	97 cf       	rjmp	.-210    	; 0x18a8 <USB_ResetInterface>

0000197a <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    197a:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    197e:	08 95       	ret

00001980 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1980:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    1984:	08 95       	ret

00001986 <__vector_11>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1986:	1f 92       	push	r1
    1988:	0f 92       	push	r0
    198a:	0f b6       	in	r0, 0x3f	; 63
    198c:	0f 92       	push	r0
    198e:	11 24       	eor	r1, r1
    1990:	2f 93       	push	r18
    1992:	3f 93       	push	r19
    1994:	4f 93       	push	r20
    1996:	5f 93       	push	r21
    1998:	6f 93       	push	r22
    199a:	7f 93       	push	r23
    199c:	8f 93       	push	r24
    199e:	9f 93       	push	r25
    19a0:	af 93       	push	r26
    19a2:	bf 93       	push	r27
    19a4:	ef 93       	push	r30
    19a6:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    19a8:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    19ac:	82 ff       	sbrs	r24, 2
    19ae:	0a c0       	rjmp	.+20     	; 0x19c4 <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    19b0:	80 91 e2 00 	lds	r24, 0x00E2
    19b4:	82 ff       	sbrs	r24, 2
    19b6:	06 c0       	rjmp	.+12     	; 0x19c4 <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    19b8:	80 91 e1 00 	lds	r24, 0x00E1
    19bc:	8b 7f       	andi	r24, 0xFB	; 251
    19be:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    19c2:	19 d3       	rcall	.+1586   	; 0x1ff6 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    19c4:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    19c8:	80 ff       	sbrs	r24, 0
    19ca:	17 c0       	rjmp	.+46     	; 0x19fa <__vector_11+0x74>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    19cc:	80 91 e2 00 	lds	r24, 0x00E2
    19d0:	80 ff       	sbrs	r24, 0
    19d2:	13 c0       	rjmp	.+38     	; 0x19fa <__vector_11+0x74>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    19d4:	80 91 e2 00 	lds	r24, 0x00E2
    19d8:	8e 7f       	andi	r24, 0xFE	; 254
    19da:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    19de:	80 91 e2 00 	lds	r24, 0x00E2
    19e2:	80 61       	ori	r24, 0x10	; 16
    19e4:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    19e8:	80 91 d8 00 	lds	r24, 0x00D8
    19ec:	80 62       	ori	r24, 0x20	; 32
    19ee:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    19f2:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    19f4:	10 92 3c 01 	sts	0x013C, r1
		EVENT_USB_Device_Disconnect();
    19f8:	13 de       	rcall	.-986    	; 0x1620 <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    19fa:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    19fe:	84 ff       	sbrs	r24, 4
    1a00:	2d c0       	rjmp	.+90     	; 0x1a5c <__vector_11+0xd6>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1a02:	80 91 e2 00 	lds	r24, 0x00E2
    1a06:	84 ff       	sbrs	r24, 4
    1a08:	29 c0       	rjmp	.+82     	; 0x1a5c <__vector_11+0xd6>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1a0a:	84 e0       	ldi	r24, 0x04	; 4
    1a0c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1a0e:	86 e0       	ldi	r24, 0x06	; 6
    1a10:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1a12:	09 b4       	in	r0, 0x29	; 41
    1a14:	00 fe       	sbrs	r0, 0
    1a16:	fd cf       	rjmp	.-6      	; 0x1a12 <__vector_11+0x8c>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1a18:	80 91 d8 00 	lds	r24, 0x00D8
    1a1c:	8f 7d       	andi	r24, 0xDF	; 223
    1a1e:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1a22:	80 91 e1 00 	lds	r24, 0x00E1
    1a26:	8f 7e       	andi	r24, 0xEF	; 239
    1a28:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1a2c:	80 91 e2 00 	lds	r24, 0x00E2
    1a30:	8f 7e       	andi	r24, 0xEF	; 239
    1a32:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1a36:	80 91 e2 00 	lds	r24, 0x00E2
    1a3a:	81 60       	ori	r24, 0x01	; 1
    1a3c:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1a40:	80 91 38 01 	lds	r24, 0x0138
    1a44:	88 23       	and	r24, r24
    1a46:	31 f4       	brne	.+12     	; 0x1a54 <__vector_11+0xce>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1a48:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1a4c:	87 fd       	sbrc	r24, 7
    1a4e:	02 c0       	rjmp	.+4      	; 0x1a54 <__vector_11+0xce>
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	01 c0       	rjmp	.+2      	; 0x1a56 <__vector_11+0xd0>
    1a54:	84 e0       	ldi	r24, 0x04	; 4
    1a56:	80 93 3c 01 	sts	0x013C, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    1a5a:	da dd       	rcall	.-1100   	; 0x1610 <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1a5c:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1a60:	83 ff       	sbrs	r24, 3
    1a62:	31 c0       	rjmp	.+98     	; 0x1ac6 <__vector_11+0x140>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1a64:	80 91 e2 00 	lds	r24, 0x00E2
    1a68:	83 ff       	sbrs	r24, 3
    1a6a:	2d c0       	rjmp	.+90     	; 0x1ac6 <__vector_11+0x140>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1a6c:	80 91 e1 00 	lds	r24, 0x00E1
    1a70:	87 7f       	andi	r24, 0xF7	; 247
    1a72:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1a76:	82 e0       	ldi	r24, 0x02	; 2
    1a78:	80 93 3c 01 	sts	0x013C, r24
		USB_Device_ConfigurationNumber = 0;
    1a7c:	10 92 38 01 	sts	0x0138, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1a80:	80 91 e1 00 	lds	r24, 0x00E1
    1a84:	8e 7f       	andi	r24, 0xFE	; 254
    1a86:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1a8a:	80 91 e2 00 	lds	r24, 0x00E2
    1a8e:	8e 7f       	andi	r24, 0xFE	; 254
    1a90:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1a94:	80 91 e2 00 	lds	r24, 0x00E2
    1a98:	80 61       	ori	r24, 0x10	; 16
    1a9a:	80 93 e2 00 	sts	0x00E2, r24

		USB_INT_Clear(USB_INT_SUSPI);
		USB_INT_Disable(USB_INT_SUSPI);
		USB_INT_Enable(USB_INT_WAKEUPI);

		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
    1a9e:	80 91 00 01 	lds	r24, 0x0100
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	40 e0       	ldi	r20, 0x00	; 0
    1aa6:	28 e0       	ldi	r18, 0x08	; 8
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	03 c0       	rjmp	.+6      	; 0x1ab2 <__vector_11+0x12c>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    1aac:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    1aae:	22 0f       	add	r18, r18
    1ab0:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1ab2:	28 17       	cp	r18, r24
    1ab4:	39 07       	cpc	r19, r25
    1ab6:	d0 f3       	brcs	.-12     	; 0x1aac <__vector_11+0x126>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1ab8:	42 95       	swap	r20
    1aba:	40 7f       	andi	r20, 0xF0	; 240
    1abc:	42 60       	ori	r20, 0x02	; 2
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	60 e0       	ldi	r22, 0x00	; 0
    1ac2:	52 de       	rcall	.-860    	; 0x1768 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1ac4:	98 d2       	rcall	.+1328   	; 0x1ff6 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1ac6:	ff 91       	pop	r31
    1ac8:	ef 91       	pop	r30
    1aca:	bf 91       	pop	r27
    1acc:	af 91       	pop	r26
    1ace:	9f 91       	pop	r25
    1ad0:	8f 91       	pop	r24
    1ad2:	7f 91       	pop	r23
    1ad4:	6f 91       	pop	r22
    1ad6:	5f 91       	pop	r21
    1ad8:	4f 91       	pop	r20
    1ada:	3f 91       	pop	r19
    1adc:	2f 91       	pop	r18
    1ade:	0f 90       	pop	r0
    1ae0:	0f be       	out	0x3f, r0	; 63
    1ae2:	0f 90       	pop	r0
    1ae4:	1f 90       	pop	r1
    1ae6:	18 95       	reti

00001ae8 <Endpoint_Write_Control_Stream_LE>:
    1ae8:	e8 2f       	mov	r30, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1aea:	40 91 43 01 	lds	r20, 0x0143
    1aee:	50 91 44 01 	lds	r21, 0x0144
    1af2:	46 17       	cp	r20, r22
    1af4:	57 07       	cpc	r21, r23
    1af6:	50 f4       	brcc	.+20     	; 0x1b0c <Endpoint_Write_Control_Stream_LE+0x24>

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1af8:	2e 2f       	mov	r18, r30
    1afa:	39 2f       	mov	r19, r25
    1afc:	c9 01       	movw	r24, r18
    1afe:	fc 01       	movw	r30, r24

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1b00:	80 91 00 01 	lds	r24, 0x0100
    1b04:	68 2f       	mov	r22, r24
    1b06:	70 e0       	ldi	r23, 0x00	; 0
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	3d c0       	rjmp	.+122    	; 0x1b86 <Endpoint_Write_Control_Stream_LE+0x9e>
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1b0c:	61 15       	cp	r22, r1
    1b0e:	71 05       	cpc	r23, r1
    1b10:	11 f0       	breq	.+4      	; 0x1b16 <Endpoint_Write_Control_Stream_LE+0x2e>
    1b12:	ab 01       	movw	r20, r22
    1b14:	f1 cf       	rjmp	.-30     	; 0x1af8 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b16:	80 91 e8 00 	lds	r24, 0x00E8
    1b1a:	8e 77       	andi	r24, 0x7E	; 126
    1b1c:	80 93 e8 00 	sts	0x00E8, r24
    1b20:	40 e0       	ldi	r20, 0x00	; 0
    1b22:	50 e0       	ldi	r21, 0x00	; 0
    1b24:	e9 cf       	rjmp	.-46     	; 0x1af8 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1b26:	80 91 3c 01 	lds	r24, 0x013C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1b2a:	88 23       	and	r24, r24
    1b2c:	f1 f1       	breq	.+124    	; 0x1baa <Endpoint_Write_Control_Stream_LE+0xc2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b2e:	85 30       	cpi	r24, 0x05	; 5
    1b30:	f1 f1       	breq	.+124    	; 0x1bae <Endpoint_Write_Control_Stream_LE+0xc6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1b32:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1b36:	83 ff       	sbrs	r24, 3
    1b38:	02 c0       	rjmp	.+4      	; 0x1b3e <Endpoint_Write_Control_Stream_LE+0x56>
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b3e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1b42:	82 fd       	sbrc	r24, 2
    1b44:	2c c0       	rjmp	.+88     	; 0x1b9e <Endpoint_Write_Control_Stream_LE+0xb6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b46:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1b4a:	80 ff       	sbrs	r24, 0
    1b4c:	1c c0       	rjmp	.+56     	; 0x1b86 <Endpoint_Write_Control_Stream_LE+0x9e>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1b4e:	80 91 f2 00 	lds	r24, 0x00F2
    1b52:	28 2f       	mov	r18, r24
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	07 c0       	rjmp	.+14     	; 0x1b66 <Endpoint_Write_Control_Stream_LE+0x7e>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1b58:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1b5a:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1b5e:	41 50       	subi	r20, 0x01	; 1
    1b60:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    1b62:	2f 5f       	subi	r18, 0xFF	; 255
    1b64:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1b66:	41 15       	cp	r20, r1
    1b68:	51 05       	cpc	r21, r1
    1b6a:	19 f0       	breq	.+6      	; 0x1b72 <Endpoint_Write_Control_Stream_LE+0x8a>
    1b6c:	26 17       	cp	r18, r22
    1b6e:	37 07       	cpc	r19, r23
    1b70:	98 f3       	brcs	.-26     	; 0x1b58 <Endpoint_Write_Control_Stream_LE+0x70>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	26 17       	cp	r18, r22
    1b76:	37 07       	cpc	r19, r23
    1b78:	09 f4       	brne	.+2      	; 0x1b7c <Endpoint_Write_Control_Stream_LE+0x94>
    1b7a:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b7c:	80 91 e8 00 	lds	r24, 0x00E8
    1b80:	8e 77       	andi	r24, 0x7E	; 126
    1b82:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1b86:	41 15       	cp	r20, r1
    1b88:	51 05       	cpc	r21, r1
    1b8a:	69 f6       	brne	.-102    	; 0x1b26 <Endpoint_Write_Control_Stream_LE+0x3e>
    1b8c:	99 23       	and	r25, r25
    1b8e:	59 f6       	brne	.-106    	; 0x1b26 <Endpoint_Write_Control_Stream_LE+0x3e>
    1b90:	06 c0       	rjmp	.+12     	; 0x1b9e <Endpoint_Write_Control_Stream_LE+0xb6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1b92:	80 91 3c 01 	lds	r24, 0x013C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1b96:	88 23       	and	r24, r24
    1b98:	41 f0       	breq	.+16     	; 0x1baa <Endpoint_Write_Control_Stream_LE+0xc2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b9a:	85 30       	cpi	r24, 0x05	; 5
    1b9c:	41 f0       	breq	.+16     	; 0x1bae <Endpoint_Write_Control_Stream_LE+0xc6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b9e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1ba2:	82 ff       	sbrs	r24, 2
    1ba4:	f6 cf       	rjmp	.-20     	; 0x1b92 <Endpoint_Write_Control_Stream_LE+0xaa>
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	08 95       	ret
    1baa:	82 e0       	ldi	r24, 0x02	; 2
    1bac:	08 95       	ret
    1bae:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1bb0:	08 95       	ret

00001bb2 <Endpoint_Write_Control_PStream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    1bb2:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1bb4:	40 91 43 01 	lds	r20, 0x0143
    1bb8:	50 91 44 01 	lds	r21, 0x0144
    1bbc:	46 17       	cp	r20, r22
    1bbe:	57 07       	cpc	r21, r23
    1bc0:	38 f4       	brcc	.+14     	; 0x1bd0 <Endpoint_Write_Control_PStream_LE+0x1e>

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1bc2:	f9 01       	movw	r30, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1bc4:	80 91 00 01 	lds	r24, 0x0100
    1bc8:	68 2f       	mov	r22, r24
    1bca:	70 e0       	ldi	r23, 0x00	; 0
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	40 c0       	rjmp	.+128    	; 0x1c50 <Endpoint_Write_Control_PStream_LE+0x9e>
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1bd0:	61 15       	cp	r22, r1
    1bd2:	71 05       	cpc	r23, r1
    1bd4:	11 f0       	breq	.+4      	; 0x1bda <Endpoint_Write_Control_PStream_LE+0x28>
    1bd6:	ab 01       	movw	r20, r22
    1bd8:	f4 cf       	rjmp	.-24     	; 0x1bc2 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1bda:	80 91 e8 00 	lds	r24, 0x00E8
    1bde:	8e 77       	andi	r24, 0x7E	; 126
    1be0:	80 93 e8 00 	sts	0x00E8, r24
    1be4:	40 e0       	ldi	r20, 0x00	; 0
    1be6:	50 e0       	ldi	r21, 0x00	; 0
    1be8:	ec cf       	rjmp	.-40     	; 0x1bc2 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1bea:	80 91 3c 01 	lds	r24, 0x013C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1bee:	88 23       	and	r24, r24
    1bf0:	09 f4       	brne	.+2      	; 0x1bf4 <Endpoint_Write_Control_PStream_LE+0x42>
    1bf2:	40 c0       	rjmp	.+128    	; 0x1c74 <Endpoint_Write_Control_PStream_LE+0xc2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1bf4:	85 30       	cpi	r24, 0x05	; 5
    1bf6:	09 f4       	brne	.+2      	; 0x1bfa <Endpoint_Write_Control_PStream_LE+0x48>
    1bf8:	3f c0       	rjmp	.+126    	; 0x1c78 <Endpoint_Write_Control_PStream_LE+0xc6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1bfa:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1bfe:	83 ff       	sbrs	r24, 3
    1c00:	02 c0       	rjmp	.+4      	; 0x1c06 <Endpoint_Write_Control_PStream_LE+0x54>
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1c06:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1c0a:	82 fd       	sbrc	r24, 2
    1c0c:	2d c0       	rjmp	.+90     	; 0x1c68 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1c0e:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1c12:	80 ff       	sbrs	r24, 0
    1c14:	1d c0       	rjmp	.+58     	; 0x1c50 <Endpoint_Write_Control_PStream_LE+0x9e>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1c16:	80 91 f2 00 	lds	r24, 0x00F2
    1c1a:	28 2f       	mov	r18, r24
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	08 c0       	rjmp	.+16     	; 0x1c30 <Endpoint_Write_Control_PStream_LE+0x7e>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1c20:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1c22:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1c26:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1c28:	41 50       	subi	r20, 0x01	; 1
    1c2a:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    1c2c:	2f 5f       	subi	r18, 0xFF	; 255
    1c2e:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1c30:	41 15       	cp	r20, r1
    1c32:	51 05       	cpc	r21, r1
    1c34:	19 f0       	breq	.+6      	; 0x1c3c <Endpoint_Write_Control_PStream_LE+0x8a>
    1c36:	26 17       	cp	r18, r22
    1c38:	37 07       	cpc	r19, r23
    1c3a:	90 f3       	brcs	.-28     	; 0x1c20 <Endpoint_Write_Control_PStream_LE+0x6e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	26 17       	cp	r18, r22
    1c40:	37 07       	cpc	r19, r23
    1c42:	09 f4       	brne	.+2      	; 0x1c46 <Endpoint_Write_Control_PStream_LE+0x94>
    1c44:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c46:	80 91 e8 00 	lds	r24, 0x00E8
    1c4a:	8e 77       	andi	r24, 0x7E	; 126
    1c4c:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1c50:	41 15       	cp	r20, r1
    1c52:	51 05       	cpc	r21, r1
    1c54:	51 f6       	brne	.-108    	; 0x1bea <Endpoint_Write_Control_PStream_LE+0x38>
    1c56:	99 23       	and	r25, r25
    1c58:	41 f6       	brne	.-112    	; 0x1bea <Endpoint_Write_Control_PStream_LE+0x38>
    1c5a:	06 c0       	rjmp	.+12     	; 0x1c68 <Endpoint_Write_Control_PStream_LE+0xb6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1c5c:	80 91 3c 01 	lds	r24, 0x013C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1c60:	88 23       	and	r24, r24
    1c62:	41 f0       	breq	.+16     	; 0x1c74 <Endpoint_Write_Control_PStream_LE+0xc2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1c64:	85 30       	cpi	r24, 0x05	; 5
    1c66:	41 f0       	breq	.+16     	; 0x1c78 <Endpoint_Write_Control_PStream_LE+0xc6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1c68:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1c6c:	82 ff       	sbrs	r24, 2
    1c6e:	f6 cf       	rjmp	.-20     	; 0x1c5c <Endpoint_Write_Control_PStream_LE+0xaa>
    1c70:	80 e0       	ldi	r24, 0x00	; 0
    1c72:	08 95       	ret
    1c74:	82 e0       	ldi	r24, 0x02	; 2
    1c76:	08 95       	ret
    1c78:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1c7a:	08 95       	ret

00001c7c <Endpoint_Write_Stream_LE>:

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1c7c:	bf 92       	push	r11
    1c7e:	cf 92       	push	r12
    1c80:	df 92       	push	r13
    1c82:	ef 92       	push	r14
    1c84:	ff 92       	push	r15
    1c86:	0f 93       	push	r16
    1c88:	1f 93       	push	r17
    1c8a:	cf 93       	push	r28
    1c8c:	df 93       	push	r29
    1c8e:	18 2f       	mov	r17, r24
    1c90:	09 2f       	mov	r16, r25
    1c92:	7b 01       	movw	r14, r22
    1c94:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1c96:	c1 dd       	rcall	.-1150   	; 0x181a <Endpoint_WaitUntilReady>
    1c98:	b8 2e       	mov	r11, r24
    1c9a:	88 23       	and	r24, r24
    1c9c:	b1 f5       	brne	.+108    	; 0x1d0a <Endpoint_Write_Stream_LE+0x8e>
// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1c9e:	81 2f       	mov	r24, r17
    1ca0:	90 2f       	mov	r25, r16
    1ca2:	9c 01       	movw	r18, r24
    1ca4:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1ca6:	c1 14       	cp	r12, r1
    1ca8:	d1 04       	cpc	r13, r1
    1caa:	39 f0       	breq	.+14     	; 0x1cba <Endpoint_Write_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    1cac:	f6 01       	movw	r30, r12
    1cae:	80 81       	ld	r24, Z
    1cb0:	91 81       	ldd	r25, Z+1	; 0x01
    1cb2:	e8 1a       	sub	r14, r24
    1cb4:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1cb6:	c8 0f       	add	r28, r24
    1cb8:	d9 1f       	adc	r29, r25
    1cba:	00 e0       	ldi	r16, 0x00	; 0
    1cbc:	10 e0       	ldi	r17, 0x00	; 0
    1cbe:	22 c0       	rjmp	.+68     	; 0x1d04 <Endpoint_Write_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1cc0:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1cc4:	85 fd       	sbrc	r24, 5
    1cc6:	16 c0       	rjmp	.+44     	; 0x1cf4 <Endpoint_Write_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1cc8:	80 91 e8 00 	lds	r24, 0x00E8
    1ccc:	8e 77       	andi	r24, 0x7E	; 126
    1cce:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    1cd2:	92 d1       	rcall	.+804    	; 0x1ff8 <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
    1cd4:	c1 14       	cp	r12, r1
    1cd6:	d1 04       	cpc	r13, r1
    1cd8:	49 f0       	breq	.+18     	; 0x1cec <Endpoint_Write_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
    1cda:	f6 01       	movw	r30, r12
    1cdc:	80 81       	ld	r24, Z
    1cde:	91 81       	ldd	r25, Z+1	; 0x01
    1ce0:	80 0f       	add	r24, r16
    1ce2:	91 1f       	adc	r25, r17
    1ce4:	91 83       	std	Z+1, r25	; 0x01
    1ce6:	80 83       	st	Z, r24
    1ce8:	85 e0       	ldi	r24, 0x05	; 5
    1cea:	10 c0       	rjmp	.+32     	; 0x1d0c <Endpoint_Write_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1cec:	96 dd       	rcall	.-1236   	; 0x181a <Endpoint_WaitUntilReady>
    1cee:	88 23       	and	r24, r24
    1cf0:	49 f0       	breq	.+18     	; 0x1d04 <Endpoint_Write_Stream_LE+0x88>
    1cf2:	0c c0       	rjmp	.+24     	; 0x1d0c <Endpoint_Write_Stream_LE+0x90>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1cf4:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1cf6:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1cfa:	08 94       	sec
    1cfc:	e1 08       	sbc	r14, r1
    1cfe:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    1d00:	0f 5f       	subi	r16, 0xFF	; 255
    1d02:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1d04:	e1 14       	cp	r14, r1
    1d06:	f1 04       	cpc	r15, r1
    1d08:	d9 f6       	brne	.-74     	; 0x1cc0 <Endpoint_Write_Stream_LE+0x44>
    1d0a:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1d0c:	df 91       	pop	r29
    1d0e:	cf 91       	pop	r28
    1d10:	1f 91       	pop	r17
    1d12:	0f 91       	pop	r16
    1d14:	ff 90       	pop	r15
    1d16:	ef 90       	pop	r14
    1d18:	df 90       	pop	r13
    1d1a:	cf 90       	pop	r12
    1d1c:	bf 90       	pop	r11
    1d1e:	08 95       	ret

00001d20 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1d20:	0f 93       	push	r16
    1d22:	1f 93       	push	r17
    1d24:	df 93       	push	r29
    1d26:	cf 93       	push	r28
    1d28:	cd b7       	in	r28, 0x3d	; 61
    1d2a:	de b7       	in	r29, 0x3e	; 62
    1d2c:	ac 97       	sbiw	r28, 0x2c	; 44
    1d2e:	0f b6       	in	r0, 0x3f	; 63
    1d30:	f8 94       	cli
    1d32:	de bf       	out	0x3e, r29	; 62
    1d34:	0f be       	out	0x3f, r0	; 63
    1d36:	cd bf       	out	0x3d, r28	; 61
    1d38:	ed e3       	ldi	r30, 0x3D	; 61
    1d3a:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1d3c:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1d40:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1d42:	21 e0       	ldi	r18, 0x01	; 1
    1d44:	e5 34       	cpi	r30, 0x45	; 69
    1d46:	f2 07       	cpc	r31, r18
    1d48:	c9 f7       	brne	.-14     	; 0x1d3c <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1d4a:	cf dc       	rcall	.-1634   	; 0x16ea <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1d4c:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1d50:	83 ff       	sbrs	r24, 3
    1d52:	38 c1       	rjmp	.+624    	; 0x1fc4 <USB_Device_ProcessControlRequest+0x2a4>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1d54:	80 91 3d 01 	lds	r24, 0x013D

		switch (USB_ControlRequest.bRequest)
    1d58:	30 91 3e 01 	lds	r19, 0x013E
    1d5c:	35 30       	cpi	r19, 0x05	; 5
    1d5e:	09 f4       	brne	.+2      	; 0x1d62 <USB_Device_ProcessControlRequest+0x42>
    1d60:	87 c0       	rjmp	.+270    	; 0x1e70 <USB_Device_ProcessControlRequest+0x150>
    1d62:	36 30       	cpi	r19, 0x06	; 6
    1d64:	40 f4       	brcc	.+16     	; 0x1d76 <USB_Device_ProcessControlRequest+0x56>
    1d66:	31 30       	cpi	r19, 0x01	; 1
    1d68:	c9 f1       	breq	.+114    	; 0x1ddc <USB_Device_ProcessControlRequest+0xbc>
    1d6a:	31 30       	cpi	r19, 0x01	; 1
    1d6c:	70 f0       	brcs	.+28     	; 0x1d8a <USB_Device_ProcessControlRequest+0x6a>
    1d6e:	33 30       	cpi	r19, 0x03	; 3
    1d70:	09 f0       	breq	.+2      	; 0x1d74 <USB_Device_ProcessControlRequest+0x54>
    1d72:	28 c1       	rjmp	.+592    	; 0x1fc4 <USB_Device_ProcessControlRequest+0x2a4>
    1d74:	33 c0       	rjmp	.+102    	; 0x1ddc <USB_Device_ProcessControlRequest+0xbc>
    1d76:	38 30       	cpi	r19, 0x08	; 8
    1d78:	09 f4       	brne	.+2      	; 0x1d7c <USB_Device_ProcessControlRequest+0x5c>
    1d7a:	f6 c0       	rjmp	.+492    	; 0x1f68 <USB_Device_ProcessControlRequest+0x248>
    1d7c:	39 30       	cpi	r19, 0x09	; 9
    1d7e:	09 f4       	brne	.+2      	; 0x1d82 <USB_Device_ProcessControlRequest+0x62>
    1d80:	05 c1       	rjmp	.+522    	; 0x1f8c <USB_Device_ProcessControlRequest+0x26c>
    1d82:	36 30       	cpi	r19, 0x06	; 6
    1d84:	09 f0       	breq	.+2      	; 0x1d88 <USB_Device_ProcessControlRequest+0x68>
    1d86:	1e c1       	rjmp	.+572    	; 0x1fc4 <USB_Device_ProcessControlRequest+0x2a4>
    1d88:	97 c0       	rjmp	.+302    	; 0x1eb8 <USB_Device_ProcessControlRequest+0x198>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1d8a:	80 38       	cpi	r24, 0x80	; 128
    1d8c:	21 f0       	breq	.+8      	; 0x1d96 <USB_Device_ProcessControlRequest+0x76>
    1d8e:	82 38       	cpi	r24, 0x82	; 130
    1d90:	09 f0       	breq	.+2      	; 0x1d94 <USB_Device_ProcessControlRequest+0x74>
    1d92:	18 c1       	rjmp	.+560    	; 0x1fc4 <USB_Device_ProcessControlRequest+0x2a4>
    1d94:	08 c0       	rjmp	.+16     	; 0x1da6 <USB_Device_ProcessControlRequest+0x86>
    1d96:	90 91 39 01 	lds	r25, 0x0139
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1d9a:	80 91 3a 01 	lds	r24, 0x013A
    1d9e:	88 23       	and	r24, r24
    1da0:	99 f0       	breq	.+38     	; 0x1dc8 <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1da2:	92 60       	ori	r25, 0x02	; 2
    1da4:	11 c0       	rjmp	.+34     	; 0x1dc8 <USB_Device_ProcessControlRequest+0xa8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1da6:	80 91 41 01 	lds	r24, 0x0141
    1daa:	8f 70       	andi	r24, 0x0F	; 15
    1dac:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1db0:	80 91 eb 00 	lds	r24, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	25 e0       	ldi	r18, 0x05	; 5
    1db8:	96 95       	lsr	r25
    1dba:	87 95       	ror	r24
    1dbc:	2a 95       	dec	r18
    1dbe:	e1 f7       	brne	.-8      	; 0x1db8 <USB_Device_ProcessControlRequest+0x98>
    1dc0:	98 2f       	mov	r25, r24
    1dc2:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1dc4:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1dc8:	80 91 e8 00 	lds	r24, 0x00E8
    1dcc:	87 7f       	andi	r24, 0xF7	; 247
    1dce:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1dd2:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
    1dd6:	10 92 f1 00 	sts	0x00F1, r1
    1dda:	d1 c0       	rjmp	.+418    	; 0x1f7e <USB_Device_ProcessControlRequest+0x25e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1ddc:	88 23       	and	r24, r24
    1dde:	19 f0       	breq	.+6      	; 0x1de6 <USB_Device_ProcessControlRequest+0xc6>
    1de0:	82 30       	cpi	r24, 0x02	; 2
    1de2:	09 f0       	breq	.+2      	; 0x1de6 <USB_Device_ProcessControlRequest+0xc6>
    1de4:	ef c0       	rjmp	.+478    	; 0x1fc4 <USB_Device_ProcessControlRequest+0x2a4>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	8f 71       	andi	r24, 0x1F	; 31
    1dea:	90 70       	andi	r25, 0x00	; 0
    1dec:	00 97       	sbiw	r24, 0x00	; 0
    1dee:	21 f0       	breq	.+8      	; 0x1df8 <USB_Device_ProcessControlRequest+0xd8>
    1df0:	02 97       	sbiw	r24, 0x02	; 2
    1df2:	09 f0       	breq	.+2      	; 0x1df6 <USB_Device_ProcessControlRequest+0xd6>
    1df4:	e7 c0       	rjmp	.+462    	; 0x1fc4 <USB_Device_ProcessControlRequest+0x2a4>
    1df6:	0c c0       	rjmp	.+24     	; 0x1e10 <USB_Device_ProcessControlRequest+0xf0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1df8:	80 91 3f 01 	lds	r24, 0x013F
    1dfc:	81 30       	cpi	r24, 0x01	; 1
    1dfe:	09 f0       	breq	.+2      	; 0x1e02 <USB_Device_ProcessControlRequest+0xe2>
    1e00:	e1 c0       	rjmp	.+450    	; 0x1fc4 <USB_Device_ProcessControlRequest+0x2a4>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1e02:	10 92 3a 01 	sts	0x013A, r1
    1e06:	33 30       	cpi	r19, 0x03	; 3
    1e08:	69 f5       	brne	.+90     	; 0x1e64 <USB_Device_ProcessControlRequest+0x144>
    1e0a:	80 93 3a 01 	sts	0x013A, r24
    1e0e:	2a c0       	rjmp	.+84     	; 0x1e64 <USB_Device_ProcessControlRequest+0x144>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1e10:	80 91 3f 01 	lds	r24, 0x013F
    1e14:	88 23       	and	r24, r24
    1e16:	31 f5       	brne	.+76     	; 0x1e64 <USB_Device_ProcessControlRequest+0x144>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1e18:	20 91 41 01 	lds	r18, 0x0141
    1e1c:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1e1e:	09 f4       	brne	.+2      	; 0x1e22 <USB_Device_ProcessControlRequest+0x102>
    1e20:	d1 c0       	rjmp	.+418    	; 0x1fc4 <USB_Device_ProcessControlRequest+0x2a4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e22:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1e26:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1e2a:	80 ff       	sbrs	r24, 0
    1e2c:	1b c0       	rjmp	.+54     	; 0x1e64 <USB_Device_ProcessControlRequest+0x144>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1e2e:	33 30       	cpi	r19, 0x03	; 3
    1e30:	21 f4       	brne	.+8      	; 0x1e3a <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1e32:	80 91 eb 00 	lds	r24, 0x00EB
    1e36:	80 62       	ori	r24, 0x20	; 32
    1e38:	13 c0       	rjmp	.+38     	; 0x1e60 <USB_Device_ProcessControlRequest+0x140>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1e3a:	80 91 eb 00 	lds	r24, 0x00EB
    1e3e:	80 61       	ori	r24, 0x10	; 16
    1e40:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	02 c0       	rjmp	.+4      	; 0x1e4e <USB_Device_ProcessControlRequest+0x12e>
    1e4a:	88 0f       	add	r24, r24
    1e4c:	99 1f       	adc	r25, r25
    1e4e:	2a 95       	dec	r18
    1e50:	e2 f7       	brpl	.-8      	; 0x1e4a <USB_Device_ProcessControlRequest+0x12a>
    1e52:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1e56:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1e5a:	80 91 eb 00 	lds	r24, 0x00EB
    1e5e:	88 60       	ori	r24, 0x08	; 8
    1e60:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e64:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e68:	80 91 e8 00 	lds	r24, 0x00E8
    1e6c:	87 7f       	andi	r24, 0xF7	; 247
    1e6e:	8a c0       	rjmp	.+276    	; 0x1f84 <USB_Device_ProcessControlRequest+0x264>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1e70:	88 23       	and	r24, r24
    1e72:	09 f0       	breq	.+2      	; 0x1e76 <USB_Device_ProcessControlRequest+0x156>
    1e74:	a7 c0       	rjmp	.+334    	; 0x1fc4 <USB_Device_ProcessControlRequest+0x2a4>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    1e76:	10 91 3f 01 	lds	r17, 0x013F
    1e7a:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1e7c:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1e7e:	f8 94       	cli
    1e80:	80 91 e8 00 	lds	r24, 0x00E8
    1e84:	87 7f       	andi	r24, 0xF7	; 247
    1e86:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1e8a:	a6 dc       	rcall	.-1716   	; 0x17d8 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1e8c:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    1e90:	80 ff       	sbrs	r24, 0
    1e92:	fc cf       	rjmp	.-8      	; 0x1e8c <USB_Device_ProcessControlRequest+0x16c>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1e94:	80 91 e3 00 	lds	r24, 0x00E3
    1e98:	80 78       	andi	r24, 0x80	; 128
    1e9a:	81 2b       	or	r24, r17

				UDADDR = Temp;
    1e9c:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
    1ea0:	80 68       	ori	r24, 0x80	; 128
    1ea2:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1ea6:	11 23       	and	r17, r17
    1ea8:	11 f4       	brne	.+4      	; 0x1eae <USB_Device_ProcessControlRequest+0x18e>
    1eaa:	82 e0       	ldi	r24, 0x02	; 2
    1eac:	01 c0       	rjmp	.+2      	; 0x1eb0 <USB_Device_ProcessControlRequest+0x190>
    1eae:	83 e0       	ldi	r24, 0x03	; 3
    1eb0:	80 93 3c 01 	sts	0x013C, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1eb4:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
    1eb6:	86 c0       	rjmp	.+268    	; 0x1fc4 <USB_Device_ProcessControlRequest+0x2a4>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1eb8:	80 58       	subi	r24, 0x80	; 128
    1eba:	82 30       	cpi	r24, 0x02	; 2
    1ebc:	08 f0       	brcs	.+2      	; 0x1ec0 <USB_Device_ProcessControlRequest+0x1a0>
    1ebe:	82 c0       	rjmp	.+260    	; 0x1fc4 <USB_Device_ProcessControlRequest+0x2a4>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1ec0:	80 91 3f 01 	lds	r24, 0x013F
    1ec4:	90 91 40 01 	lds	r25, 0x0140
    1ec8:	23 e0       	ldi	r18, 0x03	; 3
    1eca:	8c 3d       	cpi	r24, 0xDC	; 220
    1ecc:	92 07       	cpc	r25, r18
    1ece:	09 f0       	breq	.+2      	; 0x1ed2 <USB_Device_ProcessControlRequest+0x1b2>
    1ed0:	33 c0       	rjmp	.+102    	; 0x1f38 <USB_Device_ProcessControlRequest+0x218>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1ed2:	83 e0       	ldi	r24, 0x03	; 3
    1ed4:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1ed6:	8a e2       	ldi	r24, 0x2A	; 42
    1ed8:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1eda:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1edc:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1ede:	de 01       	movw	r26, r28
    1ee0:	15 96       	adiw	r26, 0x05	; 5
    1ee2:	6e e0       	ldi	r22, 0x0E	; 14
    1ee4:	40 e0       	ldi	r20, 0x00	; 0
    1ee6:	50 e0       	ldi	r21, 0x00	; 0

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1ee8:	11 e2       	ldi	r17, 0x21	; 33
    1eea:	e6 2f       	mov	r30, r22
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	10 93 57 00 	sts	0x0057, r17
    1ef2:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
    1ef4:	40 ff       	sbrs	r20, 0
    1ef6:	03 c0       	rjmp	.+6      	; 0x1efe <USB_Device_ProcessControlRequest+0x1de>
					{
						SerialByte >>= 4;
    1ef8:	82 95       	swap	r24
    1efa:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    1efc:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1efe:	8f 70       	andi	r24, 0x0F	; 15
    1f00:	28 2f       	mov	r18, r24
    1f02:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1f04:	8a 30       	cpi	r24, 0x0A	; 10
    1f06:	18 f0       	brcs	.+6      	; 0x1f0e <USB_Device_ProcessControlRequest+0x1ee>
    1f08:	c9 01       	movw	r24, r18
    1f0a:	c7 96       	adiw	r24, 0x37	; 55
    1f0c:	02 c0       	rjmp	.+4      	; 0x1f12 <USB_Device_ProcessControlRequest+0x1f2>
    1f0e:	c9 01       	movw	r24, r18
    1f10:	c0 96       	adiw	r24, 0x30	; 48
    1f12:	8d 93       	st	X+, r24
    1f14:	9d 93       	st	X+, r25
    1f16:	4f 5f       	subi	r20, 0xFF	; 255
    1f18:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1f1a:	44 31       	cpi	r20, 0x14	; 20
    1f1c:	51 05       	cpc	r21, r1
    1f1e:	29 f7       	brne	.-54     	; 0x1eea <USB_Device_ProcessControlRequest+0x1ca>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1f20:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f22:	80 91 e8 00 	lds	r24, 0x00E8
    1f26:	87 7f       	andi	r24, 0xF7	; 247
    1f28:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1f2c:	ce 01       	movw	r24, r28
    1f2e:	03 96       	adiw	r24, 0x03	; 3
    1f30:	6a e2       	ldi	r22, 0x2A	; 42
    1f32:	70 e0       	ldi	r23, 0x00	; 0
    1f34:	d9 dd       	rcall	.-1102   	; 0x1ae8 <Endpoint_Write_Control_Stream_LE>
    1f36:	12 c0       	rjmp	.+36     	; 0x1f5c <USB_Device_ProcessControlRequest+0x23c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1f38:	60 91 41 01 	lds	r22, 0x0141
    1f3c:	ae 01       	movw	r20, r28
    1f3e:	4f 5f       	subi	r20, 0xFF	; 255
    1f40:	5f 4f       	sbci	r21, 0xFF	; 255
    1f42:	38 db       	rcall	.-2448   	; 0x15b4 <CALLBACK_USB_GetDescriptor>
    1f44:	bc 01       	movw	r22, r24
    1f46:	00 97       	sbiw	r24, 0x00	; 0
    1f48:	09 f4       	brne	.+2      	; 0x1f4c <USB_Device_ProcessControlRequest+0x22c>
    1f4a:	3c c0       	rjmp	.+120    	; 0x1fc4 <USB_Device_ProcessControlRequest+0x2a4>
    1f4c:	80 91 e8 00 	lds	r24, 0x00E8
    1f50:	87 7f       	andi	r24, 0xF7	; 247
    1f52:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1f56:	89 81       	ldd	r24, Y+1	; 0x01
    1f58:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5a:	2b de       	rcall	.-938    	; 0x1bb2 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1f5c:	80 91 e8 00 	lds	r24, 0x00E8
    1f60:	8b 77       	andi	r24, 0x7B	; 123
    1f62:	80 93 e8 00 	sts	0x00E8, r24
    1f66:	2e c0       	rjmp	.+92     	; 0x1fc4 <USB_Device_ProcessControlRequest+0x2a4>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1f68:	80 38       	cpi	r24, 0x80	; 128
    1f6a:	61 f5       	brne	.+88     	; 0x1fc4 <USB_Device_ProcessControlRequest+0x2a4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f6c:	80 91 e8 00 	lds	r24, 0x00E8
    1f70:	87 7f       	andi	r24, 0xF7	; 247
    1f72:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1f76:	80 91 38 01 	lds	r24, 0x0138
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1f7a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f7e:	80 91 e8 00 	lds	r24, 0x00E8
    1f82:	8e 77       	andi	r24, 0x7E	; 126
    1f84:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1f88:	27 dc       	rcall	.-1970   	; 0x17d8 <Endpoint_ClearStatusStage>
    1f8a:	1c c0       	rjmp	.+56     	; 0x1fc4 <USB_Device_ProcessControlRequest+0x2a4>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1f8c:	88 23       	and	r24, r24
    1f8e:	d1 f4       	brne	.+52     	; 0x1fc4 <USB_Device_ProcessControlRequest+0x2a4>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1f90:	90 91 3f 01 	lds	r25, 0x013F
    1f94:	92 30       	cpi	r25, 0x02	; 2
    1f96:	b0 f4       	brcc	.+44     	; 0x1fc4 <USB_Device_ProcessControlRequest+0x2a4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f98:	80 91 e8 00 	lds	r24, 0x00E8
    1f9c:	87 7f       	andi	r24, 0xF7	; 247
    1f9e:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1fa2:	90 93 38 01 	sts	0x0138, r25

	Endpoint_ClearStatusStage();
    1fa6:	18 dc       	rcall	.-2000   	; 0x17d8 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1fa8:	80 91 38 01 	lds	r24, 0x0138
    1fac:	88 23       	and	r24, r24
    1fae:	31 f4       	brne	.+12     	; 0x1fbc <USB_Device_ProcessControlRequest+0x29c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1fb0:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1fb4:	87 fd       	sbrc	r24, 7
    1fb6:	02 c0       	rjmp	.+4      	; 0x1fbc <USB_Device_ProcessControlRequest+0x29c>
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	01 c0       	rjmp	.+2      	; 0x1fbe <USB_Device_ProcessControlRequest+0x29e>
    1fbc:	84 e0       	ldi	r24, 0x04	; 4
    1fbe:	80 93 3c 01 	sts	0x013C, r24

	EVENT_USB_Device_ConfigurationChanged();
    1fc2:	ce db       	rcall	.-2148   	; 0x1760 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1fc4:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1fc8:	83 ff       	sbrs	r24, 3
    1fca:	0a c0       	rjmp	.+20     	; 0x1fe0 <USB_Device_ProcessControlRequest+0x2c0>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1fcc:	80 91 eb 00 	lds	r24, 0x00EB
    1fd0:	80 62       	ori	r24, 0x20	; 32
    1fd2:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1fd6:	80 91 e8 00 	lds	r24, 0x00E8
    1fda:	87 7f       	andi	r24, 0xF7	; 247
    1fdc:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    1fe0:	ac 96       	adiw	r28, 0x2c	; 44
    1fe2:	0f b6       	in	r0, 0x3f	; 63
    1fe4:	f8 94       	cli
    1fe6:	de bf       	out	0x3e, r29	; 62
    1fe8:	0f be       	out	0x3f, r0	; 63
    1fea:	cd bf       	out	0x3d, r28	; 61
    1fec:	cf 91       	pop	r28
    1fee:	df 91       	pop	r29
    1ff0:	1f 91       	pop	r17
    1ff2:	0f 91       	pop	r16
    1ff4:	08 95       	ret

00001ff6 <USB_Event_Stub>:

// cppcheck-suppress unusedFunction
void USB_Event_Stub(void)
{

}
    1ff6:	08 95       	ret

00001ff8 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1ff8:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    1ffa:	80 91 3c 01 	lds	r24, 0x013C
    1ffe:	88 23       	and	r24, r24
    2000:	71 f0       	breq	.+28     	; 0x201e <USB_USBTask+0x26>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2002:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2006:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    200a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    200e:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    2012:	83 ff       	sbrs	r24, 3
    2014:	01 c0       	rjmp	.+2      	; 0x2018 <USB_USBTask+0x20>
		  USB_Device_ProcessControlRequest();
    2016:	84 de       	rcall	.-760    	; 0x1d20 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2018:	1f 70       	andi	r17, 0x0F	; 15
    201a:	10 93 e9 00 	sts	0x00E9, r17
		#if defined(USB_CAN_BE_HOST)
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
		#endif
	#endif
}
    201e:	1f 91       	pop	r17
    2020:	08 95       	ret

00002022 <__mulhi3>:
    2022:	55 27       	eor	r21, r21
    2024:	00 24       	eor	r0, r0

00002026 <__mulhi3_loop>:
    2026:	80 ff       	sbrs	r24, 0
    2028:	02 c0       	rjmp	.+4      	; 0x202e <__mulhi3_skip1>
    202a:	06 0e       	add	r0, r22
    202c:	57 1f       	adc	r21, r23

0000202e <__mulhi3_skip1>:
    202e:	66 0f       	add	r22, r22
    2030:	77 1f       	adc	r23, r23
    2032:	61 15       	cp	r22, r1
    2034:	71 05       	cpc	r23, r1
    2036:	21 f0       	breq	.+8      	; 0x2040 <__mulhi3_exit>
    2038:	96 95       	lsr	r25
    203a:	87 95       	ror	r24
    203c:	00 97       	sbiw	r24, 0x00	; 0
    203e:	99 f7       	brne	.-26     	; 0x2026 <__mulhi3_loop>

00002040 <__mulhi3_exit>:
    2040:	95 2f       	mov	r25, r21
    2042:	80 2d       	mov	r24, r0
    2044:	08 95       	ret

00002046 <__eerd_byte_usb162>:
    2046:	f9 99       	sbic	0x1f, 1	; 31
    2048:	fe cf       	rjmp	.-4      	; 0x2046 <__eerd_byte_usb162>
    204a:	92 bd       	out	0x22, r25	; 34
    204c:	81 bd       	out	0x21, r24	; 33
    204e:	f8 9a       	sbi	0x1f, 0	; 31
    2050:	99 27       	eor	r25, r25
    2052:	80 b5       	in	r24, 0x20	; 32
    2054:	08 95       	ret

00002056 <_exit>:
    2056:	f8 94       	cli

00002058 <__stop_program>:
    2058:	ff cf       	rjmp	.-2      	; 0x2058 <__stop_program>
